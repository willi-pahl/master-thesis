{"result_0":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('010', '111') == '101'\n# Test case 3:\nassert string_xor('010', '1111') == '1011'\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('010', '110') == '100'\n# Test case 3:\nassert string_xor('010', '110') == '100'\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('010', '11010') == '10010'\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('000', '000') == '000'\n# Test case 3:\nassert string_xor('001', '001') == '000'\n# Test case 4:\nassert string_xor('101', '101') == '000'\n# Test case 5:\nassert string_xor('111', '000') == '111'\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('000', '000') == '000'\n# Test case 3:\nassert string_xor('001', '010') == '011'\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('000', '000') == '000'\n# Test case 3:\nassert string_xor('001', '001') == '000'\n# Test case 4:\nassert string_xor('011', '011') == '000'\n# Test case 5:\nassert string_xor('100', '100') == '000'\n# Test case 6:\nassert string_xor('101', '101') == '000'\n# Test case 7:\nassert string_xor('110', '110') == '000'\n# Test case 8:\nassert string_xor('111', '111') == '000'\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('000', '000') == '000'\n# Test case 3:\nassert string_xor('111', '111') == '000'\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('000', '000') == '000'\n# Test case 3:\nassert string_xor('111', '111') == '000'\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('000', '000') == '000'\n# Test case 3:\nassert string_xor('111', '111') == '000'\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef string_xor(a, b):\n    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert string_xor('010', '110') == '100'\n# Test case 2:\nassert string_xor('010', '100') == '110'\n# Test case 3:\nassert string_xor('110', '010') == '100'\n[/TESTS]\n"}
