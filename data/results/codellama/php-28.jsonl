{"result_0":"[PYTHON]\ndef search(my_list):\n    if not my_list:\n        return -1\n    max_val = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > max_val:\n            max_val = i\n    return max_val\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef search(my_list):\n    largest = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > 0:\n            largest = i\n    return largest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > 0:\n            max_value = i\n    return max_value\n[/PYTHON]\n[JAVASCRIPT]\nfunction search(arr) {\n    let maxValue = -1;\n    arr.forEach(element => {\n        if(arr.filter(item => item === element).length >= element && element > 0) {\n            maxValue = element;\n        }\n    });\n    return maxValue;\n}\n[/JAVASCRIPT]\n[C#]\nusing System;\nusing System.Linq;\n\nclass Solution {\n    public int Search(int[] arr) {\n        var maxValue = -1;\n        foreach (var i in arr) {\n            if (arr.Count(x => x == i) >= i && i > 0) {\n                maxValue = i;\n            }\n        }\n        return maxValue;\n    }\n}\n[/C#]\n[PHP]\nfunction search($lst) {\n    $max_value = -1;\n    foreach ($i in $lst) {\n        if (count(array_keys($lst, $i)) >= $i && $i > 0) {\n            $max_value = $i;\n        }\n    }\n    return $max_value;\n}\n[/PHP]\n"}
{"result_3":"[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > 0:\n            max_value = i\n    return max_value\n[/PYTHON]\n[JAVASCRIPT]\nfunction search(arr) {\n    // Initialize maximum value to negative one\n    let maxValue = -1;\n    \n    // Loop through the array\n    for (let i = 0; i < arr.length; i++) {\n        // Check if current element is greater than zero and has a frequency greater than or equal to its value\n        if (arr[i] > 0 && arr.filter(item => item === arr[i]).length >= arr[i]) {\n            // If yes, update the maximum value\n            maxValue = arr[i];\n        }\n    }\n    \n    // Return the maximum value\n    return maxValue;\n}\n[/JAVASCRIPT]\n"}
{"result_4":"[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > 0:\n            max_value = i\n    return max_value\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    return max_value\n[/PYTHON]\n[JAVASCRIPT]\nfunction search(arr) {\n    // Sort the array in ascending order\n    arr.sort((a, b) => a - b);\n    // Initialize the maximum value and its frequency to 0\n    let maxValue = 0, freq = 0;\n    // Loop through the array\n    for (let i = 0; i < arr.length; i++) {\n        // If the current value is greater than the maximum value, update the maximum value and its frequency\n        if (arr[i] > maxValue) {\n            maxValue = arr[i];\n            freq = 1;\n        } else if (arr[i] === maxValue) { // If the current value is equal to the maximum value, increment its frequency\n            freq++;\n        }\n    }\n    // If the frequency of the maximum value is greater than or equal to its value, return the maximum value, otherwise return -1\n    return freq >= maxValue ? maxValue : -1;\n}\n[/JAVASCRIPT]\n[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    return max_value\n[/PYTHON]\n"}
{"result_6":"[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > 0:\n            max_value = i\n    return max_value\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef search(my_list):\n    if not my_list:\n        return -1\n    max_val = max(my_list)\n    count = my_list.count(max_val)\n    if count >= max_val:\n        return max_val\n    else:\n        return -1\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef search(my_list):\n    max_value = -1\n    for i in my_list:\n        if my_list.count(i) >= i and i > 0:\n            max_value = i\n    return max_value\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef search(my_list):\n    max_value = None\n    for i in my_list:\n        if my_list.count(i) >= i:\n            if max_value == None or i > max_value:\n                max_value = i\n    return max_value\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert search([4, 1, 2, 2, 3, 1]) == 2\n# Test case 2:\nassert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n# Test case 3:\nassert search([5, 5, 4, 4, 4]) == -1\n[/TESTS]\n"}
