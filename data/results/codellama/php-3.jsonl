{"result_0":"[PYTHON]\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef longest(my_list):\n    if not my_list:\n        return None\n    return max(my_list, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'b', 'c']) == 'a'\n# Test case 3:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef longest(strings):\n    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert longest([]) == None\n# Test case 2:\nassert longest(['a', 'bb', 'ccc']) == 'ccc'\n# Test case 3:\nassert longest(['a', 'b', 'c']) == 'a'\n[/TESTS]\n"}
