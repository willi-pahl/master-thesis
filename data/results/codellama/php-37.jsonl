{"result_0":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 1) == []\n# Test case 2:\nassert get_row([[1, 2, 3]], 1) == [(0, 0)]\n# Test case 3:\nassert get_row([[1, 2, 3], [4, 5, 6]], 1) == [(0, 0), (1, 0)]\n# Test case 4:\nassert get_row([[1, 2, 3], [4, 5, 6]], 2) == [(0, 1), (1, 1)]\n# Test case 5:\nassert get_row([[1, 2, 3], [4, 5, 6]], 3) == [(0, 2), (1, 2)]\n# Test case 6:\nassert get_row([[1, 2, 3], [4, 5, 6]], 4) == [(1, 0)]\n# Test case 7:\nassert get_row([[1, 2, 3], [4, 5, 6]], 5) == [(1, 1)]\n# Test case 8:\nassert get_row([[1, 2, 3], [4, 5, 6]], 6) == [(1, 2)]\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([\n                   [1,2,3,4,5,6],\n                   [1,2,3,4,1,6],\n                   [1,2,3,4,5,1]\n               ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 2:\nassert get_row([], 1) == []\n# Test case 3:\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 1) == []\n# Test case 2:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 3:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 2) == [(0, 1), (1, 3), (1, 1), (2, 4), (2, 1)]\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 1) == []\n# Test case 2:\nassert get_row([[1, 2, 3], [4, 5, 6]], 1) == [(0, 0), (1, 0)]\n# Test case 3:\nassert get_row([[1, 2, 3], [4, 5, 6]], 2) == [(0, 1), (1, 1)]\n# Test case 4:\nassert get_row([[1, 2, 3], [4, 5, 6]], 3) == [(0, 2), (1, 2)]\n# Test case 5:\nassert get_row([[1, 2, 3], [4, 5, 6]], 4) == []\n# Test case 6:\nassert get_row([[1, 2, 3], [4, 5, 6]], 5) == [(1, 1), (1, 2)]\n# Test case 7:\nassert get_row([[1, 2, 3], [4, 5, 6]], 6) == [(1, 2), (1, 1)]\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([\n                   [1,2,3,4,5,6],\n                   [1,2,3,4,1,6],\n                   [1,2,3,4,5,1]\n               ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 2:\nassert get_row([], 1) == []\n# Test case 3:\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 0) == []\n# Test case 2:\nassert get_row([[]], 0) == []\n# Test case 3:\nassert get_row([[1]], 1) == [(0, 0)]\n# Test case 4:\nassert get_row([[1, 2], [3, 4]], 1) == [(0, 0), (1, 0)]\n# Test case 5:\nassert get_row([[1, 2], [3, 4]], 2) == [(0, 1), (1, 1)]\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 1) == []\n# Test case 2:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 3:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 2) == [(0, 1), (1, 3), (1, 1), (2, 4), (2, 1)]\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 1) == []\n# Test case 2:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 3:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 2) == [(0, 1), (1, 3), (1, 1), (2, 4), (2, 1)]\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([], 1) == []\n# Test case 2:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 3:\nassert get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 2) == [(0, 1), (1, 3), (1, 1), (2, 4), (2, 1)]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n# Test case 2:\nassert get_row([], 1) == []\n# Test case 3:\nassert get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n[/TESTS]\n"}
