{"result_0":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    smallest = my_list[0]\n    second_smallest = None\n    for i in range(1, len(my_list)):\n        if my_list[i] < smallest:\n            second_smallest = smallest\n            smallest = my_list[i]\n        elif second_smallest is None:\n            second_smallest = my_list[i]\n    return second_smallest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert nextSmallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert nextSmallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert nextSmallest([]) == None\n# Test case 4:\nassert nextSmallest([1, 1]) == None\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert next_smallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert next_smallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert next_smallest([]) == None\n# Test case 4:\nassert next_smallest([1, 1]) == None\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert nextSmallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert nextSmallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert nextSmallest([]) == None\n# Test case 4:\nassert nextSmallest([1, 1]) == None\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert nextSmallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert nextSmallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert nextSmallest([]) == None\n# Test case 4:\nassert nextSmallest([1, 1]) == None\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    smallest = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] < smallest:\n            smallest = my_list[i]\n    return smallest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert nextSmallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert nextSmallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert nextSmallest([]) == None\n# Test case 4:\nassert nextSmallest([1, 1]) == None\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    smallest = my_list[0]\n    second_smallest = None\n    for num in my_list:\n        if num > smallest:\n            second_smallest = num\n            break\n    return second_smallest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert next_smallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert next_smallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert next_smallest([]) == None\n# Test case 4:\nassert next_smallest([1, 1]) == None\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert next_smallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert next_smallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert next_smallest([]) == None\n# Test case 4:\nassert next_smallest([1, 1]) == None\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert next_smallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert next_smallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert next_smallest([]) == None\n# Test case 4:\nassert next_smallest([1, 1]) == None\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert nextSmallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert nextSmallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert nextSmallest([]) == None\n# Test case 4:\nassert nextSmallest([1, 1]) == None\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef next_smallest(my_list):\n    if len(my_list) < 2:\n        return None\n    sorted_list = sorted(my_list)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] != sorted_list[i+1]:\n            return sorted_list[i+1]\n    return None\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert nextSmallest([1, 2, 3, 4, 5]) == 2\n# Test case 2:\nassert nextSmallest([5, 1, 4, 3, 2]) == 2\n# Test case 3:\nassert nextSmallest([]) == None\n# Test case 4:\nassert nextSmallest([1, 1]) == None\n[/TESTS]\n"}
