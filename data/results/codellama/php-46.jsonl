{"result_0":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    avg = sum / (m - n + 1)\n    return int(avg)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total / (m - n + 1)\n    return int(avg)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(int(sum(range(n, m+1)) / (m-n+1)))[2:]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total / (m - n + 1)\n    return int(avg)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    \n    avg = sum / (m - n + 1)\n    rounded_avg = int(avg + 0.5)\n    \n    return format(rounded_avg, 'b')\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total / (m - n + 1)\n    return int(avg)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = total / (m - n + 1)\n    return round(avg)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(int(sum(range(n, m+1)) / (m-n+1)))[2:]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total = 0\n    for i in range(n, m+1):\n        total += i\n    \n    avg = total / (m - n + 1)\n    rounded_avg = int(avg + 0.5)\n    return formatted_binary(rounded_avg)\n\ndef formatted_binary(n):\n    return \"0b\" + bin(n)[2:]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    sum = 0\n    for i in range(n, m+1):\n        sum += i\n    \n    avg = sum / (m - n + 1)\n    rounded_avg = round(avg)\n    \n    return format(rounded_avg, 'b')\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert rounded_avg(1, 5) == \"0b11\"\n# Test case 2:\nassert rounded_avg(7, 5) == -1\n# Test case 3:\nassert rounded_avg(10, 20) == \"0b1111\"\n# Test case 4:\nassert rounded_avg(20, 33) == \"0b11010\"\n[/TESTS]\n"}
