{"result_0":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef even_odd_palindrome(n):\n    # Initialize a tuple to store the count of even and odd palindromes\n    count_even_odd = (0, 0)\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a palindrome\n        if str(i) == str(i)[::-1]:\n            # Increment the count of even palindromes if the number is even\n            if i % 2 == 0:\n                count_even_odd = (count_even_odd[0] + 1, count_even_odd[1])\n            # Increment the count of odd palindromes if the number is odd\n            else:\n                count_even_odd = (count_even_odd[0], count_even_odd[1] + 1)\n\n    # Return the final count of even and odd palindromes\n    return count_even_odd\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    \n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef even_odd_palindrome(n):\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert even_odd_palindrome(3) == (1, 2)\n# Test case 2:\nassert even_odd_palindrome(12) == (4, 6)\n# Test case 3:\nassert even_odd_palindrome(100) == (25, 75)\n[/TESTS]\n"}
