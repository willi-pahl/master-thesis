{"result_0":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            count += 1\n            if count > 1:\n                return False\n            j = i + 1\n            while j < len(arr) and arr[j] != i + 1:\n                j += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return True\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            return False\n\n    return True\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            count += 1\n            if count > 1:\n                return False\n            j = i + 1\n            while j < len(arr) and arr[j] != i + 1:\n                j += 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return True\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            count += 1\n\n    return count <= 1\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return False\n    return True\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef move_one_ball(arr):\n    # Check if the array is empty\n    if not arr:\n        return True\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize a variable to store the number of swaps\n    swaps = 0\n\n    # Loop through the array and check if it is in non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            # If the array is not in non-decreasing order, swap the elements and increment the number of swaps\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            swaps += 1\n\n    # If the array is sorted and no swaps were done, return True\n    if swaps == 0:\n        return True\n\n    # If the array is sorted and swaps were done, return False\n    if swaps > 0:\n        return False\n\n# Test case 1: Empty array\narr = []\nprint(move_one_ball(arr)) # Should be True\n\n# Test case 2: Sorted array\narr = [3, 4, 5, 1, 2]\nprint(move_one_ball(arr)) # Should be True\n\n# Test case 3: Unsorted array\narr = [3, 5, 4, 1, 2]\nprint(move_one_ball(arr)) # Should be False\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([]) == True\n# Test case 2:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 3:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize a variable to keep track of the number of swaps\n    swaps = 0\n\n    # Iterate through the array and check if it is sorted in non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            # If the array is not sorted in non-decreasing order, swap the elements\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            swaps += 1\n\n    # If the array is sorted in non-decreasing order and no swaps were done, return True\n    return swaps == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return False\n    return True\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            count += 1\n\n    return count <= 1\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([]) == True\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef move_one_ball(arr):\n    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n\n    return count % 2 == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert move_one_ball([3, 4, 5, 1, 2]) == True\n# Test case 2:\nassert move_one_ball([3, 5, 4, 1, 2]) == False\n# Test case 3:\nassert move_one_ball([1, 2, 3, 4, 5]) == True\n# Test case 4:\nassert move_one_ball([1, 2, 3, 4, 5, 6]) == True\n# Test case 5:\nassert move_one_ball([1, 3, 2, 4, 5, 6]) == False\n[/TESTS]\n"}
