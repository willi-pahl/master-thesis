{"result_0":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.isconsonant()]) == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n# Test case 2:\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n# Test case 3:\nassert select_words(\"simple white space\", 2) == []\n# Test case 4:\nassert select_words(\"Hello world\", 4) == [\"world\"]\n# Test case 5:\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.isconsonant()]) == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[JAVASCRIPT]\nfunction selectWords(s, n) {\n    const words = s.split(' ');\n    const selectedWords = [];\n    for (const word of words) {\n        if (word.replace(/[^aeiou]/g, '').length === n) {\n            selectedWords.push(word);\n        }\n    }\n    return selectedWords;\n}\n[/JAVASCRIPT]\n[CSHARP]\nusing System;\nusing System.Text.RegularExpressions;\n\npublic static class Program {\n    public static void Main() {\n        string s = \"Mary had a little lamb\";\n        int n = 4;\n        Console.WriteLine(string.Join(\",\", SelectWords(s, n)));\n    }\n\n    private static IEnumerable<string> SelectWords(string s, int n) {\n        return Regex.Matches(s, @\"\w+\")\n                   .Cast<Match>()\n                   .Select(m => m.Value)\n                   .Where(word => word.Count(c => !Char.IsLetter(c)) == n);\n    }\n}\n[/CSHARP]\n[HASKELL]\nimport Data.List (words, sort)\n\nselectWords :: String -> Int -> [String]\nselectWords s n = sort $ words s\n[/HASKELL]\n[PHP]\nfunction selectWords($s, $n)\n{\n    $words = explode(\" \", $s);\n    foreach ($word in $words) {\n        if (strlen(preg_replace(\"/[^aeiou]/\", \"\", $word)) == $n) {\n            $selectedWords[] = $word;\n        }\n    }\n    return $selectedWords;\n}\n[/PHP]\n"}
{"result_2":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.isconsonant()]) == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[JAVA]\nprivate static List<String> selectWords(String s, int n) {\n    String[] words = s.split(\" \");\n    List<String> selectedWords = new ArrayList<>();\n    for (String word : words) {\n        if (word.length() == n) {\n            selectedWords.add(word);\n        }\n    }\n    return selectedWords;\n}\n[/JAVA]\n"}
{"result_3":"[PYTHON]\ndef select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    result = []\n    for word in words:\n        if len([c for c in word if c.isconsonant()]) == n:\n            result.append(word)\n    return result\n[/PYTHON]\n[JAVASCRIPT]\nfunction selectWords(s, n) {\n    if (s === \"\") {\n        return [];\n    }\n    const words = s.split(\" \");\n    const result = [];\n    for (const word of words) {\n        if (word.replace(/[^bcdfghjklmnpqrstvwxz]/gi, \"\").length === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction selectWords(s: string, n: number): string[] {\n    if (s === \"\") {\n        return [];\n    }\n    const words = s.split(\" \");\n    const result = [];\n    for (const word of words) {\n        if (word.replace(/[^bcdfghjklmnpqrstvwxz]/gi, \"\").length === n) {\n            result.push(word);\n        }\n    }\n    return result;\n}\n[/TYPESCRIPT]\n[JAVA]\nprivate static List<String> selectWords(String s, int n) {\n    if (s == null || s.isEmpty()) {\n        return new ArrayList<>();\n    }\n    String[] words = s.split(\" \");\n    List<String> result = new ArrayList<>();\n    for (String word : words) {\n        if (word.replaceAll(\"[^bcdfghjklmnpqrstvwxz]\", \"\").length() == n) {\n            result.add(word);\n        }\n    }\n    return result;\n}\n[/JAVA]\n"}
{"result_4":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(set(word)) == n]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert select_words(\"\", 0) == []\n# Test case 2:\nassert select_words(\"abc\", 1) == [\"a\", \"b\", \"c\"]\n# Test case 3:\nassert select_words(\"abc\", 2) == [\"ab\", \"bc\"]\n# Test case 4:\nassert select_words(\"abc\", 3) == [\"abc\"]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef select_words(s, n):\n    if not s:\n        return []\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.isconsonant()]) == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[JAVASCRIPT]\nfunction selectWords(s, n) {\n    if (s === \"\") {\n        return [];\n    }\n    const words = s.split(\" \");\n    const selectedWords = [];\n    for (const word of words) {\n        if (word.replace(/[^a-zA-Z]/g, \"\").length === n) {\n            selectedWords.push(word);\n        }\n    }\n    return selectedWords;\n}\n[/JAVASCRIPT]\n[PHP]\nfunction selectWords($s, $n)\n{\n    if (empty($s)) {\n        return [];\n    }\n    $words = explode(\" \", $s);\n    $selectedWords = [];\n    foreach ($words as $word) {\n        if (strlen(preg_replace(\"/[^a-zA-Z]/\", \"\", $word)) == $n) {\n            $selectedWords[] = $word;\n        }\n    }\n    return $selectedWords;\n}\n[/PHP]\n"}
{"result_6":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if word.count('c') == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[JAVA]\npublic class SelectWords {\n    public static void main(String[] args) {\n        String s = \"Mary had a little lamb\";\n        int n = 4;\n        List<String> words = Arrays.asList(s.split(\"\\s+\"));\n        List<String> selectedWords = new ArrayList<>();\n        for (String word : words) {\n            if (word.length() == n) {\n                selectedWords.add(word);\n            }\n        }\n        System.out.println(selectedWords);\n    }\n}\n[/JAVA]\n"}
{"result_7":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    return [word for word in words if len(set(list('aeiou')) & set(list(word))) == n]\n[/PYTHON]\n[JAVA]\npublic class SelectWords {\n    public static void main(String[] args) {\n        String s = \"Mary had a little lamb\";\n        int n = 4;\n        List<String> words = selectWords(s, n);\n        System.out.println(words);\n    }\n\n    private static List<String> selectWords(String s, int n) {\n        String[] wordArray = s.split(\" \");\n        List<String> words = new ArrayList<>();\n        for (String word : wordArray) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}\n[/JAVA]\n"}
{"result_8":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.isalpha() and c.lower() not in \"aeiou\"]) == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert select_words(\"Mary had a little lamb\", 4) == [\"little\"]\n# Test case 2:\nassert select_words(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"]\n# Test case 3:\nassert select_words(\"simple white space\", 2) == []\n# Test case 4:\nassert select_words(\"Hello world\", 4) == [\"world\"]\n# Test case 5:\nassert select_words(\"Uncle sam\", 3) == [\"Uncle\"]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef select_words(s, n):\n    words = s.split()\n    selected_words = []\n    for word in words:\n        if len([c for c in word if c.isconsonant()]) == n:\n            selected_words.append(word)\n    return selected_words\n[/PYTHON]\n[JAVA]\npublic class WordSelector {\n    public static List<String> selectWords(String s, int n) {\n        String[] words = s.split(\" \");\n        List<String> selectedWords = new ArrayList<>();\n        for (String word : words) {\n            if (isConsonant(word, n)) {\n                selectedWords.add(word);\n            }\n        }\n        return selectedWords;\n    }\n\n    private static boolean isConsonant(String word, int n) {\n        int consonants = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (!word.charAt(i).isVowel()) {\n                consonants++;\n            }\n        }\n        return consonants == n;\n    }\n}\n[/JAVA]\n[C++]\n#include <iostream>\n#include <string>\n#include <vector>\n\nstd::vector<std::string> selectWords(const std::string& s, int n) {\n	std::vector<std::string> words;\n	std::string word = \"\";\n	for (auto c : s) {\n		if (c == ' ') {\n			words.push_back(word);\n			word = \"\";\n		}\n		else {\n			word += c;\n		}\n	}\n	if (!word.empty()) {\n		words.push_back(word);\n	}\n	std::vector<std::string> selectedWords;\n	for (auto& word : words) {\n		int consonants = 0;\n		for (auto c : word) {\n			if (!isVowel(c)) {\n				consonants++;\n			}\n		}\n		if (consonants == n) {\n			selectedWords.push_back(word);\n		}\n	}\n	return selectedWords;\n}\n\nbool isVowel(char c) {\n	switch (c) {\n	case 'a': case 'e': case 'i': case 'o': case 'u':\n		return true;\n	default:\n		return false;\n	}\n}\n[/C++]\n[PASCAL]\nprogram WordSelector;\n\nfunction SelectWords(s: string; n: integer): TStringDynArray;\nvar\n  words: TStringDynArray;\n  selectedWords: TStringDynArray;\n  i: integer;\nbegin\n  words := s.Split([' ']);\n  SetLength(selectedWords, Length(words));\n  for i := 0 to High(words) do\n    if ConsonantCount(words[i]) = n then\n      selectedWords[i] := words[i];\n  Result := selectedWords;\nend;\n\nfunction ConsonantCount(s: string): integer;\nvar\n  i: integer;\nbegin\n  Result := 0;\n  for i := 1 to Length(s) do\n    if not IsVowel(s[i]) then\n      Inc(Result);\nend;\n\nfunction IsVowel(c: char): boolean;\nbegin\n  Result := c in ['a', 'e', 'i', 'o', 'u'];\nend;\n\nbegin\n  Writeln(SelectWords('Mary had a little lamb', 4));\n  Readln;\nend.\n[/PASCAL]\n[GO]\nfunc SelectWords(s string, n int) []string {\n    words := strings.Split(s, \" \")\n    selectedWords := make([]string, len(words))\n    for i, word := range words {\n        if consonantCount(word) == n {\n            selectedWords[i] = word\n        }\n    }\n    return selectedWords\n}\n\nfunc consonantCount(s string) int {\n    count := 0\n    for _, c := range s {\n        if !isVowel(c) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc isVowel(c byte) bool {\n    switch c {\n    case 'a', 'e', 'i', 'o', 'u':\n        return true\n    }\n    return false\n}\n[/GO]\n[RUBY]\ndef select_words(s, n)\n  words = s.split\n  selected_words = []\n  words.each do |word|\n    if consonant_count(word) == n\n      selected_words << word\n    end\n  end\n  selected_words\nend\n\ndef consonant_count(s)\n  count = 0\n  s.each_char do |c|\n    count += 1 if c =~ /[^aeiou]/i\n  end\n  count\nend\n[/RUBY]\n[SWIFT]\nfunc selectWords(_ s: String, _ n: Int) -> [String] {\n    let words = s.components(separatedBy: \" \")\n    var selectedWords = [String]()\n    for word in words {\n        if consonantCount(word) == n {\n            selectedWords.append(word)\n        }\n    }\n    return selectedWords\n}\n\nfunc consonantCount(_ s: String) -> Int {\n    var count = 0\n    for c in s where !c.isVowel {\n        count += 1\n    }\n    return count\n}\n\nextension Character {\n    func isVowel() -> Bool {\n        switch self {\n            case \"a\", \"e\", \"i\", \"o\", \"u\":\n                return true\n            default:\n                return false\n        }\n    }\n}\n[/SWIFT]\n[PHP]\nfunction selectWords($s, $n)\n{\n    $words = explode(\" \", $s);\n    $selectedWords = [];\n    foreach ($words as $word) {\n        if (consonantCount($word) == $n) {\n            $selectedWords[] = $word;\n        }\n    }\n    return $selectedWords;\n}\n\nfunction consonantCount($s)\n{\n    $count = 0;\n    for ($i = 0, $l = strlen($s); $i < $l; ++$i) {\n        if (!ctype_alpha($s[$i])) {\n            continue;\n        } elseif (in_array(strtolower($s[$i]), [\"a\", \"e\", \"i\", \"o\", \"u\"])) {\n            continue;\n        }\n        ++$count;\n    }\n    return $count;\n}\n[/PHP]\n"}
