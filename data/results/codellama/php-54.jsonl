{"result_0":"[PYTHON]\ndef maximum_k(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum_k([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum_k([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum_k([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef maximum_k(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum_k([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum_k([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum_k([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef maximum_k(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum_k([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum_k([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum_k([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef maximum_k(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum_k([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum_k([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum_k([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef maximum_k(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum_k([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum_k([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum_k([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef maximum_k(arr, k):\n    return sorted(arr, reverse=True)[:k]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert maximum_k([-3, -4, 5], 3) == [-4, -3, 5]\n# Test case 2:\nassert maximum_k([4, -4, 4], 2) == [4, 4]\n# Test case 3:\nassert maximum_k([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n[/TESTS]\n"}
