{"result_0":"[PYTHON]\ndef tribonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == 0\n# Test case 2:\nassert tribonacci(1) == 1\n# Test case 3:\nassert tribonacci(2) == 3\n# Test case 4:\nassert tribonacci(3) == 2\n# Test case 5:\nassert tribonacci(4) == 8\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef tribonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == 0\n# Test case 2:\nassert tribonacci(1) == 1\n# Test case 3:\nassert tribonacci(2) == 3\n# Test case 4:\nassert tribonacci(3) == 2\n# Test case 5:\nassert tribonacci(4) == 8\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef tribonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == 0\n# Test case 2:\nassert tribonacci(1) == 1\n# Test case 3:\nassert tribonacci(2) == 3\n# Test case 4:\nassert tribonacci(3) == 2\n# Test case 5:\nassert tribonacci(4) == 8\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef tribonacci(n):\n    if n <= 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    result = [0, 1, 1]\n    for i in range(3, n+1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == []\n# Test case 2:\nassert tribonacci(1) == [0]\n# Test case 3:\nassert tribonacci(2) == [0, 1]\n# Test case 4:\nassert tribonacci(3) == [1, 3, 2, 8]\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef tribonacci(n):\n    if n <= 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    result = [0, 1, 1]\n    for i in range(3, n+1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == []\n# Test case 2:\nassert tribonacci(1) == [0]\n# Test case 3:\nassert tribonacci(2) == [0, 1]\n# Test case 4:\nassert tribonacci(3) == [0, 1, 1]\n# Test case 5:\nassert tribonacci(4) == [0, 1, 1, 2]\n# Test case 6:\nassert tribonacci(5) == [0, 1, 1, 2, 4]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef tribonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == 0\n# Test case 2:\nassert tribonacci(1) == 1\n# Test case 3:\nassert tribonacci(2) == 3\n# Test case 4:\nassert tribonacci(3) == 2\n# Test case 5:\nassert tribonacci(4) == 8\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef tribonacci(n):\n    if n <= 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    result = [0, 1, 1]\n    for i in range(3, n+1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == []\n# Test case 2:\nassert tribonacci(1) == [0]\n# Test case 3:\nassert tribonacci(2) == [0, 1]\n# Test case 4:\nassert tribonacci(3) == [0, 1, 1]\n# Test case 5:\nassert tribonacci(4) == [0, 1, 1, 2]\n# Test case 6:\nassert tribonacci(5) == [0, 1, 1, 2, 4]\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef tribonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == 0\n# Test case 2:\nassert tribonacci(1) == 1\n# Test case 3:\nassert tribonacci(2) == 3\n# Test case 4:\nassert tribonacci(3) == 2\n# Test case 5:\nassert tribonacci(4) == 8\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef tribonacci(n):\n    if n <= 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    result = [0, 1, 1]\n    for i in range(3, n+1):\n        result.append(result[i-1] + result[i-2] + result[i-3])\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == []\n# Test case 2:\nassert tribonacci(1) == [0]\n# Test case 3:\nassert tribonacci(2) == [0, 1]\n# Test case 4:\nassert tribonacci(3) == [0, 1, 1, 2]\n# Test case 5:\nassert tribonacci(4) == [0, 1, 1, 2, 4]\n# Test case 6:\nassert tribonacci(5) == [0, 1, 1, 2, 4, 7]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef tribonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert tribonacci(0) == 0\n# Test case 2:\nassert tribonacci(1) == 1\n# Test case 3:\nassert tribonacci(2) == 3\n# Test case 4:\nassert tribonacci(3) == 2\n# Test case 5:\nassert tribonacci(4) == 10\n[/TESTS]\n"}
