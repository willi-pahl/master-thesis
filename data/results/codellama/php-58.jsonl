{"result_0":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n# Test case 4:\nassert digits(123456789) == 123456789\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[JAVASCRIPT]\nfunction digits(n) {\n    let oddDigits = '';\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 !== 0) {\n            oddDigits += digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return parseInt(oddDigits, 10);\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction digits(n: number): number {\n    let oddDigits = '';\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 !== 0) {\n            oddDigits += digit;\n        }\n        n = Math.floor(n / 10);\n    }\n    return parseInt(oddDigits, 10);\n}\n[/TYPESCRIPT]\n[JAVA]\npublic class Digits {\n    public static int digits(int n) {\n        int oddDigits = 1;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 != 0) {\n                oddDigits *= digit;\n            }\n            n /= 10;\n        }\n        return oddDigits;\n    }\n}\n[/JAVA]\n[CSHARP]\npublic static class Digits\n{\n    public static int Digits(int n)\n    {\n        int oddDigits = 1;\n        while (n > 0)\n        {\n            int digit = n % 10;\n            if (digit % 2 != 0)\n            {\n                oddDigits *= digit;\n            }\n            n /= 10;\n        }\n        return oddDigits;\n    }\n}\n[/CSHARP]\n[GO]\nfunc digits(n int) int {\n    var oddDigits int = 1\n    for ; n > 0; n /= 10 {\n        digit := n % 10\n        if digit%2 != 0 {\n            oddDigits *= digit\n        }\n    }\n    return oddDigits\n}\n[/GO]\n[RUBY]\ndef digits(n)\n  odd_digits = ''\n  while n > 0\n    digit = n % 10\n    if digit.odd?\n      odd_digits += digit\n    end\n    n /= 10\n  end\n  odd_digits.to_i\nend\n[/RUBY]\n[SWIFT]\nfunc digits(_ n: Int) -> Int {\n    var oddDigits = 1\n    while n > 0 {\n        let digit = n % 10\n        if digit % 2 != 0 {\n            oddDigits *= digit\n        }\n        n /= 10\n    }\n    return oddDigits\n}\n[/SWIFT]\n[PASCAL]\nfunction Digits(n: Integer): Integer;\nvar\n  oddDigits, currentDigit: Integer;\nbegin\n  oddDigits := 1;\n  while n > 0 do\n  begin\n    currentDigit := n mod 10;\n    if currentDigit mod 2 <> 0 then\n      oddDigits := oddDigits * currentDigit;\n    n := n div 10;\n  end;\n  result := oddDigits;\nend;\n[/PASCAL]\n"}
{"result_2":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[JAVASCRIPT]\nfunction digits(n) {\n    let oddDigits = [];\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 === 1) {\n            oddDigits.push(digit);\n        }\n        n = Math.floor(n / 10);\n    }\n    return parseInt(oddDigits.join(''));\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction digits(n: number): number {\n    let oddDigits = [];\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 === 1) {\n            oddDigits.push(digit);\n        }\n        n = Math.floor(n / 10);\n    }\n    return parseInt(oddDigits.join(''));\n}\n[/TYPESCRIPT]\n[JAVA]\npublic class Digits {\n    public static int digits(int n) {\n        List<Integer> oddDigits = new ArrayList<>();\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                oddDigits.add(digit);\n            }\n            n /= 10;\n        }\n        int result = 1;\n        for (int digit : oddDigits) {\n            result *= digit;\n        }\n        return result;\n    }\n}\n[/JAVA]\n[C#]\nusing System;\nusing System.Collections.Generic;\n\npublic class Digits\n{\n    public static int Digits(int n)\n    {\n        List<int> oddDigits = new List<int>();\n        while (n > 0)\n        {\n            int digit = n % 10;\n            if (digit % 2 == 1)\n            {\n                oddDigits.Add(digit);\n            }\n            n /= 10;\n        }\n        int result = 1;\n        foreach (int digit in oddDigits)\n        {\n            result *= digit;\n        }\n        return result;\n    }\n}\n[/C#]\n[PHP]\nfunction digits($n)\n{\n    $odd_digits = [];\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $odd_digits[] = $digit;\n        }\n        $n = (int) ($n / 10);\n    }\n    return array_product($odd_digits);\n}\n[/PHP]\n"}
{"result_5":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n# Test case 4:\nassert digits(123456789) == 123456789\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef digits(n):\n    result = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            result *= digit\n        n //= 10\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n# Test case 4:\nassert digits(987654321) == 1814400\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[JAVASCRIPT]\nfunction digits(n) {\n    let oddDigits = [];\n    while (n > 0) {\n        const digit = n % 10;\n        if (digit % 2 === 1) {\n            oddDigits.push(digit);\n        }\n        n = Math.floor(n / 10);\n    }\n    return parseInt(oddDigits.join(''));\n}\n[/JAVASCRIPT]\n[PHP]\nfunction digits($n)\n{\n    $odd_digits = [];\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $odd_digits[] = $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return array_product($odd_digits);\n}\n[/PHP]\n"}
{"result_8":"[PYTHON]\ndef digits(n):\n    odd_digits = []\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            odd_digits.append(digit)\n        n //= 10\n    return int(\"\".join(map(str, odd_digits)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n# Test case 4:\nassert digits(123456789) == 123456789\n# Test case 5:\nassert digits(0) == 0\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef digits(n):\n    if n < 0:\n        return 0\n    else:\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 1:\n                product *= digit\n            n //= 10\n        return product\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert digits(1) == 1\n# Test case 2:\nassert digits(4) == 0\n# Test case 3:\nassert digits(235) == 15\n[/TESTS]\n"}
