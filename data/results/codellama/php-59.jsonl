{"result_0":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) > 0 and stack[-1] == \"]\":\n            return True\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[-1] == \"[\":\n            stack.pop()\n    return False\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[[]]') == True\n# Test case 2:\nassert is_nested('[]]]]]]][[[[[]') == False\n# Test case 3:\nassert is_nested('[][]') == False\n# Test case 4:\nassert is_nested('[]') == False\n# Test case 5:\nassert is_nested('[[][]]') == True\n# Test case 6:\nassert is_nested('[[]][[') == True\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) > 0 and stack[-1] == \"]\":\n            return True\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[-1] == \"[\":\n            stack.pop()\n    return False\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[[]]') == True\n# Test case 2:\nassert is_nested('[]]]]]]][[[[[]') == False\n# Test case 3:\nassert is_nested('[][]') == False\n# Test case 4:\nassert is_nested('[]') == False\n# Test case 5:\nassert is_nested('[[][]]') == True\n# Test case 6:\nassert is_nested('[[]][[') == True\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) == 0:\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[len(stack)-1] == \"[\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('{}') == False\n# Test case 3:\nassert is_nested('()') == False\n# Test case 4:\nassert is_nested('[()]') == True\n# Test case 5:\nassert is_nested('[({})]') == True\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) == 0:\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[len(stack)-1] == \"[\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('{}') == False\n# Test case 3:\nassert is_nested('()') == False\n# Test case 4:\nassert is_nested('[[]]') == True\n# Test case 5:\nassert is_nested('[]]]]]]][[[[[]') == False\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) > 0 and stack[-1] == \"]\":\n            return True\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[-1] == \"[\":\n            stack.pop()\n    return False\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('{}') == False\n# Test case 3:\nassert is_nested('()') == False\n# Test case 4:\nassert is_nested('{[()]}') == True\n# Test case 5:\nassert is_nested('{([])}') == True\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) == 0:\n            stack.append(char)\n        elif char == \"[\" and len(stack) > 0:\n            stack.append(char)\n        elif char == \"]\" and len(stack) == 1:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('{}') == False\n# Test case 3:\nassert is_nested('()') == False\n# Test case 4:\nassert is_nested('[[]]') == True\n# Test case 5:\nassert is_nested('[]]]]]]][[[[[]') == False\n[/TESTS]\n# Test case 6:\nassert is_nested('[][]') == False\n# Test case 7:\nassert is_nested('[]') == False\n# Test case 8:\nassert is_nested('[[][]]') == True\n# Test case 9:\nassert is_nested('[[]][[') == True\n[/PYTHON]\n[JAVASCRIPT]\nfunction isNested(string) {\n    let stack = [];\n    for (let char of string) {\n        if (char === \"[\" && stack.length === 0) {\n            stack.push(char);\n        } else if (char === \"[\" && stack.length > 0) {\n            stack.push(char);\n        } else if (char === \"]\" && stack.length === 1) {\n            stack.pop();\n        } else {\n            return false;\n        }\n    }\n    return stack.length === 0;\n}\n[/JAVASCRIPT]\n"}
{"result_6":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) > 0 and stack[-1] == \"]\":\n            return True\n        elif char == \"[\":\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[-1] == \"[\":\n            stack.pop()\n    return False\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('[][]') == False\n# Test case 3:\nassert is_nested('[]()') == False\n# Test case 4:\nassert is_nested('(){}[]') == True\n# Test case 5:\nassert is_nested('([{}])') == True\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) == 0:\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[len(stack)-1] == \"[\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('{}') == False\n# Test case 3:\nassert is_nested('()') == False\n# Test case 4:\nassert is_nested('[[]]') == True\n# Test case 5:\nassert is_nested('[[[]]]') == True\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) == 0:\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[len(stack)-1] == \"[\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[]') == False\n# Test case 2:\nassert is_nested('{}') == False\n# Test case 3:\nassert is_nested('()') == False\n# Test case 4:\nassert is_nested('[{()}]') == True\n# Test case 5:\nassert is_nested('[[]]') == True\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == \"[\" and len(stack) == 0:\n            stack.append(char)\n        elif char == \"]\" and len(stack) > 0 and stack[len(stack)-1] == \"[\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_nested('[[]]') == True\n# Test case 2:\nassert is_nested('[]]]]]]][[[[[]') == False\n# Test case 3:\nassert is_nested('[][]') == False\n# Test case 4:\nassert is_nested('[]') == False\n# Test case 5:\nassert is_nested('[[][]]') == True\n# Test case 6:\nassert is_nested('[[]][[') == True\n[/TESTS]\n"}
