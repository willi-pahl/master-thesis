{"result_0":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer() and num < 0:\n            smallest = num if smallest is None else min(num, smallest)\n        elif num.is_integer() and num > 0:\n            largest = num if largest is None else max(num, largest)\n    return largest, smallest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largest_smallest_integers([]) == (None, None)\n# Test case 2:\nassert largest_smallest_integers([0]) == (None, None)\n# Test case 3:\nassert largest_smallest_integers([1, 2, 3, 4, 5]) == (None, 1)\n# Test case 4:\nassert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, None)\n# Test case 5:\nassert largest_smallest_integers([-1, -2, -3, -4, -5, 1, 2, 3]) == (-5, 1)\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer():\n            if smallest is None or num < smallest:\n                smallest = num\n            if largest is None or num > largest:\n                largest = num\n    return (largest, smallest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largest_smallest_integers([]) == (None, None)\n# Test case 2:\nassert largest_smallest_integers([0]) == (None, None)\n# Test case 3:\nassert largest_smallest_integers([1, 2, 3, 4, 5]) == (5, 1)\n# Test case 4:\nassert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-1, -5)\n# Test case 5:\nassert largest_smallest_integers([1.1, 2.2, 3.3, 4.4, 5.5]) == (None, None)\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num < 0:\n            smallest = num\n            break\n    for num in my_list:\n        if num > 0:\n            largest = num\n            break\n    return (smallest, largest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largestSmallestIntegers([]) == (None, None)\n# Test case 2:\nassert largestSmallestIntegers([0]) == (None, None)\n# Test case 3:\nassert largestSmallestIntegers([1, 2, 3, 4, 5]) == (None, 1)\n# Test case 4:\nassert largestSmallestIntegers([-1, -2, -3, -4, -5]) == (-5, None)\n# Test case 5:\nassert largestSmallestIntegers([-1, -2, -3, -4, 5]) == (-4, 5)\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer() and num < 0:\n            smallest = num if smallest is None else min(num, smallest)\n        elif num.is_integer() and num > 0:\n            largest = num if largest is None else max(num, largest)\n    return largest, smallest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largestSmallestIntegers([]) == (None, None)\n# Test case 2:\nassert largestSmallestIntegers([0]) == (None, None)\n# Test case 3:\nassert largestSmallestIntegers([1, 2, 3, 4, 5]) == (None, 1)\n# Test case 4:\nassert largestSmallestIntegers([-1, -2, -3, -4, -5]) == (-5, None)\n# Test case 5:\nassert largestSmallestIntegers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]) == (-5, 0)\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer():\n            if smallest is None or num < smallest:\n                smallest = num\n            if largest is None or num > largest:\n                largest = num\n    return (largest, smallest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# Test case 2:\nassert largest_smallest_integers([]) == (None, None)\n# Test case 3:\nassert largest_smallest_integers([0]) == (None, None)\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer():\n            if smallest is None or num < smallest:\n                smallest = num\n            if largest is None or num > largest:\n                largest = num\n    return (largest, smallest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# Test case 2:\nassert largest_smallest_integers([]) == (None, None)\n# Test case 3:\nassert largest_smallest_integers([0]) == (None, None)\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num < 0:\n            smallest = num\n            break\n    for num in my_list:\n        if num > 0:\n            largest = num\n            break\n    return (smallest, largest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largest_smallest_integers([]) == (None, None)\n# Test case 2:\nassert largest_smallest_integers([1]) == (None, None)\n# Test case 3:\nassert largest_smallest_integers([-1]) == (-1, None)\n# Test case 4:\nassert largest_smallest_integers([1, -1]) == (-1, 1)\n# Test case 5:\nassert largest_smallest_integers([-1, 0, 1]) == (-1, 1)\n# Test case 6:\nassert largest_smallest_integers([-1, 1, 2, 3, 4, 5]) == (-1, 1)\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer() and num > 0 and (smallest is None or num < smallest):\n            smallest = num\n        elif num.is_integer() and num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest, smallest\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (None, 1)\n# Test case 2:\nassert largestSmallestIntegers([]) == (None, None)\n# Test case 3:\nassert largestSmallestIntegers([0]) == (None, None)\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num < 0:\n            smallest = num\n            break\n    for num in my_list:\n        if num > 0:\n            largest = num\n            break\n    return (smallest, largest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largestSmallestIntegers([]) == (None, None)\n# Test case 2:\nassert largestSmallestIntegers([0]) == (None, None)\n# Test case 3:\nassert largestSmallestIntegers([1, 2, 3, 4, 5]) == (None, 1)\n# Test case 4:\nassert largestSmallestIntegers([-1, -2, -3, -4, -5]) == (-5, None)\n# Test case 5:\nassert largestSmallestIntegers([-1, -2, -3, 4, -5]) == (-5, 4)\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef largest_smallest_integers(my_list):\n    smallest = None\n    largest = None\n    for num in my_list:\n        if num.is_integer() and num < 0:\n            if smallest is None or num < smallest:\n                smallest = num\n        elif num.is_integer() and num >= 0:\n            if largest is None or num > largest:\n                largest = num\n    return (largest, smallest)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert largest_smallest_integers([]) == (None, None)\n# Test case 2:\nassert largest_smallest_integers([0]) == (None, None)\n# Test case 3:\nassert largest_smallest_integers([1, 2, 3, 4, 5]) == (None, 1)\n# Test case 4:\nassert largest_smallest_integers([-1, -2, -3, -4, -5]) == (-5, None)\n# Test case 5:\nassert largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]) == (-5, 0)\n[/TESTS]\n"}
