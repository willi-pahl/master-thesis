{"result_0":"[PYTHON]\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n[/PYTHON]\n[JAVASCRIPT]\nfunction specialFactorial(n) {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * specialFactorial(n-1);\n    }\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction specialFactorial(n: number): number {\n    if (n === 0) {\n        return 1;\n    } else {\n        return n * specialFactorial(n-1);\n    }\n}\n[/TYPESCRIPT]\n[SWIFT]\nfunc specialFactorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * specialFactorial(n-1)\n    }\n}\n[/SWIFT]\n[JULIA]\nfunction special_factorial(n::Int)::Int\n    if n == 0\n        return 1\n    else\n        return n * special_factorial(n-1)\n    end\nend\n[/JULIA]\n"}
{"result_1":"[PYTHON]\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(0) == 1\n# Test case 2:\nassert special_factorial(1) == 1\n# Test case 3:\nassert special_factorial(2) == 2\n# Test case 4:\nassert special_factorial(3) == 6\n# Test case 5:\nassert special_factorial(4) == 24\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(1) == 1\n# Test case 2:\nassert special_factorial(2) == 2\n# Test case 3:\nassert special_factorial(3) == 6\n# Test case 4:\nassert special_factorial(4) == 24\n# Test case 5:\nassert special_factorial(5) == 120\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(0) == 1\n# Test case 2:\nassert special_factorial(1) == 1\n# Test case 3:\nassert special_factorial(2) == 2\n# Test case 4:\nassert special_factorial(3) == 6\n# Test case 5:\nassert special_factorial(4) == 24\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(1) == 1\n# Test case 2:\nassert special_factorial(2) == 2\n# Test case 3:\nassert special_factorial(3) == 6\n# Test case 4:\nassert special_factorial(4) == 24\n# Test case 5:\nassert special_factorial(5) == 120\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(1) == 1\n# Test case 2:\nassert special_factorial(2) == 2\n# Test case 3:\nassert special_factorial(3) == 6\n# Test case 4:\nassert special_factorial(4) == 24\n# Test case 5:\nassert special_factorial(5) == 120\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(4) == 288\n# Test case 2:\nassert special_factorial(5) == 1200\n# Test case 3:\nassert special_factorial(6) == 7200\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(0) == 1\n# Test case 2:\nassert special_factorial(1) == 1\n# Test case 3:\nassert special_factorial(2) == 2\n# Test case 4:\nassert special_factorial(3) == 6\n# Test case 5:\nassert special_factorial(4) == 24\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= i\n    return result\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(4) == 288\n# Test case 2:\nassert special_factorial(5) == 1200\n# Test case 3:\nassert special_factorial(6) == 7200\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert special_factorial(0) == 1\n# Test case 2:\nassert special_factorial(1) == 1\n# Test case 3:\nassert special_factorial(2) == 2\n# Test case 4:\nassert special_factorial(3) == 6\n# Test case 5:\nassert special_factorial(4) == 24\n[/TESTS]\n"}
