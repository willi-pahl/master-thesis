{"result_0":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction belowZero(operations: number[]): boolean {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/TYPESCRIPT]\n[SWIFT]\nfunc belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n[/SWIFT]\n[JULIA]\nfunction below_zero(operations)\n    balance = 0\n    for operation in operations\n        balance += operation\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n[/JULIA]\n"}
{"result_1":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n[PHP]\nfunction belowZero($operations)\n{\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/PHP]\n"}
{"result_2":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n"}
{"result_3":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVA]\npublic class BelowZero {\n    public static boolean belowZero(int[] operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n[/JAVA]\n[C#]\nusing System;\n\npublic static class BelowZero\n{\n    public static bool BelowZero(int[] operations)\n    {\n        int balance = 0;\n        foreach (var operation in operations)\n        {\n            balance += operation;\n            if (balance < 0)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n[/C#]\n[PHP]\nfunction belowZero(array $operations)\n{\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/PHP]\n"}
{"result_4":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVA]\npublic class BelowZero {\n    public static boolean belowZero(int[] operations) {\n        int balance = 0;\n        for (int operation : operations) {\n            balance += operation;\n            if (balance < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n[/JAVA]\n[JavaScript]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (let operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JavaScript]\n"}
{"result_5":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction belowZero(operations: number[]): boolean {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/TYPESCRIPT]\n[JAVA]\nboolean belowZero(int[] operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVA]\n[C#]\nbool BelowZero(int[] operations) {\n    int balance = 0;\n    foreach (var operation in operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/C#]\n[SWIFT]\nfunc belowZero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n[/SWIFT]\n[SCALA]\ndef belowZero(operations: List[Int]): Boolean = {\n    var balance = 0\n    for (operation <- operations) {\n        balance += operation\n        if (balance < 0) return true\n    }\n    false\n}\n[/SCALA]\n[BASH]\nbelow_zero () {\n    local balance=0\n    for operation in \"$@\"; do\n        balance=$((balance+operation))\n        if (( balance < 0 )); then\n            return 0\n        fi\n    done\n    return 1\n}\n[/BASH]\n[PERL]\nsub below_zero {\n    my $operations = shift;\n    my $balance = 0;\n    foreach my $operation (@$operations) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n[/PERL]\n[PHP]\nfunction belowZero(array $operations): bool {\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/PHP]\n"}
{"result_6":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction belowZero(operations: number[]): boolean {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/TYPESCRIPT]\n[HTML]\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Below Zero</title>\n  </head>\n  <body>\n    <h1>Below Zero</h1>\n    <form>\n      <label for=\"operations\">Operations:</label>\n      <input type=\"text\" id=\"operations\" name=\"operations\"><br><br>\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n    <p id=\"answer\"></p>\n  </body>\n</html>\n[/HTML]\n[PHP]\n<?php\n\nfunction belowZero($operations) {\n    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n$operations = [1, 2, -4, 5];\n$result = belowZero($operations);\necho $result;\n[/PHP]\n"}
{"result_7":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert below_zero([1, 2, 3]) == False\n# Test case 2:\nassert below_zero([1, 2, -4, 5]) == True\n# Test case 3:\nassert below_zero([1, 2, -4, -5]) == True\n# Test case 4:\nassert below_zero([1, 2, 3, -5]) == False\n# Test case 5:\nassert below_zero([1, 2, 3, 0]) == False\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n        else:\n            balance -= operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        if (operation > 0) {\n            balance += operation;\n        } else {\n            balance -= operation;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction belowZero(operations: number[]): boolean {\n    let balance = 0;\n    for (const operation of operations) {\n        if (operation > 0) {\n            balance += operation;\n        } else {\n            balance -= operation;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/TYPESCRIPT]\n[JULIA]\nfunction belowZero(operations::Array{Int})::Bool\n    balance = 0\n    for operation in operations\n        if operation > 0\n            balance += operation\n        else\n            balance -= operation\n        end\n        if balance < 0\n            return true\n        end\n    end\n    return false\nend\n[/JULIA]\n[RUBY]\ndef belowZero(operations)\n  balance = 0\n  operations.each do |operation|\n    if operation > 0\n      balance += operation\n    else\n      balance -= operation\n    end\n    return true if balance < 0\n  end\n  false\nend\n[/RUBY]\n[SWIFT]\nfunc belowZero(_ operations: [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n        if operation > 0 {\n            balance += operation\n        } else {\n            balance -= operation\n        }\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n[/SWIFT]\n[SCALA]\ndef belowZero(operations: List[Int]): Boolean = {\n    var balance = 0\n    for (operation <- operations) {\n        if (operation > 0) {\n            balance += operation\n        } else {\n            balance -= operation\n        }\n        if (balance < 0) {\n            return true\n        }\n    }\n    false\n}\n[/SCALA]\n[BASH]\nbelow_zero () {\n    local balance=0\n    for op in \"$@\"; do\n        if [ $op -gt 0 ]; then\n            ((balance+=op))\n        else\n            ((balance-=op))\n        fi\n        if [ $balance -lt 0 ]; then\n            return 0\n        fi\n    done\n    return 1\n}\n[/BASH]\n[KOTLIN]\nfun belowZero(operations: List<Int>): Boolean {\n    var balance = 0\n    for (operation in operations) {\n        if (operation > 0) {\n            balance += operation\n        } else {\n            balance -= operation\n        }\n        if (balance < 0) {\n            return true\n        }\n    }\n    return false\n}\n[/KOTLIN]\n"}
{"result_9":"[PYTHON]\ndef below_zero(operations):\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n[/PYTHON]\n[JAVASCRIPT]\nfunction belowZero(operations) {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction belowZero(operations: number[]): boolean {\n    let balance = 0;\n    for (const operation of operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/TYPESCRIPT]\n[JAVA]\nboolean belowZero(int[] operations) {\n    int balance = 0;\n    for (int operation : operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/JAVA]\n[C#]\nbool BelowZero(int[] operations) {\n    int balance = 0;\n    foreach (var operation in operations) {\n        balance += operation;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n[/C#]\n[SWIFT]\nfunc belowZero(operations: [Int]) -> Bool {\n    var balance = 0\n    for operation in operations {\n        balance += operation\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}\n[/SWIFT]\n[SCALA]\ndef belowZero(operations: List[Int]): Boolean = {\n    var balance = 0\n    for (operation <- operations) {\n        balance += operation\n        if (balance < 0) return true\n    }\n    false\n}\n[/SCALA]\n[BASH]\nbelow_zero () {\n    local balance=0\n    for operation in \"$@\"; do\n        (( balance += $operation ))\n        if (( balance < 0 )); then\n            return 0\n        fi\n    done\n    return 1\n}\n[/BASH]\n[SQL]\n-- Below Zero --\n-- Find out whether the account balance ever goes below zero.\n-- Input: A list of transactions (deposits and withdrawals).\n-- Output: True if the balance ever went below zero, false otherwise.\n\nWITH balances AS (\n  SELECT\n    t1.*,\n    SUM(t1.amount) OVER (ORDER BY t1.date) AS balance\n  FROM transactions t1\n),\nbelow_zero AS (\n  SELECT * FROM balances WHERE balance < 0\n)\nSELECT EXISTS (SELECT 1 FROM below_zero);\n[/SQL]\n"}
