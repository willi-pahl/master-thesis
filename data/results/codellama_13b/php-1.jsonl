{"result_0":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda a, b: a * b, numbers))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, -4]) == (-1, 24)\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n[/PYTHON]\n[JAVA]\npublic class SumProduct {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4};\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        System.out.println(\"Sum: \" + sum);\n        System.out.println(\"Product: \" + product);\n    }\n}\n[/JAVA]\n[CSHARP]\nusing System;\nusing System.Linq;\n\npublic class SumProduct {\n    public static void Main(string[] args) {\n        int[] numbers = {1, 2, 3, 4};\n        var sum = numbers.Sum();\n        var product = numbers.Aggregate((x, y) => x * y);\n        Console.WriteLine(\"Sum: \" + sum);\n        Console.WriteLine(\"Product: \" + product);\n    }\n}\n[/CSHARP]\n"}
{"result_4":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda a, b: a * b, numbers)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda a, b: a * b, numbers))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), functools.reduce(lambda a, b: a * b, numbers)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef sum_product(numbers):\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert sum_product([]) == (0, 1)\n# Test case 2:\nassert sum_product([1, 2, 3, 4]) == (10, 24)\n# Test case 3:\nassert sum_product([1, 2, 3, 4, 5]) == (15, 120)\n[/TESTS]\n"}
