{"result_0":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n# Test case 3:\nassert median([1, 2, 3, 4, 5]) == 3\n# Test case 4:\nassert median([-10, -5, 0, 5, 10]) == 2.5\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n# Test case 3:\nassert median([1, 2, 3, 4, 5]) == 3\n# Test case 4:\nassert median([-10, -5, 0, 5, 10]) == 2.5\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n# Test case 3:\nassert median([]) == None\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n# Test case 3:\nassert median([1, 2, 3, 4, 5]) == 3\n# Test case 4:\nassert median([-10, -5, 0, 5, 10]) == 2.5\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n[/TESTS]\n"}
{"result_7":"```\n<?php\nfunction median($l) {\n    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[floor($n / 2)];\n    }\n}\n```\nThis function sorts the input array, calculates the number of elements, and then checks if it's an even or odd number. If it's even, it returns the average of the middle two elements. If it's odd, it returns the middle element itself."}
{"result_8":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n# Test case 3:\nassert median([1, 2, 3, 4, 5]) == 3\n# Test case 4:\nassert median([-10, -5, 0, 5, 10]) == 2.5\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef median(my_list):\n    my_list = sorted(my_list)\n    if len(my_list) % 2 == 0:\n        median = (my_list[len(my_list) // 2] + my_list[len(my_list) // 2 - 1]) / 2\n    else:\n        median = my_list[len(my_list) // 2]\n    return median\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert median([3, 1, 2, 4, 5]) == 3\n# Test case 2:\nassert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n# Test case 3:\nassert median([1, 2, 3, 4, 5]) == 3\n# Test case 4:\nassert median([-5, -4, -3, -2, -1]) == -3\n[/TESTS]\n"}
