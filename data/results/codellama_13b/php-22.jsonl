{"result_0":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\n# Test case 2:\nassert common_elements([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4]\n# Test case 3:\nassert common_elements([1, 2, 3, 4], [5, 6, 7, 8]) == []\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4]\n# Test case 2:\nassert common_elements([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4]\n# Test case 3:\nassert common_elements([1, 2, 3, 4], [5, 6, 7, 8]) == []\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1).intersection(set(list2)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1).intersection(set(list2)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef common(list1, list2):\n    return list(set(list1).intersection(set(list2)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1).intersection(set(list2)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common([5, 3, 2, 8], [3, 2]) == [2, 3]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert common_elements([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n# Test case 2:\nassert common_elements([5, 3, 2, 8], [3, 2]) == [2, 3]\n# Test case 3:\nassert common_elements([1, 2, 3], [4, 5, 6]) == []\n[/TESTS]\n"}
