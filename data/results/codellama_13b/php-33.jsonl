{"result_0":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_happy(\"abc\") == True\n# Test case 2:\nassert is_happy(\"abcd\") == True\n# Test case 3:\nassert is_happy(\"aabbccddeeff\") == True\n# Test case 4:\nassert is_happy(\"aabbccddeeffgghhii\") == True\n# Test case 5:\nassert is_happy(\"abcdefghijklmnopqrstuvwxyz\") == True\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_happy(\"\") == False\n# Test case 2:\nassert is_happy(\"a\") == False\n# Test case 3:\nassert is_happy(\"aa\") == False\n# Test case 4:\nassert is_happy(\"abcd\") == True\n# Test case 5:\nassert is_happy(\"aabb\") == False\n# Test case 6:\nassert is_happy(\"adb\") == True\n# Test case 7:\nassert is_happy(\"xyy\") == False\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_happy(\"abc\") == True\n# Test case 2:\nassert is_happy(\"abcd\") == True\n# Test case 3:\nassert is_happy(\"aabbccddeeff\") == True\n# Test case 4:\nassert is_happy(\"aabbccddeeffgg\") == True\n# Test case 5:\nassert is_happy(\"aabbccddeeffgghh\") == True\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_happy(\"abc\") == True\n# Test case 2:\nassert is_happy(\"abcd\") == True\n# Test case 3:\nassert is_happy(\"aabbccddeeff\") == True\n# Test case 4:\nassert is_happy(\"aabbccddeeffgghhii\") == False\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[JAVASCRIPT]\nfunction isHappy(s) {\n // Check if the string length is at least 3\n if (s.length < 3) return false;\n \n // Split the string into groups of 3 characters\n const groups = s.match(/.{1,3}/g);\n \n // Check if all groups are unique\n return [...new Set(groups)].length === groups.length;\n}\n[/JAVASCRIPT]\n"}
{"result_5":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[JAVASCRIPT]\nfunction isHappy(s) {\n  if (s.length < 3) {\n    return false;\n  }\n\n  const groups = s.match(/.{1,3}/g);\n  return new Set(groups).size === groups.length;\n}\n[/JAVASCRIPT]\n"}
{"result_6":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_happy(\"abc\") == True\n# Test case 2:\nassert is_happy(\"abca\") == False\n# Test case 3:\nassert is_happy(\"abcd\") == True\n# Test case 4:\nassert is_happy(\"aabbccddeeff\") == True\n# Test case 5:\nassert is_happy(\"aabbccddeeffg\") == False\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[JAVASCRIPT]\nfunction isHappy(s) {\n // Check if the string length is at least 3\n if (s.length < 3) return false;\n // Check if each group of 3 consecutive characters is different\n const groups = s.match(/.{1,3}/g);\n return new Set(groups).size === groups.length;\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction isHappy(s: string): boolean {\n  // Check if the string length is at least 3\n  if (s.length < 3) return false;\n  // Check if each group of 3 consecutive characters is different\n  const groups = s.match(/.{1,3}/g);\n  return new Set(groups).size === groups.length;\n}\n[/TYPESCRIPT]\n[COFFEESCRIPT]\nisHappy = (s) ->\n  # Check if the string length is at least 3\n  return false if s.length < 3\n  # Check if each group of 3 consecutive characters is different\n  groups = s.match /.{1,3}/g\n  return new Set(groups).size == groups.length\n[/COFFEESCRIPT]\n[JULIA]\nfunction is_happy(s)\n    if length(s) < 3\n        return false\n    \n    groups = [s[i:i+3] for i in range(length(s)-2)]\n    return length(unique(groups)) == length(groups)\nend\n[/JULIA]\n"}
{"result_8":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[JAVASCRIPT]\nfunction isHappy(s) {\n // Check if the string length is at least 3\n if (s.length < 3) return false;\n\n // Split the string into groups of 3 characters\n const groups = s.match(/.{1,3}/g);\n\n // Check if all groups are unique\n return [...new Set(groups)].length === groups.length;\n}\n[/JAVASCRIPT]\n"}
{"result_9":"[PYTHON]\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    groups = [s[i:i+3] for i in range(len(s)-2)]\n    return len(set(groups)) == len(groups)\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert is_happy(\"a\") == False\n# Test case 2:\nassert is_happy(\"aa\") == False\n# Test case 3:\nassert is_happy(\"abcd\") == True\n# Test case 4:\nassert is_happy(\"aabb\") == False\n# Test case 5:\nassert is_happy(\"adb\") == True\n# Test case 6:\nassert is_happy(\"xyy\") == False\n[/TESTS]\n"}
