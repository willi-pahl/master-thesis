{"result_0":"[PYTHON]\ndef numerical_letter_grade(gpas):\n    # Create a dictionary to map GPAs to letter grades\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+',\n                 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C',\n                 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-',\n                 0.0: 'E'}\n\n    # Iterate through the list of GPAs and convert them to letter grades\n    letter_grades = []\n    for gpa in gpas:\n        letter_grades.append(grade_map[gpa])\n\n    return letter_grades\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n# Test case 2:\nassert numerical_letter_grade([3.6, 3.9, 3.8, 3.7, 3.0]) == ['A', 'A+', 'A+', 'A', 'C-']\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef numerical_letter_grade(gpa_list):\n    grade_map = {\n        (4.0, 'A+'): 4.0,\n        (3.7, 'A'): 3.7,\n        (3.3, 'A-'): 3.3,\n        (3.0, 'B+'): 3.0,\n        (2.7, 'B'): 2.7,\n        (2.3, 'B-'): 2.3,\n        (2.0, 'C+'): 2.0,\n        (1.7, 'C'): 1.7,\n        (1.3, 'C-'): 1.3,\n        (1.0, 'D+'): 1.0,\n        (0.7, 'D'): 0.7,\n        (0.0, 'D-'): 0.0,\n        (0.0, 'E'): 0.0\n    }\n    return [grade_map[gpa] for gpa in gpa_list]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([4.0]) == ['A+']\n# Test case 2:\nassert numerical_letter_grade([3.0]) == ['B+']\n# Test case 3:\nassert numerical_letter_grade([2.5]) == ['B']\n# Test case 4:\nassert numerical_letter_grade([1.5]) == ['C-']\n# Test case 5:\nassert numerical_letter_grade([0.5]) == ['D-']\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef numerical_letter_grade(gpa):\n    if gpa >= 4.0:\n        return 'A+'\n    elif gpa > 3.7:\n        return 'A'\n    elif gpa > 3.3:\n        return 'A-'\n    elif gpa > 3.0:\n        return 'B+'\n    elif gpa > 2.7:\n        return 'B'\n    elif gpa > 2.3:\n        return 'B-'\n    elif gpa > 2.0:\n        return 'C+'\n    elif gpa > 1.7:\n        return 'C'\n    elif gpa > 1.3:\n        return 'C-'\n    elif gpa > 1.0:\n        return 'D+'\n    elif gpa > 0.7:\n        return 'D'\n    elif gpa > 0.0:\n        return 'D-'\n    else:\n        return 'E'\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade(4.0) == 'A+'\n# Test case 2:\nassert numerical_letter_grade(3.9) == 'A'\n# Test case 3:\nassert numerical_letter_grade(3.2) == 'A-'\n# Test case 4:\nassert numerical_letter_grade(3.0) == 'B+'\n# Test case 5:\nassert numerical_letter_grade(2.9) == 'B'\n# Test case 6:\nassert numerical_letter_grade(2.2) == 'B-'\n# Test case 7:\nassert numerical_letter_grade(2.0) == 'C+'\n# Test case 8:\nassert numerical_letter_grade(1.9) == 'C'\n# Test case 9:\nassert numerical_letter_grade(1.2) == 'C-'\n# Test case 10:\nassert numerical_letter_grade(1.0) == 'D+'\n# Test case 11:\nassert numerical_letter_grade(0.9) == 'D'\n# Test case 12:\nassert numerical_letter_grade(0.2) == 'D-'\n# Test case 13:\nassert numerical_letter_grade(0.0) == 'E'\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef numerical_letter_grade(gpa):\n    if gpa >= 4.0:\n        return \"A+\"\n    elif gpa > 3.7:\n        return \"A\"\n    elif gpa > 3.3:\n        return \"A-\"\n    elif gpa > 3.0:\n        return \"B+\"\n    elif gpa > 2.7:\n        return \"B\"\n    elif gpa > 2.3:\n        return \"B-\"\n    elif gpa > 2.0:\n        return \"C+\"\n    elif gpa > 1.7:\n        return \"C\"\n    elif gpa > 1.3:\n        return \"C-\"\n    elif gpa > 1.0:\n        return \"D+\"\n    elif gpa > 0.7:\n        return \"D\"\n    elif gpa > 0.0:\n        return \"D-\"\n    else:\n        return \"E\"\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade(4.0) == \"A+\"\n# Test case 2:\nassert numerical_letter_grade(3.9) == \"A\"\n# Test case 3:\nassert numerical_letter_grade(3.2) == \"A-\"\n# Test case 4:\nassert numerical_letter_grade(3.0) == \"B+\"\n# Test case 5:\nassert numerical_letter_grade(2.9) == \"B\"\n# Test case 6:\nassert numerical_letter_grade(2.2) == \"B-\"\n# Test case 7:\nassert numerical_letter_grade(2.0) == \"C+\"\n# Test case 8:\nassert numerical_letter_grade(1.9) == \"C\"\n# Test case 9:\nassert numerical_letter_grade(1.2) == \"C-\"\n# Test case 10:\nassert numerical_letter_grade(1.0) == \"D+\"\n# Test case 11:\nassert numerical_letter_grade(0.9) == \"D\"\n# Test case 12:\nassert numerical_letter_grade(0.2) == \"D-\"\n# Test case 13:\nassert numerical_letter_grade(0.0) == \"E\"\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef numerical_letter_grade(gpa_list):\n    grade_mapping = {\n        (4.0, 'A+'): 1,\n        (3.7, 'A'): 2,\n        (3.3, 'A-'): 3,\n        (3.0, 'B+'): 4,\n        (2.7, 'B'): 5,\n        (2.3, 'B-'): 6,\n        (2.0, 'C+'): 7,\n        (1.7, 'C'): 8,\n        (1.3, 'C-'): 9,\n        (1.0, 'D+'): 10,\n        (0.7, 'D'): 11,\n        (0.0, 'D-'): 12,\n        (0.0, 'E'): 13\n    }\n    return [grade_mapping[gpa] for gpa in gpa_list]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([4.0]) == ['A+']\n# Test case 2:\nassert numerical_letter_grade([3.9]) == ['A']\n# Test case 3:\nassert numerical_letter_grade([3.3]) == ['A-']\n# Test case 4:\nassert numerical_letter_grade([3.0]) == ['B+']\n# Test case 5:\nassert numerical_letter_grade([2.9]) == ['B']\n# Test case 6:\nassert numerical_letter_grade([2.2]) == ['B-']\n# Test case 7:\nassert numerical_letter_grade([2.0]) == ['C+']\n# Test case 8:\nassert numerical_letter_grade([1.9]) == ['C']\n# Test case 9:\nassert numerical_letter_grade([1.4]) == ['C-']\n# Test case 10:\nassert numerical_letter_grade([1.0]) == ['D+']\n# Test case 11:\nassert numerical_letter_grade([0.8]) == ['D']\n# Test case 12:\nassert numerical_letter_grade([0.3]) == ['D-']\n# Test case 13:\nassert numerical_letter_grade([0.0]) == ['E']\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef numerical_letter_grade(gpa_list):\n    grade_map = {\n       4.0: \"A+\",\n       3.7: \"A\",\n       3.3: \"A-\",\n       3.0: \"B+\",\n       2.7: \"B\",\n       2.3: \"B-\",\n       2.0: \"C+\",\n       1.7: \"C\",\n       1.3: \"C-\",\n       1.0: \"D+\",\n       0.7: \"D\",\n       0.0: \"D-\",\n       -1: \"E\"\n    }\n    return [grade_map[gpa] for gpa in gpa_list]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n# Test case 2:\nassert numerical_letter_grade([3.8, 3.9, 3.7, 3.0, 2.9]) == ['A', 'A+', 'A-', 'B+', 'B']\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef numerical_letter_grade(gpa):\n    if gpa >= 4.0:\n        return \"A+\"\n    elif gpa > 3.7:\n        return \"A\"\n    elif gpa > 3.3:\n        return \"A-\"\n    elif gpa > 3.0:\n        return \"B+\"\n    elif gpa > 2.7:\n        return \"B\"\n    elif gpa > 2.3:\n        return \"B-\"\n    elif gpa > 2.0:\n        return \"C+\"\n    elif gpa > 1.7:\n        return \"C\"\n    elif gpa > 1.3:\n        return \"C-\"\n    elif gpa > 1.0:\n        return \"D+\"\n    elif gpa > 0.7:\n        return \"D\"\n    elif gpa > 0.0:\n        return \"D-\"\n    else:\n        return \"E\"\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade(4.0) == \"A+\"\n# Test case 2:\nassert numerical_letter_grade(3.9) == \"A\"\n# Test case 3:\nassert numerical_letter_grade(3.0) == \"B+\"\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef numerical_letter_grade(gpa_list):\n    grade_map = {\n       4.0: \"A+\",\n       3.7: \"A\",\n       3.3: \"A-\",\n       3.0: \"B+\",\n       2.7: \"B\",\n       2.3: \"B-\",\n       2.0: \"C+\",\n       1.7: \"C\",\n       1.3: \"C-\",\n       1.0: \"D+\",\n       0.7: \"D\",\n       0.0: \"D-\",\n       -1.0: \"E\"\n    }\n    return [grade_map[gpa] for gpa in gpa_list]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n# Test case 2:\nassert numerical_letter_grade([3.8, 3.4, 3, 2.6, 1.9]) == ['A', 'A-', 'B+', 'B-', 'C+']\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef numerical_letter_grade(gpa_list):\n    # Create a dictionary to map GPA ranges to letter grades\n    gpa_range_to_letter_grade = {\n        (4.0, 4.0): \"A+\",\n        (3.7, 4.0): \"A\",\n        (3.3, 3.7): \"A-\",\n        (3.0, 3.3): \"B+\",\n        (2.7, 3.0): \"B\",\n        (2.3, 2.7): \"B-\",\n        (2.0, 2.3): \"C+\",\n        (1.7, 2.0): \"C\",\n        (1.3, 1.7): \"C-\",\n        (1.0, 1.3): \"D+\",\n        (0.7, 1.0): \"D\",\n        (0.0, 0.7): \"D-\",\n        (0.0, 0.0): \"E\",\n    }\n\n    # Iterate through the input list and find the corresponding letter grade for each GPA\n    letter_grade_list = []\n    for gpa in gpa_list:\n        for (lower_bound, upper_bound), letter_grade in gpa_range_to_letter_grade.items():\n            if lower_bound <= gpa <= upper_bound:\n                letter_grade_list.append(letter_grade)\n                break\n\n    return letter_grade_list\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([]) == []\n# Test case 2:\nassert numerical_letter_grade([4.0]) == [\"A+\"]\n# Test case 3:\nassert numerical_letter_grade([3.9, 3.8, 3.7, 3.6]) == [\"A\", \"A\", \"A-\", \"B+\"]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef numerical_letter_grade(gpa_list):\n    grade_map = {\n       4.0: 'A+',\n       3.7: 'A',\n       3.3: 'A-',\n       3.0: 'B+',\n       2.7: 'B',\n       2.3: 'B-',\n       2.0: 'C+',\n       1.7: 'C',\n       1.3: 'C-',\n       1.0: 'D+',\n       0.7: 'D',\n       0.0: 'D-',\n       -1: 'E'\n    }\n    return [grade_map[gpa] for gpa in gpa_list]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert numerical_letter_grade([]) == []\n# Test case 2:\nassert numerical_letter_grade([4]) == ['A+']\n# Test case 3:\nassert numerical_letter_grade([3.9, 3.8, 3.7, 3.6, 3.5]) == ['A', 'A-', 'B+', 'B', 'B-']\n[/TESTS]\n"}
