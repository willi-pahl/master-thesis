{"result_0":"[PYTHON]\ndef closest_integer(num):\n    \"\"\"\n    This function returns the closest integer to the input decimal number.\n    If the input number is equidistant from two integers, it returns the integer that is farthest from zero.\n    :param num: The input decimal number\n    :return: The closest integer\n    \"\"\"\n    return round(num)\n[/PYTHON]\n[JAVA]\npublic class ClosestInteger {\n	\n	public static int closestInt(double num) {\n	    \n	    // Check if the number is already an integer\n	    if(num == (int)num) {\n	        return (int)num;\n	    }\n	    \n	    // Round the number to the nearest integer and return it\n	    return Math.round(num);\n	}\n}\n[/JAVA]\n[CSHARP]\npublic static class ClosestInteger\n{\n    public static int ClosestInt(double num)\n    {\n        // Check if the number is already an integer\n        if (num % 1 == 0)\n        {\n            return (int)num;\n        }\n\n        // Round the number to the nearest integer and return it\n        return Math.Round(num);\n    }\n}\n[/CSHARP]\n[PHP]\n<?php\nfunction closest_integer($number)\n{\n    // Check if the number is already an integer\n    if (is_int($number)) {\n        return $number;\n    }\n    \n    // Round the number to the nearest integer and return it\n    return round($number);\n}\n?>\n[/PHP]\n"}
{"result_1":"[PYTHON]\ndef closest_integer(num):\n    \"\"\"\n    This function takes a string value representing a number and returns the closest integer value.\n    If the number is equidistant from two integers, it rounds away from zero.\n    \"\"\"\n    return int(round(float(num), 0))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"10\") == 10\n# Test case 2:\nassert closest_integer(\"15.3\") == 15\n# Test case 3:\nassert closest_integer(\"14.5\") == 15\n# Test case 4:\nassert closest_integer(\"-14.5\") == -15\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef closest_integer(my_number):\n    \"\"\"\n    This function takes a string representation of a number and returns the closest integer.\n    If the number is equidistant from two integers, it will round away from zero.\n    \"\"\"\n    return round(float(my_number))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"10\") == 10\n# Test case 2:\nassert closest_integer(\"15.3\") == 15\n# Test case 3:\nassert closest_integer(\"14.5\") == 15\n# Test case 4:\nassert closest_integer(\"-14.5\") == -15\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef closest_integer(my_number):\n    return round(float(my_number))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"3.14\") == 3\n# Test case 2:\nassert closest_integer(\"5.0\") == 5\n# Test case 3:\nassert closest_integer(\"19.9\") == 20\n# Test case 4:\nassert closest_integer(\"10.5\") == 11\n# Test case 5:\nassert closest_integer(\"-10.5\") == -11\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef closest_integer(num):\n    \"\"\"\n    This function takes a string value representing a number and returns the closest integer.\n    If the number is equidistant from two integers, it rounds away from zero.\n    \"\"\"\n    return round(float(num))\n[/PYTHON]\n[JAVASCRIPT]\nfunction closestInteger(num) {\n    // Convert the number to a floating point number\n    const floatNum = parseFloat(num);\n    \n    // Round the number to the nearest integer using the built-in Math.round() method\n    const roundedNum = Math.round(floatNum);\n    \n    // Return the rounded number as a string\n    return roundedNum.toString();\n}\n[/JAVASCRIPT]\n[TYPESCRIPT]\nfunction closestInteger(num: string): string {\n  // Convert the number to a floating point number\n  const floatNum = parseFloat(num);\n\n  // Round the number to the nearest integer using the built-in Math.round() method\n  const roundedNum = Math.round(floatNum);\n\n  // Return the rounded number as a string\n  return roundedNum.toString();\n}\n[/TYPESCRIPT]\n[JAVA]\npublic class ClosestInteger {\n    public static String closestInteger(String num) {\n        // Convert the number to a floating point number\n        double floatNum = Double.parseDouble(num);\n        \n        // Round the number to the nearest integer using the built-in Math.round() method\n        long roundedNum = Math.round(floatNum);\n        \n        // Return the rounded number as a string\n        return Long.toString(roundedNum);\n    }\n}\n[/JAVA]\n"}
{"result_5":"[PYTHON]\ndef closest_integer(my_number):\n    \"\"\"\n    This function takes a string representation of a number and returns the closest integer.\n    If the number is equidistant from two integers, it will round away from zero.\n    \"\"\"\n    return round(float(my_number))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"10\") == 10\n# Test case 2:\nassert closest_integer(\"15.3\") == 15\n# Test case 3:\nassert closest_integer(\"14.5\") == 15\n# Test case 4:\nassert closest_integer(\"-14.5\") == -15\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef closest_integer(num):\n    return round(float(num))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"3.14\") == 3\n# Test case 2:\nassert closest_integer(\"5.0\") == 5\n# Test case 3:\nassert closest_integer(\"10.0\") == 10\n# Test case 4:\nassert closest_integer(\"10.5\") == 11\n# Test case 5:\nassert closest_integer(\"-10.5\") == -11\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef closest_integer(num):\n    \"\"\"\n    This function takes a string value as input and returns the closest integer to the input value.\n    If the input value is equidistant from two integers, the function should round away from zero.\n    \"\"\"\n    return round(float(num))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"10\") == 10\n# Test case 2:\nassert closest_integer(\"15.3\") == 15\n# Test case 3:\nassert closest_integer(\"14.5\") == 15\n# Test case 4:\nassert closest_integer(\"-14.5\") == -15\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef closest_integer(num):\n    \"\"\"\n    This function takes a string value representing a number and returns the closest integer.\n    If the number is equidistant from two integers, it rounds away from zero.\n    \"\"\"\n    return round(float(num))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert closest_integer(\"10\") == 10\n# Test case 2:\nassert closest_integer(\"15.3\") == 15\n# Test case 3:\nassert closest_integer(\"14.5\") == 15\n# Test case 4:\nassert closest_integer(\"-14.5\") == -15\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef closest_integer(num):\n    \"\"\"\n    This function takes a string value representing a number and returns the closest integer.\n    If the number is equidistant from two integers, the function rounds away from zero.\n    \"\"\"\n    return round(float(num))\n[/PYTHON]\n[JAVA]\npublic class ClosestInteger {\n    public static int closestInteger(String num) {\n        // Convert the input string to a double\n        double number = Double.parseDouble(num);\n        // Round the number to the closest integer\n        int roundedNumber = (int) Math.round(number);\n        return roundedNumber;\n    }\n}\n[/JAVA]\n[CSHARP]\npublic static class ClosestInteger\n{\n    public static int ClosestIntegerMethod(string num)\n    {\n        // Convert the input string to a double\n        double number = Double.Parse(num);\n        // Round the number to the closest integer\n        int roundedNumber = (int)Math.Round(number);\n        return roundedNumber;\n    }\n}\n[/CSHARP]\n[SCALA]\nobject ClosestInteger {\n    def closestInteger(num: String): Int = {\n        // Convert the input string to a double\n        val number = num.toDouble\n        // Round the number to the closest integer\n        (number + 0.5).toInt\n    }\n}\n[/SCALA]\n[JAVASCRIPT]\nfunction closestInteger(num) {\n    // Convert the input string to a number\n    num = Number(num);\n    // Round the number to the closest integer\n    return Math.round(num);\n}\n[/JAVASCRIPT]\n"}
