{"result_0":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1, 2, 3]) == [1, 2, 3]\n# Test case 3:\nassert order_by_points([1, 2, 3, -1, -2, -3]) == [-1, -2, -3, 1, 2, 3]\n[/TESTS]\n"}
{"result_1":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, -x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1]) == [1]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5]\n# Test case 5:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, -x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 3:\nassert order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\n# Test case 5:\nassert order_by_points([-5, -4, -3, -2, -1]) == [-1, -2, -3, -4, -5]\n# Test case 6:\nassert order_by_points([1, 2, 3, -4, -5]) == [1, 2, 3, -4, -5]\n# Test case 7:\nassert order_by_points([-1, -2, 3, -4, -5]) == [-1, -2, 3, -4, -5]\n# Test case 8:\nassert order_by_points([-1, -2, 3, 4, -5]) == [-1, -2, 3, 4, -5]\n# Test case 9:\nassert order_by_points([-1, -2, 3, -4, 5]) == [-1, -2, 3, -4, 5]\n# Test case 10:\nassert order_by_points([-1, 2, -3, 4, -5]) == [-1, 2, -3, 4, -5]\n[/TESTS]\n"}
{"result_3":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([10, 100, 1000, 10000]) == [10, 100, 1000, 10000]\n# Test case 5:\nassert order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, numbers.index(x)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, -x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1]) == [1]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]\n# Test case 5:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]) == [-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, -x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 3:\nassert order_by_points([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]\n# Test case 5:\nassert order_by_points([-5, -4, -3, -2, -1]) == [-1, -2, -3, -4, -5]\n# Test case 6:\nassert order_by_points([1, 2, 3, -4, -5]) == [1, 2, 3, -4, -5]\n# Test case 7:\nassert order_by_points([-1, -2, -3, 4, 5]) == [-1, -2, -3, 4, 5]\n# Test case 8:\nassert order_by_points([-1, 2, -3, -4, 5]) == [-1, 2, -3, -4, 5]\n# Test case 9:\nassert order_by_points([-1, -2, 3, -4, -5]) == [-1, -2, 3, -4, -5]\n# Test case 10:\nassert order_by_points([-1, 2, -3, 4, -5]) == [-1, 2, -3, 4, -5]\n[/TESTS]\n"}
{"result_8":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, numbers.index(x)))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1]) == [1]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]\n# Test case 5:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]) == [-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef order_by_points(numbers):\n    return sorted(numbers, key=lambda x: (x, -x))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert order_by_points([]) == []\n# Test case 2:\nassert order_by_points([1]) == [1]\n# Test case 3:\nassert order_by_points([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n# Test case 4:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5, 1, 2, 3, 4, 5]\n# Test case 5:\nassert order_by_points([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0]) == [-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]\n[/TESTS]\n"}
