{"result_0":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JAVA]\nimport java.security.MessageDigest;\n\npublic class StringToMd5 {\n    public static String getMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashInBytes = md.digest(text.getBytes(\"UTF-8\"));\n            String hexString = \"\";\n            for (byte b : hashInBytes) {\n                hexString += Integer.toHexString(0xFF & b);\n            }\n            return hexString;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n[/JAVA]\n"}
{"result_1":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JS]\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = require('md5');\n  return md5(text);\n};\n[/JS]\n[PASCAL]\nfunction StringToMD5(const Text: string): string;\nvar\n  MD5: TIdHashMessageDigest5;\nbegin\n  MD5 := TIdHashMessageDigest5.Create;\n  try\n    Result := MD5.HashStringAsHex(Text, IndyTextEncoding_UTF8);\n  finally\n    MD5.Free;\n  end;\nend;\n[/PASCAL]\n[JAVA]\nimport java.security.MessageDigest;\nimport java.math.BigInteger;\n\npublic class StringToMD5 {\n  public static String hash(String text) throws Exception {\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] messageDigest = md.digest(text.getBytes());\n    BigInteger number = new BigInteger(1, messageDigest);\n    String hashtext = number.toString(16);\n    // Now we need to zero pad it if you actually want the full 32 chars.\n    while (hashtext.length() < 32) {\n      hashtext = \"0\" + hashtext;\n    }\n    return hashtext;\n  }\n}\n[/JAVA]\n"}
{"result_2":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JAVA]\nimport java.security.MessageDigest;\n\npublic class StringToMd5 {\n    public static String getMd5(String text) {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashInBytes = md.digest(text.getBytes(\"UTF-8\"));\n            StringBuilder sb = new StringBuilder();\n            for (byte b : hashInBytes) {\n                sb.append(String.format(\"%02x\", b));\n            }\n            return sb.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n[/JAVA]\n[PHP]\n<?php\nfunction stringToMd5($text)\n{\n    if (empty($text)) {\n        return null;\n    }\n    $md5 = md5($text);\n    return $md5;\n}\n?>\n[/PHP]\n[GO]\npackage main\n\nimport (\n	\"crypto/md5\"\n	\"encoding/hex\"\n)\n\nfunc StringToMd5(s string) string {\n	if s == \"\" {\n		return \"\"\n	}\n	h := md5.New()\n	h.Write([]byte(s))\n	return hex.EncodeToString(h.Sum(nil))\n}\n[/GO]\n[SWIFT]\nfunc stringToMd5(_ text: String) -> String? {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using: .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n    _ = CC_MD5(data, CC_LONG(data.count), &digest)\n    return digest.map { String(format: \"%02x\", $0) }.joined()\n}\n[/SWIFT]\n"}
{"result_3":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n[/PYTHON]\n[JAVASCRIPT]\nfunction stringToMd5(text) {\n    if (text === \"\") {\n        return null;\n    }\n    var md5 = require('md5');\n    return md5(text);\n}\n[/JAVASCRIPT]\n[PHP]\n<?php\n\nfunction string_to_md5($text) {\n    if (empty($text)) {\n        return null;\n    }\n    return md5($text);\n}\n\n?>\n[/PHP]\n"}
{"result_4":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[PHP]\n<?php\n\nfunction string_to_md5($text) {\n    if (empty($text)) {\n        return null;\n    }\n    return md5($text);\n}\n\n?>\n[/PHP]\n[JAVASCRIPT]\nfunction stringToMd5(text) {\n    return CryptoJS.MD5(text).toString();\n}\n[/JAVASCRIPT]\n"}
{"result_5":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JAVASCRIPT]\nfunction stringToMd5(text) {\n    if (text === \"\") {\n        return null;\n    }\n    let md5 = require(\"crypto-js/md5\");\n    return md5(text).toString();\n}\n[/JAVASCRIPT]\n[PHP]\n<?php\nfunction stringToMd5($text) {\n    if ($text === \"\") {\n        return null;\n    }\n    return md5($text);\n}\n?>\n[/PHP]\n"}
{"result_6":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JAVASCRIPT]\nfunction stringToMd5(text) {\n    if (text === \"\") {\n        return null;\n    }\n    var md5 = require('crypto').createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n}\n[/JAVASCRIPT]\n[PHP]\nfunction stringToMd5($text)\n{\n    if ($text === \"\") {\n        return null;\n    }\n    $md5 = md5($text);\n    return $md5;\n}\n[/PHP]\n"}
{"result_7":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JAVA]\nimport java.security.MessageDigest;\n\npublic class StringToMd5 {\n    public static String getMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return null;\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            hexString.append(Integer.toHexString(0xFF & digest[i]));\n        }\n        return hexString.toString();\n    }\n}\n[/JAVA]\n[C#]\nusing System.Security.Cryptography;\n\npublic static class StringToMd5 {\n  public static string GetMd5(string text) {\n    if (text == null || text == \"\") {\n      return null;\n    }\n    MD5 md5 = MD5.Create();\n    byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(text);\n    byte[] hashBytes = md5.ComputeHash(inputBytes);\n\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < hashBytes.Length; i++) {\n      sb.Append(hashBytes[i].ToString(\"X2\"));\n    }\n    return sb.ToString();\n  }\n}\n[/C#]\n[PHP]\n<?php\nfunction string_to_md5($text)\n{\n    if (empty($text)) {\n        return null;\n    }\n    $md5 = md5($text);\n    return $md5;\n}\n?>\n[/PHP]\n"}
{"result_8":"```php\nreturn empty($text) ? null : md5($text);\n```\nExplanation:\n\n* The function takes a single parameter `$text` which is the input string.\n* It uses the `empty()` function to check if the string is empty. If it is, it returns `null`.\n* Otherwise, it calculates the MD5 hash of the string using the `md5()` function and returns it as a string.\n\nNote that this function assumes that the input string contains only printable ASCII characters. If you need to support other character sets or Unicode strings, you may need to use a different hashing algorithm such as SHA-256 or SHA-512."}
{"result_9":"[PYTHON]\nimport hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    md5 = hashlib.md5(text.encode())\n    return md5.hexdigest()\n[/PYTHON]\n[JAVA]\nimport java.security.MessageDigest;\n\npublic class StringToMd5 {\n    public static String getMd5(String text) {\n        if (text.isEmpty()) {\n            return null;\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            hexString.append(Integer.toHexString(0xFF & digest[i]));\n        }\n        return hexString.toString();\n    }\n}\n[/JAVA]\n[PHP]\n<?php\nfunction stringToMd5($text)\n{\n    if ($text === \"\") {\n        return null;\n    }\n    $md5 = md5($text);\n    return $md5;\n}\n?>\n[/PHP]\n[GO]\npackage main\n\nimport \"crypto/md5\"\n\nfunc stringToMd5(text string) string {\n	if text == \"\" {\n		return \"\"\n	}\n	hash := md5.New()\n	hash.Write([]byte(text))\n	return hex.EncodeToString(hash.Sum(nil))\n}\n[/GO]\n[COFFEESCRIPT]\nmd5 = (s) ->\n    return \"\"  if s is \"\"\n    crypto = require 'crypto'\n    hash = crypto.createHash 'md5'\n    hash.update s\n    hash.digest 'hex'\n[/COFFEESCRIPT]\n[SCSS]\n@mixin md5($string) {\n  $hash: \"\";\n  @if $string != \"\" {\n    $hash: #{str-slice(md5($string), 0, 16)};\n  }\n  @return $hash;\n}\n[/SCSS]\n"}
