{"result_0":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[JAVASCRIPT]\nfunction getPositive(arr) {\n    return arr.filter(function(item) {\n        return item >= 0;\n    });\n}\n[/JAVASCRIPT]\n[PHP]\nfunction get_positive($l){\n    $result = [];\n    foreach ($l as $i) {\n        if ($i > 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n[/PHP]\n"}
{"result_1":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\n[/TESTS]\n"}
{"result_2":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[JAVA]\nprivate List<Integer> getPositive(List<Integer> list) {\n    return list.stream()\n               .filter(x -> x > 0)\n               .collect(Collectors.toList());\n}\n[/JAVA]\n"}
{"result_3":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\n[/TESTS]\n"}
{"result_4":"[PYTHON]\ndef get_positive(my_list):\n    return list(filter(lambda x: x > 0, my_list))\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\n[/TESTS]\n"}
{"result_5":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\n[/TESTS]\n"}
{"result_6":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\n[/TESTS]\n"}
{"result_7":"[PYTHON]\ndef get_positive(my_list):\n    return list(filter(lambda x: x > 0, my_list))\n[/PYTHON]\n[JAVASCRIPT]\nfunction getPositive(arr) {\n    return arr.filter(function(item) {\n        return item > 0;\n    });\n}\n[/JAVASCRIPT]\n"}
{"result_8":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, 2, 3, -4, -5, -6, -7, -8]) == [1, 2, 3]\n[/TESTS]\n"}
{"result_9":"[PYTHON]\ndef get_positive(my_list):\n    return [x for x in my_list if x > 0]\n[/PYTHON]\n[TESTS]\n# Test case 1:\nassert get_positive([]) == []\n# Test case 2:\nassert get_positive([1]) == [1]\n# Test case 3:\nassert get_positive([1, -1, 2, -2, 3, -3]) == [1, 2, 3]\n[/TESTS]\n"}
