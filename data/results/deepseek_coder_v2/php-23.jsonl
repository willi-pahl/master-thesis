{"result_0":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgende Strategie verwenden:\n\n1. Starte mit dem kleinsten Primfaktor, der 2 ist.\n2. Überprüfe, ob die Zahl durch den aktuellen Primfaktor teilbar ist. Wenn ja, dividiere die Zahl durch diesen Faktor und fahre fort mit dem nächsten Primfaktor.\n3. Wenn nicht, erhöhe den Primfaktor um 1 und wiederhole den Vorgang.\n4. Wiederhole den Prozess, bis die Zahl selbst ein Primfaktor ist.\n5. Der größte gefundene Primfaktor ist der gesuchte größte Primfaktor von \( n \).\n\nHier ist eine Implementierung dieses Algorithmus in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Starte mit dem kleinsten Primfaktor 2\n    $largest_factor = 2;\n    \n    // Solange n größer als 1 ist, fahre fort\n    while ($n > 1) {\n        // Überprüfe, ob n durch den aktuellen Faktor teilbar ist\n        if ($n % $largest_factor == 0) {\n            // Wenn ja, dividiere n durch diesen Faktor\n            $n /= $largest_factor;\n        } else {\n            // Wenn nicht, erhöhe den Faktor um 1\n            if ($largest_factor * $largest_factor > $n) {\n                // Wenn der aktuelle Faktor quadriert größer als n ist, dann ist n selbst ein Primfaktor\n                if ($n == 1) {\n                    break;\n                } else {\n                    $largest_factor = $n;\n                    break;\n                }\n            } else {\n                // Andernfalls erhöhe den Faktor um 1\n                $largest_factor++;\n            }\n        }\n    }\n    \n    return $largest_factor;\n}\n\n// Testfälle\necho largestPrimeFactor(13195) . \"\n\"; // Ausgabe: 29\necho largestPrimeFactor(2048) . \"\n\";  // Ausgabe: 2\n```\n\nDiese Funktion arbeitet wie folgt:\n- Sie startet mit dem kleinsten Primfaktor 2.\n- Solange \( n \) größer als 1 ist, überprüft sie, ob \( n \) durch den aktuellen Primfaktor teilbar ist. Wenn ja, dividiert sie \( n \) durch diesen Faktor.\n- Wenn nicht, prüft sie, ob der aktuelle Faktor quadriert größer als \( n \) ist. Wenn ja, setzt sie den aktuellen Faktor auf \( n \), da \( n \) selbst ein Primfaktor sein muss.\n- Andernfalls erhöht sie den aktuellen Faktor um 1 und wiederholt den Vorgang.\n- Am Ende wird der größte gefundene Primfaktor zurückgegeben."}
{"result_1":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgende Strategie verwenden:\n\n1. **Finde den kleinsten Primfaktor**: Beginne mit dem kleinsten Primfaktor, der 2 ist.\n2. **Teile \( n \) durch diesen Faktor**, bis er nicht mehr teilbar ist.\n3. **Wechsle zum nächsten Primfaktor** (wenn die aktuelle Zahl größer als 2 ist), der mindestens so groß wie der aktuelle kleinste Faktor ist.\n4. Wiederhole das Teilen und Wechseln, bis \( n \) zu 1 gekürzt wird.\n5. Der letzte verwendete Primfaktor ist der größte Primfaktor von \( n \).\n\nHier ist die Implementierung dieser Strategie in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Start with the smallest prime factor, which is 2\n    $factor = 2;\n    \n    while ($factor * $factor <= $n) {\n        if ($n % $factor == 0) {\n            // Divide n by the current factor until it's no longer divisible\n            while ($n % $factor == 0) {\n                $n /= $factor;\n            }\n        }\n        // Move to the next potential prime factor\n        $factor++;\n    }\n    \n    // If n is still greater than 1, then it must be a prime number itself\n    if ($n > 1) {\n        return $n;\n    }\n    \n    return $factor - 1;\n}\n\n// Test cases\necho largestPrimeFactor(13195); // Output: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Output: 2\n```\n\n### Erklärung:\n- **Schleife**: Wir verwenden eine Schleife, die solange läuft, wie der aktuelle Faktor quadriert kleiner oder gleich \( n \) ist. Diese Bedingung sorgt dafür, dass wir nur effektiv mit Primzahlen arbeiten.\n- **Teilen**: Wenn \( n \) durch den aktuellen Faktor teilbar ist, teilen wir \( n \) so lange durch diesen Faktor, bis es nicht mehr geht. Dies entfernt alle Vorkommen des aktuellen Faktors aus \( n \).\n- **Wechseln**: Wenn der aktuelle Faktor kein Teiler von \( n \) ist, wechseln wir zum nächsten Faktor.\n- **Rest**: Am Ende der Schleife, wenn \( n \) noch größer als 1 ist, dann ist \( n \) selbst eine Primzahl und damit der größte Primfaktor. Andernfalls ist der letzte verwendete Faktor der größte Primfaktor von \( n \).\n\nDiese Methode ist effizient und funktioniert für beliebige \( n > 1 \)."}
{"result_2":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgenden Schritte befolgen:\n\n1. **Finde den kleinsten Primfaktor**: Beginne mit dem kleinsten Primfaktor 2 und überprüfe, ob er ein Teiler von \( n \) ist. Wenn ja, teile \( n \) durch diesen Faktor, bis er nicht mehr teilbar ist.\n2. **Weitere Primfaktoren finden**: Sobald der kleinste Primfaktor entfernt wurde, suche den nächsten möglichen Primfaktor. Dieser wird größer als 2 sein und muss nicht unbedingt eine Primzahl sein.\n3. **Wiederhole das Verfahren**: Wiederhole die Schritte, bis \( n \) zu einer ganzen Zahl kleiner als 2 gekürzt wird.\n4. **Gib den größten Primfaktor zurück**: Der letzte verbleibende Faktor ist der größte Primfaktor von \( n \).\n\nHier ist die Implementierung in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Start with the smallest prime factor 2\n    $largestFactor = 2;\n    \n    // Divide n by its smallest factor until it becomes odd\n    while ($n % $largestFactor == 0) {\n        $n /= $largestFactor;\n    }\n    \n    // Now start checking from the next potential prime factor 3\n    $factor = 3;\n    while ($factor * $factor <= $n) {\n        // While n is divisible by the current factor, divide it\n        while ($n % $factor == 0) {\n            $n /= $factor;\n        }\n        $factor += 2; // Increment by 2 to skip even numbers (which are not prime except for 2)\n    }\n    \n    // If n is still greater than 1, then it must be a prime number itself\n    if ($n > 1) {\n        return $n;\n    }\n    \n    // Return the largest factor found so far\n    return $largestFactor;\n}\n\n// Test cases\necho largestPrimeFactor(13195); // Output: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Output: 2\n```\n\n### Erklärung:\n- **Schleife mit Faktor 2**: Wir beginnen mit dem kleinsten Primfaktor 2 und teilen \( n \) solange durch 2, bis es nicht mehr durch 2 teilbar ist.\n- **Schleife mit weiteren Faktoren**: Nachdem der Faktor 2 entfernt wurde, suchen wir nach den übrigen Primfaktoren. Wir beginnen bei 3 und erhöhen den Faktor jeweils um 2 (da gerade Zahlen keine Primzahlen außer 2 sind).\n- **Ende der Schleife**: Die äußere Schleife endet, wenn \( \text{factor}^2 > n \), da wir nur noch mögliche Primfaktoren überprüfen.\n- **Letzter Faktor**: Wenn \( n \) nach der Schleife größer als 1 ist, dann ist \( n \) selbst ein Primfaktor und der größte davon.\n\nDieses Verfahren garantiert, dass wir den größten Primfaktor von \( n \) finden, da wir immer die kleinsten Faktoren zuerst entfernen und nur Primzahlen als mögliche Faktoren betrachten."}
{"result_3":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgende Strategie verwenden:\n\n1. Starte mit dem kleinsten Primfaktor, der 2 ist.\n2. Überprüfe, ob die Zahl durch den aktuellen Primfaktor teilbar ist. Wenn ja, dividiere die Zahl durch diesen Faktor und fahre fort mit dem nächsten Faktor.\n3. Wenn nicht, erhöhe den Faktor um 1 und wiederhole den Vorgang.\n4. Wiederhole den Prozess, bis die Zahl zu 1 reduziert ist.\n5. Der letzte verwendete Primfaktor ist der größte Primfaktor von \( n \).\n\nHier ist die Implementierung in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Starte mit dem kleinsten Primfaktor 2\n    $factor = 2;\n    \n    while ($n > 1) {\n        if ($n % $factor == 0) {\n            // Wenn die Zahl durch den Faktor teilbar ist, dividiere sie\n            $n /= $factor;\n        } else {\n            // Sonst erhöhe den Faktor um 1\n            $factor++;\n        }\n    }\n    \n    return $factor;\n}\n\n// Testfälle\necho largestPrimeFactor(13195) . \"\n\"; // Ausgabe: 29\necho largestPrimeFactor(2048) . \"\n\";  // Ausgabe: 2\n```\n\nDiese Funktion arbeitet wie folgt:\n- Sie beginnt mit dem kleinsten Primfaktor, der 2 ist.\n- Während die Zahl \( n \) größer als 1 ist, überprüft sie, ob \( n \) durch den aktuellen Faktor teilbar ist.\n- Wenn ja, dividiert sie \( n \) durch diesen Faktor und geht zum nächsten Faktor über.\n- Wenn nicht, erhöht sie den Faktor um 1 und wiederholt die Überprüfung.\n- Sobald \( n \) zu 1 reduziert ist, wird der letzte verwendete Faktor zurückgegeben, der der größte Primfaktor von \( n \) ist."}
{"result_4":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgenden Schritte befolgen:\n\n1. **Finde den kleinsten Primfaktor**: Beginne mit dem kleinsten Primfaktor 2 und überprüfe, ob er ein Teiler von \( n \) ist. Wenn ja, teile \( n \) durch diesen Faktor, bis er nicht mehr teilbar ist.\n2. **Weitere Primfaktoren finden**: Sobald der kleinste Primfaktor entfernt wurde, suche den nächsten möglichen Primfaktor (3, 5, 7, ...). Wiederhole das Verfahren, bis \( n \) zu 1 reduziert ist.\n3. **Maximale Primzahl finden**: Merke dir bei jedem Schritt den größten gefundenen Primfaktor.\n\nHier ist die Implementierung in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Start with the smallest prime factor 2\n    $largest_factor = null;\n    \n    // Check for the factor 2\n    while ($n % 2 == 0) {\n        $largest_factor = 2;\n        $n /= 2;\n    }\n    \n    // Check for odd factors from 3 onwards\n    for ($i = 3; $i * $i <= $n; $i += 2) {\n        while ($n % $i == 0) {\n            $largest_factor = $i;\n            $n /= $i;\n        }\n    }\n    \n    // If n is still greater than 1, then it must be a prime number itself\n    if ($n > 1) {\n        $largest_factor = $n;\n    }\n    \n    return $largest_factor;\n}\n\n// Test cases\necho largestPrimeFactor(13195); // Output: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Output: 2\n```\n\n### Erklärung des Codes:\n1. **Initialisierung**: Wir initialisieren `$largest_factor` mit `null`, da wir später den größten Primfaktor speichern werden.\n2. **Primfaktor 2 entfernen**: Solange \( n \) durch 2 teilbar ist, teilen wir \( n \) durch 2 und aktualisieren `$largest_factor` auf 2.\n3. **Ungerade Primfaktoren finden**: Wir starten von 3 und überprüfen alle ungeraden Zahlen bis zur Quadratwurzel von \( n \). Für jeden gefundenen Faktor teilen wir \( n \) durch diesen Faktor, bis er nicht mehr teilbar ist.\n4. **Restliche Primzahl**: Wenn nach allen Faktoren noch ein Rest übrig bleibt (d.h., \( n \) ist eine Primzahl), aktualisieren wir `$largest_factor` auf diese Zahl.\n5. **Rückgabe**: Der größte Primfaktor wird zurückgegeben.\n\nDieser Algorithmus ist effizient und funktioniert für beliebig große Zahlen, da die Schleife nur bis zur Quadratwurzel von \( n \) geht."}
{"result_5":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man eine Methode verwenden, die auf der Primfaktorenzerlegung basiert. Hier ist ein PHP-Code, der diese Aufgabe löst:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Start with the smallest prime factor 2\n    $largest_factor = 2;\n    \n    // Divide n by 2 until it is no longer even\n    while ($n % 2 == 0) {\n        $largest_factor = 2;\n        $n /= 2;\n    }\n    \n    // Check for odd factors starting from 3 up to the square root of n\n    for ($i = 3; $i * $i <= $n; $i += 2) {\n        while ($n % $i == 0) {\n            $largest_factor = $i;\n            $n /= $i;\n        }\n    }\n    \n    // If n is still greater than 1, then it must be a prime number itself\n    if ($n > 1) {\n        $largest_factor = $n;\n    }\n    \n    return $largest_factor;\n}\n\n// Test cases\necho largestPrimeFactor(13195); // Output: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Output: 2\n```\n\n### Erklärung des Codes:\n\n1. **Initialisierung**: Wir beginnen mit dem kleinsten Primfaktor, der Zahl 2.\n2. **Even-Zahlentest und Division**: Solange \( n \) gerade ist (durch 2 teilbar), dividieren wir \( n \) durch 2 und aktualisieren den größten gefundenen Primfaktor auf 2.\n3. **Ungerade Faktoren**: Wir überprüfen ab 3 alle ungeraden Zahlen bis zur Quadratwurzel von \( n \). Wenn eine Zahl ein Teiler von \( n \) ist, aktualisieren wir den größten Primfaktor und dividieren \( n \) durch diese Zahl.\n4. **Restliche Zahl**: Wenn nach allen Divisionen \( n \) noch größer als 1 ist, bedeutet das, dass \( n \) selbst eine Primzahl ist, und wir aktualisieren den größten Primfaktor auf diese Zahl.\n5. **Rückgabe**: Der größte gefundene Primfaktor wird zurückgegeben.\n\nDieser Code ist effizient und liefert das korrekte Ergebnis für die gegebene Aufgabenstellung."}
{"result_6":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgende Strategie verwenden:\n\n1. **Finde den kleinsten Primfaktor**: Beginne mit dem kleinsten Primfaktor, der 2 ist (da \( n > 1 \)).\n2. **Teile \( n \) durch diesen Faktor**, bis er nicht mehr teilbar ist.\n3. **Wechsle zu den nächsten Primzahlen**: Wenn die aktuelle Zahl kein Teiler von \( n \) ist, wechsel zum nächsten ungeraden Faktor.\n4. **Wiederhole das Verfahren**, bis \( n \) selbst eine Primzahl ist.\n\nHier ist der PHP-Code zur Implementierung dieses Algorithmus:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Start with the smallest prime factor, which is 2\n    $largest_factor = null;\n    \n    // Divide n by 2 until it's no longer divisible by 2\n    while ($n % 2 == 0) {\n        $largest_factor = 2;\n        $n /= 2;\n    }\n    \n    // Check for odd factors starting from 3\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $largest_factor = $i;\n            $n /= $i;\n        }\n    }\n    \n    // If n is still greater than 1, then it must be a prime number itself\n    if ($n > 2) {\n        $largest_factor = $n;\n    }\n    \n    return $largest_factor;\n}\n\n// Test cases\necho largestPrimeFactor(13195); // Output: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Output: 2\n```\n\n### Erklärung des Codes:\n\n1. **Initialisierung**: Wir initialisieren `$largest_factor` als `null`. Diese Variable wird später den größten Primfaktor speichern.\n2. **Teilen durch 2**: Solange \( n \) durch 2 teilbar ist, dividieren wir \( n \) durch 2 und aktualisieren `$largest_factor` auf 2.\n3. **Finde andere Primfaktoren**: Wir starten eine Schleife ab 3 und erhöhen den Index um 2 bei jeder Iteration, da nur ungerade Zahlen als Potenzial-Primfaktoren in Frage kommen (gerade Zahlen sind durch 2 geteilt).\n4. **Überprüfe, ob \( n \) noch größer als 2**: Wenn nach allen Divisionen \( n \) immer noch größer als 2 ist, dann ist \( n \) selbst ein Primfaktor und wird zurückgegeben.\n\nDieser Algorithmus ist effizient und basiert auf der Tatsache, dass jede zusammengesetzte Zahl einen Faktor bis zu ihrer Quadratwurzel hat."}
{"result_7":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgende Strategie verwenden:\n\n1. Starte mit dem kleinsten Primfaktor, der 2 ist.\n2. Überprüfe, ob die Zahl durch den aktuellen Primfaktor teilbar ist. Wenn ja, dividiere die Zahl durch diesen Faktor und fahre fort mit dem nächsten Faktor.\n3. Wenn nicht, erhöhe den Faktor um 1 und wiederhole den Vorgang.\n4. Stoppe, wenn der aktuelle Primfaktor größer ist als die Quadratwurzel von \( n \).\n5. Der letzte verwendete Primfaktor ist der größte Primfaktor von \( n \).\n\nHier ist die Implementierung dieses Algorithmus in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Starte mit dem kleinsten Primfaktor 2\n    $largest_factor = 2;\n    \n    // Solange n durch den aktuellen Faktor teilbar ist, dividiere n durch diesen Faktor\n    while ($n % $largest_factor == 0) {\n        $n /= $largest_factor;\n    }\n    \n    // Starte mit dem nächsten möglichen Primfaktor ab 3\n    $factor = 3;\n    \n    // Die Schritte 2 und 3 wiederholen, bis factor^2 > n\n    while ($factor * $factor <= $n) {\n        // Wenn n durch den aktuellen Faktor teilbar ist, dividiere n durch diesen Faktor\n        if ($n % $factor == 0) {\n            $n /= $factor;\n        } else {\n            // Sonst erhöhe den Faktor um 1\n            $factor += 2;\n        }\n    }\n    \n    // Wenn n nach der Schleife noch größer als 1 ist, dann ist n selbst ein Primfaktor\n    if ($n > 1) {\n        return $n;\n    } else {\n        return $largest_factor;\n    }\n}\n\n// Testbeispiele\necho largestPrimeFactor(13195); // Ausgabe: 29\necho \"\n\";\necho largestPrimeFactor(2048);  // Ausgabe: 2\n```\n\nDieser Code überprüft alle möglichen Primfaktoren von \( n \) und gibt den größten zurück. Wenn \( n \) nach der Schleife noch größer als 1 ist, bedeutet das, dass \( n \) selbst ein Primfaktor ist und damit der größte Primfaktor von \( n \)."}
{"result_8":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgende Strategie verwenden:\n\n1. Starte mit dem kleinsten Primfaktor, der 2 ist.\n2. Teile \( n \) durch 2, bis es nicht mehr teilbar ist. Wenn \( n \) gerade war, wird 2 sein Primfaktor.\n3. Weitere Primzahlen sind ungerade Zahlen (3, 5, 7, ...). Starte bei 3 und erhöhe den Faktor jeweils um 2, da nur ungerade Zahlen prim sein können.\n4. Wiederhole das Teilen durch die aktuelle Primzahl, bis \( n \) nicht mehr teilbar ist.\n5. Wenn \( n \) nach dem Teilen eine Zahl größer 1 ist, wiederhole den Vorgang mit der nächsten ungeraden Zahl.\n6. Am Ende sollte die größte Primzahl sein, durch die \( n \) teilbar war.\n\nHier ist die Implementierung in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    $largest_factor = null;\n    \n    // Teile durch 2 bis es nicht mehr geht\n    while ($n % 2 == 0) {\n        $largest_factor = 2;\n        $n /= 2;\n    }\n    \n    // Prüfe ungerade Faktoren von 3 bis zur Wurzel von n\n    for ($i = 3; $i * $i <= $n; $i += 2) {\n        while ($n % $i == 0) {\n            $largest_factor = $i;\n            $n /= $i;\n        }\n    }\n    \n    // Wenn n eine Primzahl größer als 2 ist, dann ist es der größte Faktor\n    if ($n > 2) {\n        $largest_factor = $n;\n    }\n    \n    return $largest_factor;\n}\n\n// Test cases\necho largestPrimeFactor(13195); // Ausgabe: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Ausgabe: 2\n```\n\nDiese Funktion arbeitet wie folgt:\n- Zuerst wird die 2 als Primfaktor entfernt, bis \( n \) nicht mehr durch 2 teilbar ist.\n- Dann werden alle ungeraden Faktoren von 3 bis zur Wurzel von \( n \) überprüft und entfernt.\n- Am Ende wird geprüft, ob \( n \) noch größer als 2 ist, was bedeuten würde, dass \( n \) selbst eine Primzahl ist und der größte Faktor.\n\nDiese Methode ist effizient und funktioniert für beliebig große Zahlen."}
{"result_9":" Um den größten Primfaktor einer Zahl \( n \) zu finden, kann man die folgenden Schritte befolgen:\n\n1. **Finde den kleinsten Primfaktor**: Beginne mit dem kleinsten Primfaktor 2 und überprüfe, ob er ein Teiler von \( n \) ist. Wenn ja, teile \( n \) durch diesen Faktor, bis er nicht mehr teilbar ist.\n2. **Fortsetzen mit den restlichen Faktoren**: Sobald der kleinste Primfaktor entfernt wurde, wiederhole den Vorgang mit dem neuen Wert von \( n \).\n3. **Wiederholen bis \( n \) eine Primzahl ist**: Solange \( n \) noch keine Primzahl ist, suche nach weiteren Faktoren.\n4. **Gib den größten Primfaktor zurück**: Wenn \( n \) nun eine Primzahl ist, gib den letzten gefundenen Primfaktor zurück.\n\nHier ist die Implementierung in PHP:\n\n```php\nfunction largestPrimeFactor($n) {\n    // Funktion zum Überprüfen, ob eine Zahl prim ist\n    function isPrime($num) {\n        if ($num <= 1) return false;\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) return false;\n        }\n        return true;\n    }\n\n    // Hauptlogik zur Suche nach dem größten Primfaktor\n    $largestFactor = null;\n    for ($i = 2; $i * $i <= $n; $i++) {\n        while ($n % $i == 0 && isPrime($i)) {\n            if ($largestFactor === null || $i > $largestFactor) {\n                $largestFactor = $i;\n            }\n            $n /= $i;\n        }\n    }\n    \n    // Wenn n nach dem Entfernen aller Faktoren noch größer als 1 ist, dann ist es eine Primzahl und der letzte verbleibende Faktor ist der größte\n    if ($n > 1 && isPrime($n)) {\n        $largestFactor = $n;\n    }\n    \n    return $largestFactor;\n}\n\n// Testfälle\necho largestPrimeFactor(13195) . \"\n\"; // Ausgabe: 29\necho largestPrimeFactor(2048) . \"\n\";  // Ausgabe: 2\n```\n\nDiese Implementierung verwendet eine Hilfsfunktion `isPrime`, um zu überprüfen, ob eine Zahl prim ist. Die Hauptfunktion `largestPrimeFactor` durchläuft die Zahlen von 2 bis zur Wurzel von \( n \), um Primfaktoren zu finden und entfernt sie, wenn möglich. Am Ende wird der größte gefundene Primfaktor zurückgegeben."}
