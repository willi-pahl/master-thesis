{"result_0":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in der gegebenen zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen in aufsteigender Reihenfolge sortiert werden und innerhalb einer Zeile nach Spalten in absteigender Reihenfolge.\n\nHier ist die Implementierung der Funktion `getRow` in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $coordinates = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $coordinates[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen (aufsteigend) und Spalten (absteigend)\n    usort($coordinates, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // absteigende Reihenfolge nach Spalten\n        }\n        return $a[0] - $b[0]; // aufsteigende Reihenfolge nach Zeilen\n    });\n    \n    return $coordinates;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` und suchen nach dem Wert `x`. Wenn wir den Wert finden, speichern wir die Koordinaten (Zeile, Spalte) in der Liste `$coordinates`.\n2. **Sortieren der Koordinaten**: Wir verwenden die Funktion `usort` von PHP, um die Koordinaten zu sortieren:\n   - Zuerst sortieren wir nach der Zeile (`$a[0]` und `$b[0]`) in aufsteigender Reihenfolge.\n   - Wenn die Zeilen gleich sind, sortieren wir nach der Spalte (`$a[1]` und `$b[1]`) in absteigender Reihenfolge.\n3. **Rückgabe der Ergebnisse**: Die sortierten Koordinaten werden zurückgegeben.\n\nDiese Implementierung berücksichtigt die Anforderungen und liefert das korrekte Ergebnis für die gegebenen Beispiele."}
{"result_1":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in einer zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb der Zeile nach Spalten in absteigender Reihenfolge.\n\nHier ist die Implementierung der Funktion `getRow` in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $coordinates = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $coordinates[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen und dann nach Spalten in absteigender Reihenfolge\n    usort($coordinates, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // Sortieren nach Spalten in absteigender Reihenfolge\n        }\n        return $a[0] - $b[0]; // Sortieren nach Zeilen in aufsteigender Reihenfolge\n    });\n    \n    return $coordinates;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` und speichern die Koordinaten (`rowIndex`, `colIndex`) in einem Array `$coordinates`, wenn der Wert an dieser Stelle gleich `x` ist.\n2. **Sortieren der Koordinaten**: Wir verwenden `usort` mit einer benutzerdefinierten Sortierfunktion:\n   - Zuerst sortieren wir nach der Zeile (`rowIndex`) in aufsteigender Reihenfolge.\n   - Falls die Zeilen gleich sind, sortieren wir nach der Spalte (`colIndex`) in absteigender Reihenfolge.\n3. **Rückgabe**: Die sortierten Koordinaten werden zurückgegeben.\n\nDiese Implementierung berücksichtigt die Anforderungen und liefert das korrekte Ergebnis für die gegebenen Beispiele."}
{"result_2":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in der zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb einer Zeile nach Spalten in absteigender Reihenfolge. Hier ist die Implementierung dieser Funktion in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $result = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $result[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen und dann nach Spalten in absteigender Reihenfolge\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // Sortieren nach Spalten in absteigender Reihenfolge\n        }\n        return $a[0] - $b[0]; // Sortieren nach Zeilen in aufsteigender Reihenfolge\n    });\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` sowohl nach Zeilen (`rowIndex`) als auch nach Spalten (`colIndex`). Wenn wir den Wert `x` finden, fügen wir die Koordinate (Zeile, Spalte) zum Ergebnisarray hinzu.\n2. **Sortieren der Koordinaten**: Wir verwenden die Funktion `usort`, um die Koordinaten zuerst nach Zeilen (`rowIndex`) und dann nach Spalten in absteigender Reihenfolge zu sortieren. Die Vergleichsfunktion ordnet die Koordinaten wie gewünscht:\n   - Zuerst wird nach `rowIndex` sortiert, was aufsteigend ist.\n   - Wenn die Zeilen gleich sind (`$a[0] == $b[0]`), wird nach `colIndex` in absteigender Reihenfolge sortiert (`$b[1] - $a[1]`).\n\nDiese Implementierung liefert das gewünschte Ergebnis, indem sie die Koordinaten korrekt findet und sortiert."}
{"result_3":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in einer zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb der Zeile nach Spalten in absteigender Reihenfolge.\n\nHier ist die Implementierung der Funktion `getRow` in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $result = [];\n    \n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $result[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen (aufsteigend) und dann nach Spalten (absteigend)\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // absteigende Reihenfolge für Spalten\n        }\n        return $a[0] - $b[0]; // aufsteigende Reihenfolge für Zeilen\n    });\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen jede Zeile und jeden Wert in der Zeile, um nach der Zahl `x` zu suchen.\n2. **Speichern der Koordinaten**: Wenn wir die Zahl `x` finden, speichern wir die Koordinate (Zeile, Spalte) im Ergebnisarray.\n3. **Sortieren der Koordinaten**: Wir verwenden `usort`, um die Koordinaten zuerst nach Zeilen (aufsteigend) und dann nach Spalten (absteigend) zu sortieren.\n4. **Rückgabe des Ergebnisses**: Schließlich geben wir das sortierte Array von Tupeln zurück.\n\nDiese Implementierung berücksichtigt die Anforderungen der Aufgabenstellung und liefert das korrekte Ergebnis."}
{"result_4":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in der zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb einer Zeile nach Spalten in absteigender Reihenfolge. Hier ist eine mögliche Implementierung der Funktion:\n\n```php\nfunction getRow($lst, $x) {\n    $coordinates = [];\n    \n    // Durchlaufen der Liste und Suchen von x\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $coordinates[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen und dann nach Spalten in absteigender Reihenfolge\n    usort($coordinates, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // Sortieren nach Spalten in absteigender Reihenfolge\n        }\n        return $a[0] - $b[0]; // Sortieren nach Zeilen in aufsteigender Reihenfolge\n    });\n    \n    return $coordinates;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen jede Zeile und jeden Wert in der Zeile, um nach `x` zu suchen. Wenn wir einen Treffer finden (`$value == $x`), speichern wir die Koordinate (Zeile, Spalte) im Array `$coordinates`.\n2. **Sortieren**: Wir verwenden `usort`, um die Koordinaten zunächst nach Zeilen und dann nach Spalten in absteigender Reihenfolge zu sortieren. Die Vergleichsfunktion ordnet zuerst nach der Zeile (`$a[0]` vs `$b[0]`) und wenn die Zeilen gleich sind, sortiert sie nach der Spalte in umgekehrter Reihenfolge (`$b[1] - $a[1]`).\n3. **Rückgabe**: Die sortierte Liste von Koordinaten wird zurückgegeben.\n\nDiese Implementierung berücksichtigt die Anforderungen der Aufgabenstellung und liefert das korrekte Ergebnis."}
{"result_5":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in einer zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb der Zeile nach Spalten in absteigender Reihenfolge.\n\nHier ist die Implementierung der Funktion `getRow` in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $result = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $result[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Ergebnisse nach Zeilen und dann nach Spalten in absteigender Reihenfolge\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // Sortieren nach Spalten in absteigender Reihenfolge\n        }\n        return $a[0] - $b[0]; // Sortieren nach Zeilen in aufsteigender Reihenfolge\n    });\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` und suchen nach dem Wert `x`. Jedes Mal, wenn wir den Wert finden, fügen wir die Koordinate (Zeile, Spalte) zum Ergebnisarray hinzu.\n2. **Sortieren der Ergebnisse**: Wir verwenden `usort` mit einer benutzerdefinierten Vergleichsfunktion:\n   - Zuerst sortieren wir nach Zeilen (`$a[0]` und `$b[0]`), um die Reihenfolge in aufsteigender Zeile zu gewährleisten.\n   - Wenn die Zeilen gleich sind, sortieren wir nach Spalten in absteigender Reihenfolge (`$b[1] - $a[1]`).\n\nDiese Implementierung liefert das korrekte Ergebnis und berücksichtigt alle angegebenen Beispiele."}
{"result_6":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in der zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb einer Zeile nach Spalten absteigend. Hier ist eine mögliche Implementierung dieser Funktion in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $coordinates = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $coordinates[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen (aufsteigend) und Spalten (absteigend)\n    usort($coordinates, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // Sortieren nach Spalten absteigend\n        }\n        return $a[0] - $b[0]; // Sortieren nach Zeilen aufsteigend\n    });\n    \n    return $coordinates;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` und speichern die Koordinaten (`rowIndex`, `colIndex`) in einem Array `$coordinates`, wenn der Wert an dieser Stelle gleich `x` ist.\n2. **Sortieren der Koordinaten**: Wir verwenden die Funktion `usort` von PHP, um die Koordinaten zu sortieren:\n   - Zuerst nach der Zeile (`rowIndex`) aufsteigend.\n   - Wenn die Zeilen gleich sind, sortieren wir nach der Spalte (`colIndex`) absteigend.\n3. **Rückgabe**: Die sortierten Koordinaten werden zurückgegeben.\n\nDiese Implementierung berücksichtigt sowohl die Sortierung nach Zeilen als auch nach Spalten und liefert das gewünschte Ergebnis."}
{"result_7":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in der zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen sortiert werden und innerhalb einer Zeile nach Spalten in absteigender Reihenfolge. Hier ist die Implementierung dieser Funktion in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $result = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $result[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen und dann nach Spalten in absteigender Reihenfolge\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // Sortieren nach Spalten in absteigender Reihenfolge\n        }\n        return $a[0] - $b[0]; // Sortieren nach Zeilen in aufsteigender Reihenfolge\n    });\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` nach Zeilen und Spalten. Wenn wir den Wert `x` finden, fügen wir die Koordinate (Zeile, Spalte) zur Ergebnisliste hinzu.\n2. **Sortieren der Koordinaten**: Wir verwenden `usort`, um die Koordinaten zunächst nach Zeilen in aufsteigender Reihenfolge zu sortieren und dann innerhalb einer Zeile nach Spalten in absteigender Reihenfolge.\n3. **Rückgabe der Ergebnisse**: Die sortierte Liste von Tupeln wird zurückgegeben.\n\nDiese Implementierung berücksichtigt die Anforderungen und liefert das korrekte Ergebnis für die gegebenen Beispiele."}
{"result_8":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die die Zahlen `x` in einer zweidimensionalen Liste findet und deren Koordinaten zurückgibt. Die Koordinaten sollen nach Zeilen in aufsteigender Reihenfolge sortiert werden und innerhalb der Zeile nach Spalten in absteigender Reihenfolge.\n\nHier ist die Implementierung der Funktion `getRow` in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $coordinates = [];\n    \n    // Durchlaufen der Liste nach Zeilen und Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $coordinates[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortieren der Koordinaten nach Zeilen (aufsteigend) und Spalten (absteigend)\n    usort($coordinates, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // absteigende Reihenfolge nach Spalte\n        }\n        return $a[0] - $b[0]; // aufsteigende Reihenfolge nach Zeile\n    });\n    \n    return $coordinates;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Durchlaufen der Liste**: Wir durchlaufen die zweidimensionale Liste `lst` sowohl nach Zeilen als auch nach Spalten und speichern die Koordinaten von `x` in einem Array `$coordinates`.\n2. **Sortieren der Koordinaten**: Wir verwenden die Funktion `usort`, um die Koordinaten zuerst nach Zeilen (aufsteigend) und dann innerhalb der Zeile nach Spalten (absteigend) zu sortieren. Die Vergleichsfunktion in `usort` sorgt für diese Sortierung:\n   - Zuerst wird überprüft, ob die Zeilen gleich sind (`$a[0] == $b[0]`). Wenn ja, sortieren wir nach Spalten in absteigender Reihenfolge (`return $b[1] - $a[1];`).\n   - Wenn die Zeilen ungleich sind, sortieren wir nach Zeilen in aufsteigender Reihenfolge (`return $a[0] - $b[0];`).\n\nDiese Implementierung liefert das gewünschte Ergebnis und berücksichtigt die gegebene Struktur der zweidimensionalen Liste."}
{"result_9":" Um die Aufgabe zu lösen, müssen wir eine Funktion schreiben, die durch die verschachtelte Liste iteriert und nach den gesuchten Zahlen sucht. Wenn sie gefunden wird, werden die Koordinaten (Zeile, Spalte) in ein Tupel aufgenommen. Am Ende sortieren wir die Tupel zuerst nach der Zeile in aufsteigender Reihenfolge und dann innerhalb jeder Zeile nach der Spalte in absteigender Reihenfolge.\n\nHier ist die Implementierung der Funktion `getRow` in PHP:\n\n```php\nfunction getRow($lst, $x) {\n    $result = [];\n    \n    // Iteriere durch jede Zeile und ihre Spalten\n    foreach ($lst as $rowIndex => $row) {\n        foreach ($row as $colIndex => $value) {\n            if ($value == $x) {\n                $result[] = [$rowIndex, $colIndex];\n            }\n        }\n    }\n    \n    // Sortiere die Ergebnisse zuerst nach Zeile, dann nach Spalte\n    usort($result, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1]; // absteigend sortieren\n        }\n        return $a[0] - $b[0]; // aufsteigend sortieren\n    });\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)); // == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint_r(getRow([], 1)); // == []\n\nprint_r(getRow([[], [1], [1, 2, 3]], 3)); // == [(2, 2)]\n```\n\n### Erklärung:\n1. **Iteration über die Liste**: Wir iterieren durch jede Zeile und innerhalb der Zeile über jeden Wert.\n2. **Suche nach der Zahl `x`**: Wenn wir den Wert `x` finden, fügen wir das aktuelle Koordinatenpaar (Zeile, Spalte) zum Ergebnis hinzu.\n3. **Sortierung**: Wir verwenden die Funktion `usort`, um die Ergebnisse zuerst nach der Zeile in aufsteigender Reihenfolge und dann innerhalb jeder Zeile nach der Spalte in absteigender Reihenfolge zu sortieren.\n4. **Rückgabe**: Die sortierte Liste von Koordinaten wird zurückgegeben.\n\nDiese Lösung berücksichtigt die Anforderungen und liefert das korrekte Ergebnis für jedes der bereitgestellten Beispiele."}
