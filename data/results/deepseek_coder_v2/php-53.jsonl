{"result_0":" Um diese Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für diese Funktion:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste für die Ergebnisse\n    $result = [];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Konsonanten zählen\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (ctype_alpha($word[$i]) && !strpos('aeiouAEIOU', $word[$i])) {\n                $consonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten gleich n ist, das Wort zur Ergebnisliste hinzufügen\n        if ($consonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));            // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));             // [\"Uncle\"]\n```\n\n### Erklärung:\n1. **Leere Liste für die Ergebnisse**: Wir initialisieren eine leere Liste `$result`, in die wir die passenden Wörter einfügen werden.\n2. **Zeichenkette in Wörter aufteilen**: Mit `explode(' ', $s)` teilen wir die Eingabezeichenkette in einzelne Wörter auf.\n3. **Konsonanten zählen**: Für jedes Wort überprüfen wir, ob es Konsonanten enthält. Hierzu verwenden wir eine Schleife, die jeden Buchstaben des Worts prüft und überprüft, ob er ein Konsonant ist (`ctype_alpha` für Buchstaben und `!strpos('aeiouAEIOU', $word[$i])` um sicherzustellen, dass der Buchstabe kein Vokal ist).\n4. **Wörter zur Ergebnisliste hinzufügen**: Wenn die Anzahl der Konsonanten gleich `n` ist, fügen wir das Wort zur Ergebnisliste hinzu.\n5. **Rückgabe der Ergebnisliste**: Schließlich geben wir die Liste aller passenden Wörter zurück.\n\nDiese Funktion berücksichtigt, dass die Eingabezeichenkette nur Buchstaben und Leerzeichen enthält und gibt eine leere Liste zurück, falls die Zeichenkette leer ist oder keine Wörter mit der gewünschten Anzahl von Konsonanten gefunden werden."}
{"result_1":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste zum Speichern der passenden Wörter\n    $result = [];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (ctype_alpha($char) && !in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n                $consonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten mit n übereinstimmt, das Wort zur Ergebnisliste hinzufügen\n        if ($consonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Testfälle\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));            // [\"Uncle\"]\n```\n\n### Erklärung des Codes:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, die später die passenden Wörter enthalten wird.\n2. **Worttrennung**: Mit `explode(' ', $s)` teilen wir die Eingabezeichenkette in einzelne Wörter auf.\n3. **Konsonantenzählung**: Für jedes Wort zählen wir die Anzahl der Konsonanten (`a`, `e`, `i`, `o`, `u` werden ignoriert).\n4. **Filterung**: Wenn die Anzahl der Konsonanten mit `$n` übereinstimmt, fügen wir das Wort zur Ergebnisliste hinzu.\n5. **Rückgabe**: Schließlich geben wir die Liste der passenden Wörter zurück.\n\nDieser Code berücksichtigt sowohl Groß- als auch Kleinschreibung und ignoriert Vokale beim Zählen der Konsonanten."}
{"result_2":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für diese Funktion in PHP:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste zum Speichern der gefundenen Wörter\n    $result = [];\n    \n    // Array von Vokalen (a, e, i, o, u) und Kleinbuchstaben werden in Großbuchstaben umgewandelt\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    // Zeichenkette in Wörter aufteilen (aufgrund von Leerzeichen)\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $konsonantCount = 0;\n        \n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            \n            // Prüfen, ob der Buchstabe ein Konsonant ist (kein Vokal)\n            if (!in_array($char, $vowels)) {\n                $konsonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten mit dem gegebenen n übereinstimmt, das Wort zur Ergebnisliste hinzufügen\n        if ($konsonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispielaufrufe\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));            // [\"Uncle\"]\n```\n\n### Erklärung des Codes:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, um die gefundenen Wörter zu speichern.\n2. **Vokale definieren**: Wir definieren ein Array von Vokalen und wandeln alle Buchstaben in Kleinbuchstaben um, da wir nur Konsonanten zählen müssen.\n3. **Wörter aufteilen**: Die Eingabezeichenkette wird mit `explode(' ', $s)` in Wörter zerlegt.\n4. **Konsonantenzählung**: Für jedes Wort zählen wir die Konsonanten:\n   - Wir durchlaufen jeden Buchstaben des Worts und prüfen, ob er ein Konsonant ist (nicht in `$vowels` enthalten).\n5. **Ergebnisliste aktualisieren**: Wenn die Anzahl der Konsonanten mit dem gegebenen `n` übereinstimmt, fügen wir das Wort zur Ergebnisliste hinzu.\n6. **Rückgabe**: Die Funktion gibt die Liste der gefundenen Wörter zurück.\n\nDieser Code berücksichtigt alle Anforderungen und liefert das korrekte Ergebnis für jedes gegebene Beispiel."}
{"result_3":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste für die gefundenen Wörter\n    $result = [];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $konsonantenAnzahl = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (ctype_alpha($char) && !in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n                $konsonantenAnzahl++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten gleich n ist, das Wort zur Ergebnisliste hinzufügen\n        if ($konsonantenAnzahl == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2)); // []\nprint_r(selectWords(\"Hello world\", 4)); // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n```\n\n### Erklärung:\n1. **Explode ' '**: Die Eingabezeichenkette `$s` wird mit `explode(' ', $s)` in ein Array von Wörtern aufgeteilt.\n2. **Schleife über die Wörter**: Für jedes Wort im Array:\n   - **Konsonanten zählen**: Wir zählen die Anzahl der Konsonanten in dem Wort, indem wir jeden Buchstaben prüfen.\n   - **Buchstabe und kein Vokal**: Wir überprüfen, ob der Buchstabe ein Alphabetzeichen ist (`ctype_alpha`) und nicht ein Vokal (`!in_array($char, ['a', 'e', 'i', 'o', 'u'])`).\n3. **Übereinstimmung prüfen**: Wenn die Anzahl der Konsonanten gleich `$n` ist, fügen wir das Wort zur Ergebnisliste hinzu.\n4. **Rückgabe**: Die Funktion gibt die Liste der passenden Wörter zurück.\n\nDieser Code berücksichtigt die Groß- und Kleinschreibung nicht, da wir nur Buchstaben betrachten, die keine Vokale sind."}
{"result_4":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste zum Speichern der gefundenen Wörter\n    $result = [];\n    \n    // Array von Vokalen (a, e, i, o, u) und Kleinbuchstaben werden in Großbuchstaben umgewandelt\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    // Zeichenkette in Wörter aufteilen (aufgrund von Leerzeichen)\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $konsonantCount = 0;\n        \n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (!in_array($char, $vowels)) {\n                $konsonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten mit n übereinstimmt, das Wort zur Ergebnisliste hinzufügen\n        if ($konsonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));            // [\"Uncle\"]\n```\n\n### Erklärung:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, um die gefundenen Wörter zu speichern.\n2. **Vokale definieren**: Wir definieren ein Array von Vokalen und kleineren Buchstaben, die in Großbuchstaben umgewandelt werden sollen.\n3. **Wörter aufteilen**: Die Eingabezeichenkette wird mit `explode(' ', $s)` in Wörter zerlegt.\n4. **Konsonantenzählung**: Für jedes Wort wird die Anzahl der Konsonanten gezählt:\n   - Wir wandeln jeden Buchstaben des Worts in Kleinbuchstaben um.\n   - Wenn der Buchstabe kein Vokal ist (nicht in `$vowels` enthalten), erhöhen wir den Zähler für Konsonanten.\n5. **Ergebnisliste aktualisieren**: Wenn die Anzahl der Konsonanten mit `n` übereinstimmt, wird das Wort zur Ergebnisliste hinzugefügt.\n6. **Rückgabe**: Die Funktion gibt die Liste der gefundenen Wörter zurück.\n\nDieser Code berücksichtigt die gegebene Zeichenkette und sucht nach den Wörtern, die genau `n` Konsonanten enthalten."}
{"result_5":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste für die Ergebnisse\n    $result = [];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (ctype_alpha($char) && !in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n                $consonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten gleich n ist, das Wort zur Ergebnisliste hinzufügen\n        if ($consonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));            // [\"Uncle\"]\n```\n\n### Erklärung:\n1. **Leere Liste für die Ergebnisse**: Wir initialisieren eine leere Liste `$result`, in die wir die passenden Wörter einfügen werden.\n2. **Zeichenkette in Wörter aufteilen**: Mit `explode(' ', $s)` teilen wir die Eingabezeichenkette in einzelne Wörter auf.\n3. **Wort für Wort durchgehen**: Für jedes Wort überprüfen wir, ob es genau `n` Konsonanten enthält.\n   - Wir zählen die Anzahl der Konsonanten in einem Wort, indem wir jeden Buchstaben auf seine Art (Vokal oder Konsonant) überprüfen.\n   - Wenn das Wort genau `n` Konsonanten enthält, fügen wir es zur Ergebnisliste hinzu.\n4. **Ergebnis zurückgeben**: Am Ende der Schleife geben wir die Liste der passenden Wörter zurück.\n\nDiese Implementierung berücksichtigt, dass nur Buchstaben und Leerzeichen in der Eingabezeichenkette vorhanden sind und korrekt zwischen Vokalen und Konsonanten unterscheidet."}
{"result_6":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste zum Speichern der gefundenen Wörter\n    $result = [];\n    \n    // Array von Vokalen (a, e, i, o, u) und Kleinbuchstaben werden in Großbuchstaben umgewandelt\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    // Zeichenkette in Wörter aufteilen (aufgrund von Leerzeichen)\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $konsonantCount = 0;\n        \n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (!in_array($char, $vowels)) {\n                $konsonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten mit n übereinstimmt, das Wort zur Ergebnisliste hinzufügen\n        if ($konsonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2)); // []\nprint_r(selectWords(\"Hello world\", 4)); // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n```\n\n### Erklärung:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, um die gefundenen Wörter zu speichern.\n2. **Vokale definieren**: Wir definieren ein Array von Vokalen und kleinen Buchstaben, die in Großbuchstaben umgewandelt werden.\n3. **Wörter aufteilen**: Die Eingabezeichenkette wird mit `explode(' ', $s)` in Wörter zerlegt.\n4. **Konsonantenzählung**: Für jedes Wort wird die Anzahl der Konsonanten gezählt:\n   - Alle Buchstaben werden klein geschrieben (`strtolower`).\n   - Jeder Buchstabe, der nicht in dem Array von Vokalen ist, zählt als Konsonant.\n5. **Ergebnisliste aktualisieren**: Wenn die Anzahl der Konsonanten mit `n` übereinstimmt, wird das Wort zur Ergebnisliste hinzugefügt.\n6. **Rückgabe**: Die Liste der gefundenen Wörter wird zurückgegeben.\n\nDieser Code berücksichtigt die gegebene Zeichenkette und gibt eine Liste aller Wörter mit genau `n` Konsonanten zurück."}
{"result_7":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für diese Funktion in PHP:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste zum Speichern der gefundenen Wörter\n    $result = [];\n    \n    // Array von Vokalen (a, e, i, o, u) und Kleinbuchstaben werden in Großbuchstaben umgewandelt\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (!in_array($char, $vowels) && ctype_alpha($char)) {\n                $consonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten mit n übereinstimmt, das Wort zur Ergebnisliste hinzufügen\n        if ($consonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispielaufrufe\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));            // [\"Uncle\"]\n```\n\n### Erklärung des Codes:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, um die gefundenen Wörter zu speichern.\n2. **Vokale und Kleinbuchstaben**: Wir definieren ein Array von Vokalen (`$vowels`) und wandeln alle Buchstaben in der Zeichenkette in Kleinbuchstaben um, da wir nur die Konsonanten zählen möchten.\n3. **Wortaufteilung**: Die Eingabezeichenkette wird mit `explode(' ', $s)` in Wörter aufgeteilt.\n4. **Konsonantenzählung**: Für jedes Wort wird die Anzahl der Konsonanten gezählt:\n   - Wir durchlaufen jeden Buchstaben des Worts.\n   - Wenn der Buchstabe kein Vokal ist und ein Alphabetbuchstabe (`ctype_alpha`), zählen wir ihn als Konsonanten.\n5. **Ergebnisliste**: Wenn die Anzahl der gefundenen Konsonanten mit `$n` übereinstimmt, fügen wir das Wort zur Ergebnisliste hinzu.\n6. **Rückgabe**: Die Funktion gibt die Liste der passenden Wörter zurück.\n\nDieser Code berücksichtigt alle gegebenen Bedingungen und liefert das korrekte Ergebnis für die angegebene Aufgabenstellung."}
{"result_8":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste für die Ergebnisse\n    $result = [];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    // Durchlaufen der Wörter\n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $konsonantenCount = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (ctype_alpha($char) && !in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n                $konsonantenCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten mit n übereinstimmt, das Wort zur Ergebnisliste hinzufügen\n        if ($konsonantenCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));            // [\"Uncle\"]\n```\n\n### Erklärung des Codes:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, die die gefundenen Wörter mit genau `n` Konsonanten enthalten wird.\n2. **Wortaufteilung**: Mit `explode(' ', $s)` teilen wir die Eingabezeichenkette in einzelne Wörter auf.\n3. **Durchlaufen der Wörter**: Für jedes Wort überprüfen wir, ob es genau `n` Konsonanten enthält:\n   - Wir zählen die Anzahl der Konsonanten in einem Wort. Dazu wandeln wir das Wort in Kleinbuchstaben um und prüfen jeden Buchstaben, ob er ein Konsonant ist (also kein Vokal).\n   - Wenn die Anzahl der Konsonanten mit `n` übereinstimmt, fügen wir das Wort zur Ergebnisliste hinzu.\n4. **Rückgabe**: Am Ende geben wir die Liste der passenden Wörter zurück.\n\nDieser Code berücksichtigt sowohl Groß- als auch Kleinbuchstaben und ignoriert Vokale beim Zählen der Konsonanten."}
{"result_9":" Um die Aufgabe zu lösen, müssen wir eine Funktion implementieren, die Wörter aus einer gegebenen Zeichenkette extrahiert und zurückgibt, die genau `n` Konsonanten enthalten. Hier ist der vollständige Code für die Implementierung:\n\n```php\nfunction selectWords($s, $n) {\n    // Leere Liste für die Ergebnisse\n    $result = [];\n    \n    // Zeichenkette in Wörter aufteilen\n    $words = explode(' ', $s);\n    \n    foreach ($words as $word) {\n        // Anzahl der Konsonanten im aktuellen Wort zählen\n        $consonantCount = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            $char = strtolower($word[$i]);\n            if (ctype_alpha($char) && !in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n                $consonantCount++;\n            }\n        }\n        \n        // Wenn die Anzahl der Konsonanten gleich n ist, das Wort zur Ergebnisliste hinzufügen\n        if ($consonantCount == $n) {\n            $result[] = $word;\n        }\n    }\n    \n    return $result;\n}\n\n// Beispiele\nprint_r(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nprint_r(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\", \"lamb\"]\nprint_r(selectWords(\"simple white space\", 2));    // []\nprint_r(selectWords(\"Hello world\", 4));           // [\"world\"]\nprint_r(selectWords(\"Uncle sam\", 3));             // [\"Uncle\"]\n```\n\n### Erklärung:\n1. **Initialisierung**: Wir initialisieren eine leere Liste `$result`, die die gefundenen Wörter enthalten wird.\n2. **Wortaufteilung**: Die Eingabezeichenkette `$s` wird mit `explode(' ', $s)` in einzelne Wörter aufgeteilt.\n3. **Konsonantenzählung**: Für jedes Wort wird die Anzahl der Konsonanten gezählt:\n   - Alle Buchstaben werden klein geschrieben (`strtolower($word[$i]`)).\n   - Es wird überprüft, ob der Buchstabe ein Alphabetbuchstabe ist (`ctype_alpha($char)`) und kein Vokal (`!in_array($char, ['a', 'e', 'i', 'o', 'u'])`).\n4. **Ergebnisliste**: Wenn die Anzahl der Konsonanten gleich `$n` ist, wird das Wort zur Ergebnisliste hinzugefügt.\n5. **Rückgabe**: Die Liste der passenden Wörter wird zurückgegeben.\n\nDieser Code berücksichtigt die gegebene Zeichenkette und gibt die gewünschte Auswahl von Wörtern mit genau `n` Konsonanten zurück."}
