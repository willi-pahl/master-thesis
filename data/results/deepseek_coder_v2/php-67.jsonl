{"result_0":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Benutze die usort-Funktion, um benutzerdefinierte Vergleiche zu ermöglichen\n    usort($nums, function($a, $b) {\n        // Berechne die Summe der Ziffern für jede Zahl\n        $sumA = array_sum(str_split(abs($a)));\n        $sumB = array_sum(str_split(abs($b)));\n        \n        // Wenn die Summen gleich sind, sortiere nach dem Index in der Originalliste\n        if ($sumA == $sumB) {\n            return 0;\n        } else {\n            return ($sumA < $sumB) ? -1 : 1;\n        }\n    });\n    \n    return $nums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **Benutze `usort`**: Wir verwenden die `usort`-Funktion, um eine benutzerdefinierte Sortierung zu ermöglichen. Die `usort`-Funktion nimmt ein Array und einen Vergleichsfunktor als Argumente.\n2. **Berechne die Summe der Ziffern**: Für jeden Wert in der Liste berechnen wir die Summe seiner Ziffern. Dazu wandeln wir die Zahl in eine Zeichenkette um (`str_split(abs($num))`), teilen sie in einzelne Ziffern auf und summieren diese (`array_sum`).\n3. **Vergleiche die Summen**: Wenn die Summen der Ziffern gleich sind, behalten wir die ursprüngliche Reihenfolge bei (Standardverhalten von `usort`, da es 0 zurückgibt). Andernfalls sortieren wir die Zahlen basierend auf ihrer Summe der Ziffern.\n4. **Rückgabe des sortierten Arrays**: Nachdem das Array sortiert wurde, geben wir es zurück.\n\nDiese Funktion sollte für die gegebene Aufgabenstellung funktionieren und die Zahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortieren."}
{"result_1":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines assoziativen Arrays, das die Zahl und ihre Summe der Ziffern enthält\n    $numsWithSums = array_map(function($num) {\n        return ['num' => $num, 'sum' => sumOfDigits($num)];\n    }, $nums);\n\n    // Sortieren des Arrays nach der Summe der Ziffern und dann nach dem Index, falls die Summen gleich sind\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return array_search($a['num'], $nums) - array_search($b['num'], $nums);\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem assoziativen Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, geben wir eine leere Liste zurück.\n2. **Summe der Ziffern berechnen**: Wir definieren eine Hilfsfunktion `sumOfDigits`, die die Summe der Ziffern einer Zahl berechnet.\n3. **Assoziatives Array erstellen**: Wir erstellen ein assoziatives Array, das jede Zahl und ihre Summe der Ziffern enthält.\n4. **Sortieren**: Wir sortieren dieses assoziative Array zuerst nach der Summe der Ziffern (`sum`) und dann nach dem Index in der Original"}
{"result_2":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays, das die Zahlen und ihre Summe der Ziffern enthält\n    $numsWithSum = array_map(function($num) {\n        return ['num' => $num, 'sum' => sumOfDigits($num)];\n    }, $nums);\n\n    // Sortieren des Arrays nach der Summe der Ziffern und dann nach dem Index, falls die Summen gleich sind\n    usort($numsWithSum, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return array_search($a['num'], $nums) - array_search($b['num'], $nums);\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSum);\n\n    return $sortedNums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\nDiese Funktion arbeitet wie folgt:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, wird eine leere Liste zurückgegeben.\n2. **Summe der Ziffern berechnen**: Eine Hilfsfunktion `sumOfDigits` wird verwendet, um die Summe der Ziffern einer Zahl zu berechnen.\n3. **Array mit Zahlen und ihrer Summe**: Ein Array wird erstellt, das die Zahlen und ihre Summen der Ziffern enthält.\n4. **Sortieren**: Das Array wird nach der Summe der Ziffern sortiert. Wenn zwei Zahlen dieselbe Summe haben, wird sie nach dem Index in der Original"}
{"result_3":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays von Zahlen und ihrer Summe der Ziffern\n    $numsWithSums = [];\n    foreach ($nums as $index => $num) {\n        $numsWithSums[] = ['num' => $num, 'sum' => sumOfDigits($num)];\n    }\n\n    // Sortieren der Zahlen nach der Summe ihrer Ziffern und dann nach dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return $a['index'] - $b['index'];\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Beispieltests\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\nDiese Funktion arbeitet wie folgt:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, geben wir eine leere Liste zurück.\n2. **Summe der Ziffern berechnen**: Wir definieren eine Hilfsfunktion `sumOfDigits`, um die Summe der Ziffern einer Zahl zu berechnen.\n3. **Array mit Zahlen und ihrer Summe**: Wir erstellen ein Array `$numsWithSums`, das jede Zahl und deren Summe der Ziffern enthält.\n4. **Sortieren**: Wir verwenden `usort` um die Zahlen nach der Summe ihrer Ziffern zu sortieren. Wenn zwei Zahlen dieselbe Summe haben, wird auf den Index zurückgegriffen.\n5. **Ergebnis extrahieren**: Schließlich extrahieren wir die sortierten Zahlen aus dem Array und geben sie zurück.\n\nDiese Lösung ist flexibel und kann mit verschiedenen Eingabedaten umgehen, einschließlich negativer Zahlen und einer leeren Liste."}
{"result_4":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays, das die Zahlen und ihre Summe der Ziffern enthält\n    $numsWithSums = array_map(function($num) {\n        return ['num' => $num, 'sum' => sumOfDigits($num)];\n    }, $nums);\n\n    // Sortieren des Arrays nach der Summe der Ziffern und dann nach dem Index, falls die Summen gleich sind\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return array_search($a['num'], $nums) - array_search($b['num'], $nums);\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n```\n\n### Erklärung:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, geben wir eine leere Liste zurück.\n2. **Summe der Ziffern berechnen**: Wir definieren eine Hilfsfunktion `sumOfDigits`, die die Summe der Ziffern einer Zahl berechnet.\n3. **Array mit Zahlen und ihrer Summe**: Wir erstellen ein Array, das die Zahlen und ihre Summe der Ziffern enthält.\n4. **Sortieren**: Wir sortieren dieses Array zuerst nach der Summe der Ziffern (`sum`) und dann nach dem Index in der Originalliste (`num`), falls die Summen gleich sind.\n5. **Ergebnis extrahieren**: Schließlich extrahieren wir die sortierten Zahlen aus dem Array.\n\nDiese Funktion sollte nun die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortieren und bei gleicher Summe den Index beibehalten."}
{"result_5":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines assoziativen Arrays, das die Zahl und ihre Summe der Ziffern enthält\n    $numsWithSums = array_map(function($num) {\n        return ['num' => $num, 'sum' => sumOfDigits($num)];\n    }, $nums);\n\n    // Sortieren des Arrays nach der Summe der Ziffern und dann nach dem Index, falls die Summen gleich sind\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return array_search($a['num'], $nums) - array_search($b['num'], $nums);\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem assoziativen Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, geben wir eine leere Liste zurück.\n2. **Summe der Ziffern berechnen**: Wir definieren eine Hilfsfunktion `sumOfDigits`, die die Summe der Ziffern einer Zahl berechnet.\n3. **Assoziatives Array erstellen**: Wir erstellen ein assoziiertes Array, das jede Zahl und ihre Summe der Ziffern enthält.\n4. **Sortieren**: Wir sortieren dieses assoziative Array zuerst nach der Summe der Ziffern (`sum`) und dann nach dem Index in der Originalliste (`num`), falls die Summen gleich sind, mit `usort`.\n5. **Ergebnis extrahieren**: Schließlich extrahieren wir die sortierten Zahlen aus dem assoziativen Array zurück und geben sie zurück.\n\nDiese Lösung ist effizient und berücksichtigt sowohl die Sortierung nach der Summe der Ziffern als auch den Fall, dass mehrere Zahlen die gleiche Summe haben."}
{"result_6":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays, das die Zahlen und ihre Summe der Ziffern enthält\n    $numsWithSums = [];\n    foreach ($nums as $index => $num) {\n        $numsWithSums[] = ['num' => $num, 'sum' => sumOfDigits($num)];\n    }\n\n    // Sortieren der Zahlen basierend auf der Summe ihrer Ziffern und dann nach dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return $a['index'] - $b['index'];\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\nDiese Funktion erstellt ein Array von Zahlen und ihrer Summe der Ziffern. Dann sortiert sie dieses Array basierend auf der Summe der Ziffern, wobei gleiche Summen nach dem Index sortiert werden. Schließlich extrahiert sie die sortierten Zahlen aus dem Array und gibt das Ergebnis zurück."}
{"result_7":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = intval($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays, das die Zahlen und ihre Summe der Ziffern enthält\n    $numsWithSums = [];\n    foreach ($nums as $index => $num) {\n        $numsWithSums[] = ['num' => $num, 'sum' => sumOfDigits($num)];\n    }\n\n    // Sortieren der Zahlen basierend auf der Summe ihrer Ziffern und dann nach dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return $a['index'] - $b['index'];\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\nDiese Funktion arbeitet wie folgt:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, wird eine leere Liste zurückgegeben.\n2. **Summe der Ziffern berechnen**: Eine Hilfsfunktion `sumOfDigits` wird verwendet, um die Summe der Ziffern einer Zahl zu berechnen.\n3. **Array mit Zahlen und ihrer Summe**: Ein Array `$numsWithSums` wird erstellt, das die Zahlen und deren Summe der Ziffern enthält.\n4. **Sortieren**: Die Zahlen werden nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Summe haben, wird auf den Index zurückgegriffen.\n5. **Ergebnis extrahieren**: Das sortierte Array wird aus dem Array mit Zahlen und deren Summe der Ziffern extrahiert.\n\nDiese Lösung ist flexibel und kann auch für größere oder komplexere Listen verwendet werden."}
{"result_8":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zum Berechnen der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = floor($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines assoziativen Arrays, das die Zahl und ihre Summe der Ziffern enthält\n    $numsWithSums = [];\n    foreach ($nums as $index => $num) {\n        $numsWithSums[$index] = ['num' => $num, 'sum' => sumOfDigits($num)];\n    }\n\n    // Sortieren der Zahlen basierend auf der Summe ihrer Ziffern und dann nach dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return $a['index'] - $b['index'];\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem assoziativen Array\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, geben wir eine leere Liste zurück.\n2. **Summe der Ziffern berechnen**: Wir definieren eine Hilfsfunktion `sumOfDigits`, die die Summe der Ziffern einer Zahl berechnet.\n3. **Assoziatives Array erstellen**: Wir erstellen ein assoziatives Array `$numsWithSums`, das die Zahlen und ihre Summen der Ziffern enthält.\n4. **Sortieren**: Wir verwenden `usort` mit einer benutzerdefinierten Vergleichsfunktion, um die Zahlen basierend auf der Summe ihrer Ziffern zu sortieren. Wenn zwei Zahlen die gleiche Summe haben, wird nach dem Index sortiert.\n5. **Ergebnis extrahieren**: Wir verwenden `array_map`, um die sortierten Zahlen aus dem assoziativen Array zu extrahieren und zurückzugeben.\n\nDiese Lösung ist flexibel und kann mit verschiedenen Eingabedaten umgehen, einschließlich negativer Zahlen und leerer Listen."}
{"result_9":" Um die gegebene Liste von Ganzzahlen nach der Summe ihrer Ziffern zu sortieren, können wir eine Funktion schreiben, die dies tut. Hier ist ein möglicher Lösungsvorschlag in PHP:\n\n```php\nfunction orderByPoints($nums) {\n    // Wenn die Liste leer ist, geben wir sie zurück\n    if (empty($nums)) {\n        return [];\n    }\n\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        $absNum = abs($num);\n        while ($absNum > 0) {\n            $sum += $absNum % 10;\n            $absNum = intval($absNum / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit den Zahlen und ihren Summen der Ziffern\n    $numsWithSums = [];\n    foreach ($nums as $index => $num) {\n        $numsWithSums[] = ['num' => $num, 'sum' => sumOfDigits($num)];\n    }\n\n    // Sortieren des Arrays nach der Summe der Ziffern und dann nach dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return $a['index'] - $b['index'];\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Extrahieren der sortierten Zahlen aus dem Array mit Summen\n    $sortedNums = array_map(function($item) {\n        return $item['num'];\n    }, $numsWithSums);\n\n    return $sortedNums;\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n```\n\n### Erklärung:\n1. **Leere Liste**: Wenn die Eingabeliste leer ist, geben wir eine leere Liste zurück.\n2. **Summe der Ziffern berechnen**: Wir definieren eine Hilfsfunktion `sumOfDigits`, die die Summe der Ziffern einer Zahl berechnet.\n3. **Array mit Zahlen und ihren Summen erstellen**: Wir erstellen ein Array `$numsWithSums`, das die Zahlen und deren Summen der Ziffern enthält.\n4. **Sortieren**: Wir verwenden `usort` um das Array nach der Summe der Ziffern zu sortieren. Wenn zwei Zahlen die gleiche Summe haben, wird auf den Index zurückgegriffen.\n5. **Ergebnis extrahieren**: Wir extrahieren die sortierten Zahlen aus dem Array mit den Summen und geben das Ergebnis zurück.\n\nDiese Lösung ist flexibel und kann auch für größere oder komplexere Listen verwendet werden."}
