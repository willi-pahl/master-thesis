{"result_0":"<?php\n\n/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor($n){\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i != 0) {\n            $i += 1;\n        } else {\n            $n = (int)($n / $i);\n        }\n    }\n    return $n;\n}\n\n// Testfälle\necho largestPrimeFactor(13195) . \"\n\"; // Ausgabe: 29\necho largestPrimeFactor(2048) . \"\n\"; // Ausgabe: 2"}
{"result_1":" /**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor($n){\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i != 0) {\n            $i += 1;\n        } else {\n            $n = (int)($n / $i);\n        }\n    }\n    return $n;\n}"}
{"result_2":"// PHP-Programm zur Ermittlung des größten Primfaktors eines gegebenen ganzzahligen Wertes n.\n /**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor($n){\n    // Iteriere über all ganzzahligen Werte von i, wobei i eine Faktoren von n sein muss:\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // Wenn n durch i geteilt wird:\n        while ($n % $i == 0) {\n            $n /= $i;\n        }\n    }\n\n    return $n;\n\n}"}
{"result_3":"// Funktion zum finden des größten gemeinsamen Teilers (GCD) zweier Zahlen\nfunction gcd($a, $b) {\n    return ($a % $b) ? gcd($b,$a % $b) : $b;\n}\n\nfunction largestPrimeFactor($n){\n    // Faktorisierung der Zahl in Primzahlen\n    for ($i = 2; $i * $i <= $n; $i++){\n        while ($n % $i == 0){\n            $n /= $i;\n        }\n    }\n\n    // Wenn die Zahl immer noch nicht 1 ist, dann ist sie eine Primzahl und der größte Faktor\n    if($n > 1) {\n        return $n;\n    } else {\n        return 2; // Gibt es keine Primfaktoren, dann ist die Zahl selbst ein Primfaktor von Größe 2\n    }\n}"}
{"result_4":"<?php\n\n/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor($n){\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i != 0) {\n            $i += 1;\n        } else {\n            $n = (int) ($n / $i);\n        }\n    }\n\n    return $n;\n}\n\nprint(largestPrimeFactor(13195)); // Ausgabe: 29\nprint(\"\n\");\nprint(largestPrimeFactor(2048)); // Ausgabe: 2\n\n?>"}
{"result_5":"<?php\n\n/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor($n){\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i != 0) {\n            $i += 1;\n        } else {\n            $n = (int)($n / $i);\n        }\n    }\n    return $n;\n}\n\n// Testfall\necho largestPrimeFactor(13195) . \"\n\"; // Ausgabe: 29\necho largestPrimeFactor(2048) . \"\n\";   // Ausgabe: 2"}
{"result_6":"/**\n * Diese Funktion findet den größten Primfaktor einer Zahl $n.\n *\n * @param int $n Die Zahl, für die der größte Primfaktor gefunden werden soll. Es wird angenommen, dass $n > 1 und keine Primzahl ist.\n *\n * @return int Der größte Primfaktor von $n.\n */\nfunction largestPrimeFactor($n) {\n    // Beginne mit der Division durch 2\n    while ($n % 2 == 0) {\n        // Wenn die Zahl gerade ist, teile sie durch 2 und halte den Rest im Wert von n.\n        $n = (int)($n / 2);\n    }\n\n    // Teile die Zahl durch alle ungeraden Zahlen auf\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $n = (int)($n / $i);\n        }\n    }\n\n    // Wenn die Zahl noch nicht durch eine beliebige Zahl geteilt wurde, ist es selbst ein Primfaktor.\n    return $n;\n}\n\n// Test das Programm\necho largestPrimeFactor(13195);  // Ausgabe: 29\necho \"\n\";\necho largestPrimeFactor(2048);   // Ausgabe: 2"}
{"result_7":"/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n *\n * @param int $n Einzahl zu finden, deren Primfaktoren aufgelistet werden sollen\n * @return int Der größte Primfaktor von n\n */\nfunction largestPrimeFactor($n){\n    // Wir beginnen mit 2, dem kleinsten Primzahlanfang, und testen ob es ein Faktor ist\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n            // Wenn es ein Faktor ist, teilen wir es in zwei Teile auf\n            while ($n % $i == 0) {\n                $n /= $i;\n            }\n            return $i; // Da es der kleinste Primfaktor war, der gefunden wurde\n        }\n    }\n\n    // Wenn keine Faktoren gefunden wurden, ist die Zahl selbst eine Primzahl und wir können sie zurückgeben\n    if ($n > 1) {\n        return $n;\n    } else {\n        throw new Exception('Die Eingabe kann nicht in Primfaktoren zerlegt werden');\n    }\n}"}
{"result_8":" /**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * Gib den größten Primfaktor von n zurück. Gehe davon aus, dass n > 1 und keine Primzahl ist.\n * >>> largest_prime_factor(13195)\n * 29\n * >>> largest_prime_factor(2048)\n * 2\n *\n */\nfunction largestPrimeFactor($n){\n    // Implementiere eine Schleife, um alle Zahlen von sqrt(n) nach unten durchzugehen\n    for ($i = intval(sqrt($n)); $i > 1; $i--) {\n        // Wenn n geteilt durch i ohne Rest geht, ist i ein Primfaktor\n        if ($n % $i == 0) {\n            return $i;\n        }\n    }\n\n    // Wenn keine Primfaktoren gefunden werden, bedeutet dies, dass n eine Primzahl ist\n    // In diesem Fall wird n selbst als größter Primfaktor zurückgegeben\n    return $n;\n}\n\n// Test die Funktion\necho largestPrimeFactor(13195) . \"\n\";  // Ausgabe: 29\necho largestPrimeFactor(2048) . \"\n\";   // Ausgabe: 2"}
{"result_9":"// Funktion to check if a number is prime\nfunction isPrime($num) {\n    for ($i = 2; $i < sqrt($num) + 1; $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Funktion zur Ermittlung des größten Primfaktors\nfunction largestPrimeFactor($n){\n    for ($i = $n; $i > 1; $i--) {\n        if ($n % $i == 0 && isPrime($i)) {\n            return $i;\n        }\n    }\n    return null; // Rückgabewert wenn kein Primfaktor gefunden wurde\n}\n\n// Testfall\necho largestPrimeFactor(13195); // Ausgabe: 29\necho \"\n\";\necho largestPrimeFactor(2048); // Ausgabe: 2"}
