{"result_0":"<?php\n\n/**\n * Dieses Programm leert alle Brunnen in einem rechteckigen Gitter mit Wasser aus,\n * indem es die entsprechenden Eimer verwendet.\n *\n * @param array $grid Ein rechteckiges Gitter von Brunnen, wobei 1 darstellt, dass ein Brunnen Wasser enthält\n * @param int   $capacity Die Kapazität des Eimers\n *\n * @return int Die Anzahl der Malen, die das Eimer verwenden mussten, um alle Brunnen leer zu machen\n */\nfunction maxFill($grid, $capacity) {\n    // Länge einer Zeile in der Grille\n    $rowLength = count($grid[0]);\n\n    // Gesamtanzahl der zu leeren Brunnen\n    $count = 0;\n\n    // Durch jede Zeile gehen\n    foreach ($grid as $i => $line) {\n        // Durch jeden Brunnen in der Zeile gehen und die Anzahl der zu leeren Brunnen erhöhen, wenn der Eimer nicht voll ist\n        foreach ($line as $j => $cell) {\n            if ($cell === 1 && (isset($grid[$i-1][$j]) || isset($grid[$i+1][$j])) && ((isset($grid[$i][$j-1]) && $grid[$i][$j-1] === 1) || (isset($grid[$i][$j+1]) && $grid[$i][$j+1] === 1))) {\n                if ($capacity > 0) {\n                    $count++;\n                    $capacity--;\n                } else {\n                    return -1; //Keine ausreichende Kapazität\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiele\n$grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\necho maxFill($grid, 1) . \"\n\"; // Ausgabe: 6\n\n$grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\necho maxFill($grid, 2) . \"\n\"; // Ausgabe: 5\n\n$grid = [[0,0,0], [0,0,0]];\necho maxFill($grid, 5) . \"\n\"; // Ausgabe: 0"}
{"result_1":" /**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * * Sie erhalten ein rechteckiges Gitter von Brunnen. Jede Zeile repräsentiert einen einzelnen Brunnen, und jede 1 in einer Zeile repräsentiert eine einzelne Einheit Wasser. Jeder Brunnen hat einen entsprechenden Eimer, der verwendet werden kann, um Wasser daraus zu extrahieren, und alle Eimer haben die gleiche Kapazität. Ihre Aufgabe ist es, die Eimer zu verwenden, um die Brunnen zu leeren. Geben Sie die Anzahl der Male aus, die Sie die Eimer senken müssen.\n * \n * Beispiel 1:\n *     Eingabe:\n *         grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         Eimerkapazität: 1\n *     Ausgabe: 6\n * \n * Beispiel 2:\n *     Eingabe:\n *         grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         Eimerkapazität: 2\n *     Ausgabe: 5\n * \n * Beispiel 3:\n *     Eingabe:\n *         grid: [[0,0,0], [0,0,0]]\n *         Eimerkapazität: 5\n *     Ausgabe: 0\n * \n * Einschränkungen:\n *     * alle Brunnen haben die gleiche Länge\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= Kapazität <= 10\n */\nfunction maxFill($grid, $capacity) {\n    // Länge des Rechtecks (Zeilen)\n    $m = count($grid);\n    \n    // Breite des Rechtecks (Spalten)\n    $n = count($grid[0]);\n    \n    // Gesamtwasser im Rechteck\n    $totalWater = 0;\n    for ($i = 0; $i < $m; ++$i) {\n        for ($j = 0; $j < $n; ++$j) {\n            if ($grid[$i][$j] == 1) {\n                $totalWater += 1;\n            }\n        }\n    }\n    \n    // Mindestanzahl der Füllungen\n    $minFillings = 0;\n    while ($totalWater > 0) {\n        for ($i = 0; $i < $m; ++$i) {\n            if ($grid[$i][0] == 1) { // Erster Brunnen\n                $capacity -= 1; // Eimer füllen\n                if ($capacity <= 0) break;\n                --$totalWater; // Wasser entfernen\n                $grid[$i][0] = 0;\n            }\n        }\n        \n        for ($j = 1; $j < $n; ++$j) { // Alle anderen Brunnen\n            for ($i = 0; $i < $m; ++$i) {\n                if ($grid[$i][$j] == 1 && $capacity > 0) {\n                    --$totalWater;\n                    $grid[$i][$j] = 0;\n                    break;\n                }\n            }\n        }\n        \n        if ($capacity <= 0) break;\n    }\n    \n    return $minFillings;\n}\n\n// Beispiele\nprint(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . \"\n\"); // Ausgabe: 6\nprint(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . \"\n\"); // Ausgabe: 5\nprint(maxFill([[0,0,0], [0,0,0]], 5) . \"\n\"); // Ausgabe: 0"}
{"result_2":"<?php\n\n/**\n * Diese Funktion berechnet die Anzahl der Male, die benötigt werden, um ein rechteckiges Gitter von Brunnen zu leeren.\n * Jede Zeile repräsentiert einen einzelnen Brunnen, und jede 1 in einer Zeile repräsentiert eine einzelne Einheit Wasser.\n * Alle Eimer haben die gleiche Kapazität und werden verwendet, um Wasser daraus zu extrahieren.\n *\n * @param array $grid Die rechteckige Gitter von Brunnen.\n * @param int $capacity Die Kapazität des Eimers.\n * @return int Die Anzahl der Male, die benötigt werden, um das Gitter zu leeren.\n */\nfunction maxFill($grid, $capacity) {\n    // Reihen und Spalten des Gitters ermitteln\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    \n    // Matrizen für die Anzahl der 1's in jeder Reihe und Spalte erstellen\n    $rowCounts = array_fill(0, $rows, 0);\n    $colCounts = array_fill(0, $cols, 0);\n    \n    foreach ($grid as $i => $row) {\n        for ($j = 0; $j < count($row); $j++) {\n            if ($row[$j] == 1) {\n                $rowCounts[$i]++;\n                $colCounts[$j]++;\n            }\n        }\n    }\n    \n    // Eimer benötigen für jede Zeile\n    $counters = array_fill(0, $rows, 0);\n    for ($r = 0; $r < count($grid); $r++) {\n        if ($rowCounts[$r] > 0) {\n            $k = ceil($rowCounts[$r] / $capacity);\n            $counters[$r] += $k;\n        }\n    }\n    \n    // Eimer benötigen für jede Spalte\n    for ($c = 0; $c < count($grid[0]); $c++) {\n        if ($colCounts[$c] > 0) {\n            $min = min(array_column($counters, '0'));\n            $k = ceil($colCounts[$c] / $capacity);\n            if (in_array($k, $counters)) {\n                return array_sum($counters);\n            } else {\n                return $min + ($k - $min) * count($grid[0]);\n            }\n        }\n    }\n    \n    // Wenn alle Brunnen leer sind, benötigen wir keine Eimer\n    return 0;\n}"}
{"result_3":"<?php\n\n/**\n * This function calculates the minimum number of times you need to fill a bucket to drain all wells in a grid.\n *\n * @param array $grid A 2D array representing the grid of wells, where each 1 represents a well with water.\n * @param int $capacity The capacity of the bucket.\n *\n * @return int The minimum number of times you need to fill the bucket to drain all wells.\n */\nfunction maxFill($grid, $capacity) {\n    // Calculate the total number of wells\n    $totalWells = 0;\n    foreach ($grid as $row) {\n        $totalWells += count($row);\n    }\n\n    // Initialize the result with the maximum possible value\n    $result = INF;\n\n    // Try all possible bucket capacities from 1 to 100 (you can adjust this range)\n    for ($i = 1; $i <= 100; $i++) {\n        if ($capacity == $i) continue;\n        $tempResult = 0;\n        foreach ($grid as $row) {\n            // Calculate the minimum number of times you need to fill the bucket for each row\n            $rowWells = count($row);\n            $fillCount = ceil($rowWells / $i);\n            // Add the fill counts for all wells in the row\n            $tempResult += $fillCount * $rowWells;\n        }\n        // Update the result with the minimum value found so far\n        if ($tempResult < $result) {\n            $result = $tempResult;\n        }\n    }\n\n    return $result;\n}\n\n// Example usage:\n$grid1 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\necho maxFill($grid1, 1) . \"\n\"; // Output: 6\n\n$grid2 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\necho maxFill($grid2, 2) . \"\n\"; // Output: 5\n\n$grid3 = [[0, 0, 0], [0, 0, 0]];\necho maxFill($grid3, 5) . \"\n\"; // Output: 0"}
{"result_4":" /**\n * Füge die erforderliche Logik zur Lösung des Problems hinzu.\n */\nfunction maxFill($grid, $capacity) {\n    $rows = count($grid);\n    $columns = count($grid[0]);\n    \n    // Erstelle eine neue 2D Matrix mit der gleichen Länge wie die gegebene Gittergröße,\n    // aber doppelt so lange. \n    $newGrid = array_fill(0, $rows*2, array_fill(0, $columns*2, 0));\n    \n    // Iteriere über jede Zelle des Gitters und verfüge eine Eimer.\n    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n            // Wenn die Zelle Wasser enthält, füge sie in der neuen Matrix hinzu.\n            if ($grid[$i][$j] == 1) {\n                $newGrid[$i*2][$j*2 + $columns - 1]++;\n                $newGrid[$rows + $i*2][$j*2 + $columns - 1]--;\n            }\n        }\n    }\n    \n    // Verwende die Eimer, um Wasser auszutragen.\n    for ($k = 0; $k < count($newGrid); $k++) {\n        while (count($newGrid[$k]) > 0 && $capacity == 0) {\n            array_pop($newGrid[$k]);\n        }\n        \n        if ($newGrid[$k][0] != 0 && $newGrid[$rows + $k][count($newGrid[$k]) - 1] != 0) {\n            // Füge Wasser von einer Zelle in die andere hinzu, um die Eimer zu verwenden\n            $newGrid[$k][count($newGrid[$k]) - 1] -= $capacity;\n            $newGrid[$rows + $k][count($newGrid[$k]) - 1] += $capacity;\n\n            // Füge die verbleibende Kapazität in die neue Matrix hinzu.\n            for ($index = count($newGrid[$k]) - 1; $index >= 0 && $newGrid[$k][$index] == $capacity; $index--) {\n                array_pop($newGrid[$k]);\n            }\n\n            if (count($newGrid[$rows + $k]) > 0 && count($newGrid[$k]) > 0) {\n                for ($index = count($newGrid[$k]) - 1; $index >= 0 && $newGrid[$rows+$k][$index] == $capacity; $index--) {\n                    array_pop($newGrid[$rows + $k]);\n                }\n            }\n\n        } else if (count($newGrid[$k]) != 0) {\n            // Füge Wasser von einer Zelle in die andere hinzu, um den Eimer zu verwenden\n            for ($index = count($newGrid[$k]) - 1; $index > 0 && $newGrid[$k][$index] == $capacity; $index--) {\n                array_pop($newGrid[$k]);\n            }\n\n            if (count($newGrid[$rows + $k]) != 0) {\n                for ($index = count($newGrid[$k]) - 1; $index >= 0 && $newGrid[$rows+$k][$index] == $capacity; $index--) {\n                    array_pop($newGrid[$rows + $k]);\n                }\n            }\n\n        } else if (count($newGrid[$rows + $k]) != 0) {\n            // Füge Wasser von einer Zelle in die andere hinzu, um den Eimer zu verwenden\n            for ($index = count($newGrid[$rows+$k]) - 1; $index > 0 && $newGrid[$rows+$k][$index] == $capacity; $index--) {\n                array_pop($newGrid[$rows + $k]);\n            }\n        }\n\n    }\n\n    // Zählen Sie die Gesamtzahl der Malen, die verwendet wurden.\n    $anzahlMal = 0;\n    for ($i = 0; $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]); $j++) {\n            if ($newGrid[$i*2][$j*2] != 0) {\n                $anzahlMal++;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return $anzahlMal;\n\n}\n\n// Test der Funktion mit den gegebenen Beispiel-Tests\nprint(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . \"\n\");  // Erwarteter Wert: 6\nprint(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . \"\n\");  // Erwarteter Wert: 5\nprint(maxFill([[0,0,0], [0,0,0]], 5) . \"\n\");  // Erwarteter Wert: 0"}
{"result_5":" /**\n * Gibt die Anzahl der Malen zurück, in denen die Eimer verwendet werden müssen, um das Gitter zu leeren.\n * @param grid Ein zweidimensionales Array mit den Zeilen und Spalten des Gitters\n * @param capacity Die Kapazität des Eimers\n * @return Die Anzahl der Malen, in denen die Eimer verwendet werden müssen\n */\nfunction maxFill($grid, $capacity){\n    // Erstelle eine Kopie der Größe des Gitters\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $emptyRows = array_fill(0, $rows, 0);\n    for ($i = 0; $i < $rows; $i++) {\n        $emptyRows[$i] += array_sum(array_slice($grid[$i], 1));\n    }\n\n    // Wenn alle Brunnen bereits gefüllt sind, ist die Anzahl der Malen 0\n    if ($emptyRows[0] == 0) return 0;\n\n    // Bestimme den Anfangspunkt für die Ausfüllung\n    $startRow = array_search($emptyRows[$rows-1], $emptyRows);\n    while (true) {\n        // Füge das letzte Blatt in der Reihe auf\n        if ($grid[$startRow][$cols - 1] == 0) break;\n        else $grid[$startRow][$cols - 1]--;\n        \n        // Wenn wir am Ende der Reihe sind, wechseln wir zur nächsten Reihe\n        if ($startRow == $rows-1) {\n            for ($i = 1; $i < $cols; $i++) {\n                if ($grid[$startRow][$i] == 0) break;\n                else $grid[$startRow][$i]--;\n            }\n            \n            // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n            if ($grid[$startRow][0] != 0) {\n                for ($i = 1; $i < $cols; $i++) {\n                    if ($grid[$startRow][$i] == 0) break;\n                    else $grid[$startRow][$i]--;\n                }\n                \n                // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n                if ($grid[$startRow][1] != 0 && $capacity > 1) {\n                    for ($i = 2; $i < $cols; $i++) {\n                        if ($grid[$startRow][$i] == 0) break;\n                        else $grid[$startRow][$i]--;\n                    }\n                    \n                    // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n                    if ($grid[$startRow][2] != 0 && $capacity > 2) {\n                        for ($i = 3; $i < $cols; $i++) {\n                            if ($grid[$startRow][$i] == 0) break;\n                            else $grid[$startRow][$i]--;\n                        }\n                        \n                        // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n                        if ($grid[$startRow][3] != 0 && $capacity > 3) {\n                            for ($i = 4; $i < $cols; $i++) {\n                                if ($grid[$startRow][$i] == 0) break;\n                                else $grid[$startRow][$i]--;\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n            if ($grid[$startRow][1] != 0 && $capacity > 2) {\n                for ($i = 2; $i < $cols; $i++) {\n                    if ($grid[$startRow][$i] == 0) break;\n                    else $grid[$startRow][$i]--;\n                }\n                \n                // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n                if ($grid[$startRow][3] != 0 && $capacity > 4) {\n                    for ($i = 4; $i < $cols; $i++) {\n                        if ($grid[$startRow][$i] == 0) break;\n                        else $grid[$startRow][$i]--;\n                    }\n                }\n            }\n            \n            // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n            if ($grid[$startRow][2] != 0 && $capacity > 3) {\n                for ($i = 3; $i < $cols; $i++) {\n                    if ($grid[$startRow][$i] == 0) break;\n                    else $grid[$startRow][$i]--;\n                }\n                \n                // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n                if ($grid[$startRow][3] != 0 && $capacity > 6) {\n                    for ($i = 4; $i < $cols; $i++) {\n                        if ($grid[$startRow][$i] == 0) break;\n                        else $grid[$startRow][$i]--;\n                    }\n                }\n            }\n            \n            // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n            if ($grid[$startRow][3] != 0 && $capacity > 5) {\n                for ($i = 4; $i < $cols; $i++) {\n                    if ($grid[$startRow][$i] == 0) break;\n                    else $grid[$startRow][$i]--;\n                }\n            }\n            \n            // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n            if ($grid[$startRow][2] != 0 && $capacity > 4) {\n                for ($i = 3; $i < $cols; $i++) {\n                    if ($grid[$startRow][$i] == 0) break;\n                    else $grid[$startRow][$i]--;\n                }\n            }\n            \n            // Wenn alle Blätter in der Reihe entfernt sind, wechseln wir zur nächsten Reihe\n            if ($grid[$startRow][1] != 0 && $capacity > 3) {\n                for ($i = 2; $i < $cols; $i++) {\n                    if ($grid[$startRow][$i] == 0) break;\n                    else $grid[$startRow][$i]--;\n                }\n            }\n            \n        } \n    }\n\n    // Zähle die Anzahl der Malen, in denen die Eimer verwendet werden müssen\n    return count(array_slice($emptyRows, 1));\n}\n\n// Test der Funktion\nprint(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1));  // Ausgabe: 6\nprint(\"\n\");\nprint(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2));  // Ausgabe: 5\nprint(\"\n\");\nprint(maxFill([[0,0,0], [0,0,0]], 5));  // Ausgabe: 0"}
{"result_6":" <?php\n\n/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * * Sie erhalten ein rechteckiges Gitter von Brunnen. Jede Zeile repräsentiert einen einzelnen Brunnen, und jede 1 in einer Zeile repräsentiert eine einzelne Einheit Wasser. Jeder Brunnen hat einen entsprechenden Eimer, der verwendet werden kann, um Wasser daraus zu extrahieren, und alle Eimer haben die gleiche Kapazität. Ihre Aufgabe ist es, die Eimer zu verwenden, um die Brunnen zu leeren. Geben Sie die Anzahl der Male aus, die Sie die Eimer senken müssen.\n * \n * Beispiel 1:\n *     Eingabe:\n *         grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         Eimerkapazität: 1\n *     Ausgabe: 6\n * \n * Beispiel 2:\n *     Eingabe:\n *         grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         Eimerkapazität: 2\n *     Ausgabe: 5\n * \n * Beispiel 3:\n *     Eingabe:\n *         grid: [[0,0,0], [0,0,0]]\n *         Eimerkapazität: 5\n *     Ausgabe: 0\n * \n * Einschränkungen:\n *     * alle Brunnen haben die gleiche Länge\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= Kapazität <= 10 \n */\n\nfunction maxFill($grid, $capacity) {\n    $n = count($grid);\n    $m = count($grid[0]);\n    $water = array();\n    \n    // Berechnen Sie die Gesamtwassermenge im Gitter\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($grid[$i][$j] == 1) {\n                array_push($water, $capacity);\n            }\n        }\n    }\n\n    // Sortieren Sie die Wassermenge im Gitter nach der Eimerkapazität\n    usort($water, function($a, $b) use ($capacity) {\n        return $b - $a;\n    });\n\n    // Bestimmen Sie die Anzahl der Malen, auf denen die Eimer gesenkt werden müssen\n    $ans = 0;\n    foreach ($grid as $i => &$row) {\n        foreach ($row as $j => &$cell) {\n            if ($cell == 1 && count($water)) {\n                $cell = 0; // Brunnen leer machen\n                $a = array_shift($water); // Eimer ausfüllen\n                if ($a < $capacity) {\n                    $ans += (int)(($i + 1) * ($j + 1));\n                }\n            }\n        }\n    }\n\n    return $ans;\n}\n\n// Beispiele für den Ausgang\nprint(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . \"\n\");\nprint(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . \"\n\");\nprint(maxFill([[0,0,0], [0,0,0]], 5) . \"\n\");\n\n?>"}
{"result_7":"function maxFill($grid, $capacity) {\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $queue = array();\n    $visited = array_fill(0, $rows, array_fill(0, $cols, false));\n    $directions = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    \n    foreach ($grid as $i => $row) {\n        foreach ($row as $j => $val) {\n            if ($val == 1 && !$visited[$i][$j]) {\n                array_push($queue, [$i, $j]);\n                $visited[$i][$j] = true;\n            }\n        }\n    }\n    \n    $result = 0;\n    while (!empty($queue)) {\n        list($x, $y) = array_pop($queue);\n        \n        for ($k = 0; $k < count($directions); $k++) {\n            $nx = $x + $directions[$k][0];\n            $ny = $y + $directions[$k][1];\n            \n            if ($nx >= 0 && $nx < $rows && $ny >= 0 && $ny < $cols && !$visited[$nx][$ny] && $grid[$nx][$ny] == 1) {\n                array_push($queue, [$nx, $ny]);\n                $visited[$nx][$ny] = true;\n                \n                if ($capacity > 0) {\n                    --$capacity;\n                    --$grid[$nx][$ny];\n                    ++$result;\n                    \n                    if ($capacity < 0) {\n                        break 2;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    \n    return $result;\n}\n\n// Test cases\nprint(maxFill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) . \"\n\"); // Output: 6\nprint(maxFill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) . \"\n\"); // Output: 5\nprint(maxFill([[0,0,0], [0,0,0]], 5) . \"\n\"); // Output: 0"}
{"result_8":" // Funktion zum Ausführen der Aufgabe\n function maxFill($grid, $capacity) {\n    // Die Anzahl der Zeilen im Gitter\n    $n = count($grid);\n    // Die Anzahl der Spalten im Gitter\n    $m = count($grid[0]);\n    // Ein Array mit den Eimerzählern\n    $eimers = array_fill(1, $n, 0);\n    // Der aktuelle Wasserstand in jedem Eimer\n    $currentWater = array_fill(1, $n, 0);\n    \n    while (true) {\n        // Suche die Zeile mit der höchsten Anzahl von Brunnen\n        $maxI = -1;\n        for ($i = 1; $i <= $n; ++$i)\n            if ($currentWater[$i] > $currentWater[$maxI]) \n                $maxI = $i;\n        \n        // Wenn alle Brunnen voll sind, stoppen wir\n        if ($currentWater[$maxI] == 0) {\n            break;\n        }\n        \n        // Füllen die Eimer mit Wasser aus der Zeile\n        for ($i = 1; $i <= $n && $eimers[1] < $capacity; ++$i)\n            if ($grid[$i-1][$maxI - 1] == 0) \n                $currentWater[$i]++;\n            else {\n                // Füllen wir den Eimer mit Wasser, sofern wir noch Platz im Eimer haben\n                $eimers[$i]++;\n                \n                // Wenn wir genug Platz im Eimer haben, füllen wir ihn\n                if ($currentWater[$maxI] - $currentWater[$i] > 0) \n                    $currentWater[$i] = min($capacity, $currentWater[$maxI]);\n            }\n        }\n\n        // Wir müssen die Zeile leeren, sofern es noch Platz im Eimer gibt\n        if (array_sum($eimers) > 0) {\n            for ($i = 1; $i <= $n && $eimers[1] > 0; ++$i)\n                if ($grid[$i-1][$maxI - 1] == 1) {\n                    // Wir müssen die Zeile leeren, sofern wir noch Platz im Eimer haben\n                    while (true) \n                        if ($currentWater[$i] <= $capacity && $eimers[1] > 0) {\n                            --$eimers[1];\n                            // Wenn wir genug Platz im Eimer haben, füllen wir ihn und leeren wir die Zeile\n                            if ($grid[$i-1][$maxI - 1] == 1)\n                                $currentWater[$i]++;\n                            else \n                                $currentWater[$i]--;\n                        } else {\n                            break;\n                        }\n                } else\n                    break;\n\n            // Wir müssen wieder die Zeile mit der höchsten Anzahl von Brunnen finden\n            $maxI = -1;\n            for ($i = 1; $i <= $n && $eimers[1] > 0; ++$i)\n                if ($currentWater[$i] > $currentWater[$maxI]) \n                    $maxI = $i;\n\n        }\n    }\n\n    // Die Gesamtzahl der Male, die wir den Eimern gesenkt haben\n    return array_sum($eimers);\n}\n\n// Beispiele:\necho maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) . \"\n\"; \necho maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) . \"\n\";\necho maxFill([[0, 0, 0], [0, 0, 0]], 5) . \"\n\";"}
{"result_9":"<?php\n\n/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * * Sie erhalten ein rechteckiges Gitter von Brunnen. Jede Zeile repräsentiert einen einzelnen Brunnen, \n *   und jede 1 in einer Zeile repräsentiert eine einzelne Einheit Wasser. Jeder Brunnen hat einen entsprechenden Eimer,\n *   der verwendet werden kann, um Wasser daraus zu extrahieren, und alle Eimer haben die gleiche Kapazität. Ihre Aufgabe ist es,\n *   die Eimer zu verwenden, um die Brunnen zu leeren. Geben Sie die Anzahl der Male aus, die Sie die Eimer senken müssen.\n * \n * Beispiel 1:\n *     Eingabe:\n *         grid: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n *         Eimerkapazität: 1\n *     Ausgabe: 6\n * \n * Beispiel 2:\n *     Eingabe:\n *         grid: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n *         Eimerkapazität: 2\n *     Ausgabe: 5\n * \n * Beispiel 3:\n *     Eingabe:\n *         grid: [[0,0,0], [0,0,0]]\n *         Eimerkapazität: 5\n *     Ausgabe: 0\n * \n * Einschränkungen:\n *     * alle Brunnen haben die gleiche Länge\n *     * 1 <= grid.length <= 10^2\n *     * 1 <= grid[:,1].length <= 10^2\n *     * grid[i][j] -> 0 | 1\n *     * 1 <= Kapazität <= 10\n * \n *\n */\nfunction maxFill($grid, $capacity) {\n    $n = count($grid);\n    $m = count($grid[0]);\n\n    // Erstelle eine neue Matrix um die Anzahl der Einheiten Wasser in jeder Zeile zu speichern\n    $rowCounts = array();\n    foreach ($grid as $row) {\n        $rowCount = 0;\n        foreach ($row as $value) {\n            if ($value == 1) $rowCount++;\n        }\n        $rowCounts[] = $rowCount;\n    }\n\n    // Berechne die Anzahl der Malen, die die Eimer gesenkt werden müssen\n    $malSenken = 0;\n    for ($i = 0; $i < $n && $malSenken <= min($capacity, array_sum($rowCounts)); $i++) {\n        $malSenken += $rowCounts[$i] / $capacity;\n    }\n\n    return (int) $malSenken;\n}\n\n// Testfall\n$grid1 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\necho maxFill($grid1, 1); // Ausgabe: 6\n\n$grid2 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\necho maxFill($grid2, 2); // Ausgabe: 5\n\n$grid3 = [[0, 0, 0], [0, 0, 0]];\necho maxFill($grid3, 5); // Ausgabe: 0"}
