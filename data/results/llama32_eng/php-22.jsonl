{"result_0":"<?php\n\n/**\n * Returns sorted unique common elements for two lists.\n *\n * @param array $l1 The first list of integers.\n * @param array $l2 The second list of integers.\n *\n * @return array A sorted array of unique common elements between the two input lists.\n */\nfunction common($l1, $l2){\n    // Convert the arrays to sets for efficient lookup\n    $set1 = array_flip($l1);\n    $set2 = array_flip($l2);\n\n    // Find the intersection of the two sets (i.e., the common elements)\n    $commonElements = array_intersect_key($set1, $set2);\n\n    // Convert the resulting set back to an array and sort it\n    $result = array_keys($commonElements);\n    sort($result);\n\n    return $result;\n}\n\n// Test cases\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"result_1":"<?php\n\n/**\n * Returns sorted unique common elements for two lists.\n *\n * @param array $l1 The first list of numbers.\n * @param array $l2 The second list of numbers.\n *\n * @return array A sorted array of unique common elements between the two input lists.\n */\nfunction common($l1, $l2){\n    // Convert the arrays to sets for efficient lookup\n    $set1 = array_flip($l1);\n    $set2 = array_flip($l2);\n\n    // Find the intersection of the two sets (common elements)\n    $intersection = array_intersect_key($set1, $set2);\n\n    // Get the unique common elements by removing duplicates\n    $uniqueCommonElements = array_keys($intersection);\n\n    // Sort the unique common elements in ascending order\n    sort($uniqueCommonElements);\n\n    return $uniqueCommonElements;\n}\n\n// Test cases\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"result_2":" /**\n  * Returns the sorted unique common elements for two lists.\n  *\n  * @param array $l1 The first list of numbers\n  * @param array $l2 The second list of numbers\n  *\n  * @return array A sorted array of unique common elements between the two input arrays\n  */\nfunction common($l1, $l2){\n    // Convert the input arrays to sets for efficient lookup and removal of duplicates\n    $set1 = array_unique($l1);\n    $set2 = array_unique($l2);\n\n    // Find the intersection of the two sets (i.e., elements that are in both sets)\n    $commonElements = array_intersect($set1, $set2);\n\n    // Sort the common elements and return them as an array\n    sort($commonElements);\n    return $commonElements;\n}\n\n// Test cases\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\n// Output: [1, 5, 653]\n\nprint_r(common([5, 3, 2, 8], [3, 2]));\n// Output: [2, 3]"}
{"result_3":" /**\n  * Returns sorted unique common elements for two lists.\n  *\n  * @param array $l1 The first list of numbers.\n  * @param array $l2 The second list of numbers.\n  *\n  * @return array A sorted array of unique common elements between the two input lists.\n  */\nfunction common($l1, $l2){\n    // Convert the arrays to sets for efficient lookup\n    $set1 = array_flip($l1);\n    $set2 = array_flip($l2);\n\n    // Find the intersection of the two sets (common elements)\n    $intersection = array_intersect_key($set1, $set2);\n\n    // Filter out non-integer values and sort the result\n    $result = array_filter(array_keys($intersection), 'is_int');\n    sort($result);\n\n    return $result;\n}\n\n// Test cases\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
{"result_4":" /**\n  * Returns sorted unique common elements for two lists.\n  *\n  * @param array $l1 The first list of numbers.\n  * @param array $l2 The second list of numbers.\n  *\n  * @return array A sorted array of unique common elements between the two input lists.\n  */\nfunction common($l1, $l2){\n    // Convert the arrays to sets for efficient lookup\n    $set1 = array_flip($l1);\n    $set2 = array_flip($l2);\n\n    // Find the intersection of the two sets (common elements)\n    $intersection = array_intersect_key($set1, $set2);\n\n    // Get the keys from the intersection set (the common elements)\n    $commonElements = array_keys($intersection);\n\n    // Sort the common elements\n    sort($commonElements);\n\n    return $commonElements;\n}\n\n// Test cases\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // Output: [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // Output: [2, 3]"}
