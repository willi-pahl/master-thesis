{"result_0":" function numericalLetterGrade($grades) {\n    $letterGrades = [];\n    foreach ($grades as $grade) {\n        if ($grade >= 4.0) {\n            $letterGrades[] = 'A+';\n        } elseif ($grade > 3.7) {\n            $letterGrades[] = 'A';\n        } elseif ($grade > 3.3) {\n            $letterGrades[] = 'A-';\n        } elseif ($grade > 3.0) {\n            $letterGrades[] = 'B+';\n        } elseif ($grade > 2.7) {\n            $letterGrades[] = 'B';\n        } elseif ($grade > 2.3) {\n            $letterGrades[] = 'B-';\n        } elseif ($grade > 2.0) {\n            $letterGrades[] = 'C+';\n        } elseif ($grade > 1.7) {\n            $letterGrades[] = 'C';\n        } elseif ($grade > 1.3) {\n            $letterGrades[] = 'C-';\n        } elseif ($grade > 1.0) {\n            $letterGrades[] = 'D+';\n        } elseif ($grade > 0.7) {\n            $letterGrades[] = 'D';\n        } elseif ($grade > 0.0) {\n            $letterGrades[] = 'D-';\n        } else {\n            $letterGrades[] = 'E';\n        }\n    }\n    return $letterGrades;\n}\n\n// Test the function\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numericalLetterGrade($grades));"}
{"result_1":" <?php\n\n/**\n * This function takes an array of GPAs and returns an array of corresponding letter grades.\n *\n * @param $grades An array of GPAs\n * @return An array of letter grades\n */\n\nfunction numericalLetterGrade($grades) {\n    // Define the grade boundaries in a table format\n    $gradeBoundaries = [\n        4.0 => 'A+', \n        '>3.7' => 'A', \n        '>3.3' => 'A-', \n        '>3.0' => 'B+', \n        '>2.7' => 'B', \n        '>2.3' => 'B-', \n        '>2.0' => 'C+', \n        '>1.7' => 'C', \n        '>1.3' => 'C-', \n        '>1.0' => 'D+', \n        '>0.7' => 'D', \n        '>0.0' => 'D-', \n        0.0 => 'E'\n    ];\n\n    // Initialize an empty array to store the letter grades\n    $letterGrades = [];\n\n    // Iterate over each GPA in the input array\n    foreach ($grades as $gpa) {\n        // Check if the GPA is a string, if so convert it to float\n        if (is_string($gpa)) {\n            $gpa = floatval($gpa);\n        }\n\n        // Find the corresponding letter grade based on the grade boundaries\n        foreach ($gradeBoundaries as $boundary => $letterGrade) {\n            if ($gpa >= $boundary) {\n                $letterGrades[] = $letterGrade;\n                break;\n            }\n        }\n    }\n\n    // Return the array of letter grades\n    return $letterGrades;\n}\n\n// Test the function\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numericalLetterGrade($grades));"}
{"result_2":" /**\n  * This function takes an array of GPAs and returns an array of corresponding letter grades.\n  *\n  * @param array $grades An array of GPAs\n  * @return array An array of letter grades\n  */\nfunction numericalLetterGrade($grades) {\n    // Initialize an empty array to store the letter grades\n    $letterGrades = [];\n\n    // Loop through each GPA in the input array\n    foreach ($grades as $gpa) {\n        // Check if the GPA is greater than or equal to 4.0\n        if ($gpa >= 4.0) {\n            // If it is, append 'A+' to the letterGrades array\n            $letterGrades[] = 'A+';\n        }\n        // Check if the GPA is greater than 3.7 but less than or equal to 4.0\n        elseif ($gpa > 3.7) {\n            // If it is, append 'A' to the letterGrades array\n            $letterGrades[] = 'A';\n        }\n        // Check if the GPA is greater than 3.3 but less than or equal to 3.7\n        elseif ($gpa > 3.3) {\n            // If it is, append 'A-' to the letterGrades array\n            $letterGrades[] = 'A-';\n        }\n        // Check if the GPA is greater than 3.0 but less than or equal to 3.3\n        elseif ($gpa > 3.0) {\n            // If it is, append 'B+' to the letterGrades array\n            $letterGrades[] = 'B+';\n        }\n        // Check if the GPA is greater than 2.7 but less than or equal to 3.0\n        elseif ($gpa > 2.7) {\n            // If it is, append 'B' to the letterGrades array\n            $letterGrades[] = 'B';\n        }\n        // Check if the GPA is greater than 2.3 but less than or equal to 2.7\n        elseif ($gpa > 2.3) {\n            // If it is, append 'B-' to the letterGrades array\n            $letterGrades[] = 'B-';\n        }\n        // Check if the GPA is greater than 2.0 but less than or equal to 2.3\n        elseif ($gpa > 2.0) {\n            // If it is, append 'C+' to the letterGrades array\n            $letterGrades[] = 'C+';\n        }\n        // Check if the GPA is greater than 1.7 but less than or equal to 2.0\n        elseif ($gpa > 1.7) {\n            // If it is, append 'C' to the letterGrades array\n            $letterGrades[] = 'C';\n        }\n        // Check if the GPA is greater than 1.3 but less than or equal to 1.7\n        elseif ($gpa > 1.3) {\n            // If it is, append 'C-' to the letterGrades array\n            $letterGrades[] = 'C-';\n        }\n        // Check if the GPA is greater than 1.0 but less than or equal to 1.3\n        elseif ($gpa > 1.0) {\n            // If it is, append 'D+' to the letterGrades array\n            $letterGrades[] = 'D+';\n        }\n        // Check if the GPA is greater than 0.7 but less than or equal to 1.0\n        elseif ($gpa > 0.7) {\n            // If it is, append 'D' to the letterGrades array\n            $letterGrades[] = 'D';\n        }\n        // Check if the GPA is greater than 0.0 but less than or equal to 0.7\n        elseif ($gpa > 0.0) {\n            // If it is, append 'D-' to the letterGrades array\n            $letterGrades[] = 'D-';\n        }\n        // Check if the GPA is less than or equal to 0.0\n        else {\n            // If it is, append 'E' to the letterGrades array\n            $letterGrades[] = 'E';\n        }\n    }\n\n    // Return the array of letter grades\n    return $letterGrades;\n}\n\n// Test the function\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numericalLetterGrade($grades));"}
{"result_3":" /**\n * This function takes an array of GPAs as input and returns an array of corresponding letter grades.\n * The grading scale is based on the following table:\n *          GPA       |    Letter grade\n *           4.0                A+\n *         > 3.7                A \n *         > 3.3                A- \n *         > 3.0                B+\n *         > 2.7                B \n *         > 2.3                B-\n *         > 2.0                C+\n *         > 1.7                C\n *         > 1.3                C-\n *         > 1.0                D+ \n *         > 0.7                D \n *         > 0.0                D-\n *           0.0                E\n *\n * @param array $grades An array of GPAs to be graded.\n * @return array An array of corresponding letter grades.\n */\nfunction numericalLetterGrade($grades){\n    // Define the grading scale in an array for easy reference\n    $gradingScale = [\n        'A+' => [4.0],\n        'A' => [3.7, 3.8, 3.9, 4.0],\n        'A-' => [3.3, 3.4, 3.5, 3.6],\n        'B+' => [3.0, 3.1, 3.2, 3.3],\n        'B' => [2.7, 2.8, 2.9, 3.0],\n        'B-' => [2.3, 2.4, 2.5, 2.6],\n        'C+' => [2.0, 2.1, 2.2, 2.3],\n        'C' => [1.7, 1.8, 1.9, 2.0],\n        'C-' => [1.3, 1.4, 1.5, 1.6],\n        'D+' => [1.0, 1.1, 1.2, 1.3],\n        'D' => [0.7, 0.8, 0.9, 1.0],\n        'D-' => [0.3, 0.4, 0.5, 0.6],\n        'E' => [0.0]\n    ];\n\n    // Initialize an empty array to store the letter grades\n    $letterGrades = [];\n\n    // Loop through each GPA in the input array\n    foreach ($grades as $gpa) {\n        // Check if the GPA is in the grading scale for a specific letter grade\n        foreach ($gradingScale as $grade => $range) {\n            if (in_array($gpa, $range)) {\n                // If it is, append the corresponding letter grade to the array\n                $letterGrades[] = $grade;\n                break;\n            }\n        }\n    }\n\n    // Return the array of letter grades\n    return $letterGrades;\n}\n\n// Test the function with the example input\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numericalLetterGrade($grades));"}
{"result_4":" /**\n  * This function takes an array of GPAs as input and returns an array of corresponding letter grades.\n  *\n  * The grading scale is based on the following table:\n  *          GPA       |    Letter grade\n  *           4.0                A+\n  *         > 3.7                A \n  *         > 3.3                A- \n  *         > 3.0                B+\n  *         > 2.7                B \n  *         > 2.3                B-\n  *         > 2.0                C+\n  *         > 1.7                C\n  *         > 1.3                C-\n  *         > 1.0                D+ \n  *         > 0.7                D \n  *         > 0.0                D-\n  *           0.0                E\n  *\n  * @param array $grades An array of GPAs to be graded.\n  * @return array An array of corresponding letter grades.\n  */\nfunction numericalLetterGrade($grades){\n    // Initialize an empty array to store the letter grades\n    $letterGrades = [];\n\n    // Loop through each GPA in the input array\n    foreach ($grades as $grade) {\n        // Check if the GPA is greater than or equal to 4.0\n        if ($grade >= 4.0) {\n            // If true, push 'A+' into the letterGrades array\n            $letterGrades[] = 'A+';\n        }\n        // Check if the GPA is greater than 3.7 but less than or equal to 4.0\n        elseif ($grade > 3.7) {\n            // If true, push 'A' into the letterGrades array\n            $letterGrades[] = 'A';\n        }\n        // Check if the GPA is greater than 3.3 but less than or equal to 3.7\n        elseif ($grade > 3.3) {\n            // If true, push 'A-' into the letterGrades array\n            $letterGrades[] = 'A-';\n        }\n        // Check if the GPA is greater than 3.0 but less than or equal to 3.3\n        elseif ($grade > 3.0) {\n            // If true, push 'B+' into the letterGrades array\n            $letterGrades[] = 'B+';\n        }\n        // Check if the GPA is greater than 2.7 but less than or equal to 3.0\n        elseif ($grade > 2.7) {\n            // If true, push 'B' into the letterGrades array\n            $letterGrades[] = 'B';\n        }\n        // Check if the GPA is greater than 2.3 but less than or equal to 2.7\n        elseif ($grade > 2.3) {\n            // If true, push 'B-' into the letterGrades array\n            $letterGrades[] = 'B-';\n        }\n        // Check if the GPA is greater than 2.0 but less than or equal to 2.3\n        elseif ($grade > 2.0) {\n            // If true, push 'C+' into the letterGrades array\n            $letterGrades[] = 'C+';\n        }\n        // Check if the GPA is greater than 1.7 but less than or equal to 2.0\n        elseif ($grade > 1.7) {\n            // If true, push 'C' into the letterGrades array\n            $letterGrades[] = 'C';\n        }\n        // Check if the GPA is greater than 1.3 but less than or equal to 1.7\n        elseif ($grade > 1.3) {\n            // If true, push 'C-' into the letterGrades array\n            $letterGrades[] = 'C-';\n        }\n        // Check if the GPA is greater than 1.0 but less than or equal to 1.3\n        elseif ($grade > 1.0) {\n            // If true, push 'D+' into the letterGrades array\n            $letterGrades[] = 'D+';\n        }\n        // Check if the GPA is greater than 0.7 but less than or equal to 1.0\n        elseif ($grade > 0.7) {\n            // If true, push 'D' into the letterGrades array\n            $letterGrades[] = 'D';\n        }\n        // Check if the GPA is greater than 0.0 but less than or equal to 0.7\n        elseif ($grade > 0.0) {\n            // If true, push 'D-' into the letterGrades array\n            $letterGrades[] = 'D-';\n        }\n        // If none of the above conditions are met, push 'E' into the letterGrades array\n        else {\n            $letterGrades[] = 'E';\n        }\n    }\n\n    // Return the array of letter grades\n    return $letterGrades;\n}\n\n// Example usage:\n$grades = [4.0, 3, 1.7, 2, 3.5];\nprint_r(numericalLetterGrade($grades));  // Output: ['A+', 'B', 'C-', 'C', 'A-']"}
