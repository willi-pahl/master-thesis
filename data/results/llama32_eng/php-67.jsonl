{"result_0":"<?php\n\n/**\n * Sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, orders them based on their index in original list.\n *\n * @param array $nums A list of integers\n * @return array The sorted list of integers\n */\nfunction orderByPoints($nums){\n    // Use the usort function to sort the array\n    usort($nums, function($a, $b) {\n        // Calculate the sum of digits for each number\n        $sumA = array_sum(str_split(abs($a)));\n        $sumB = array_sum(str_split(abs($b)));\n\n        // If the sums are equal, order by index in original list\n        if ($sumA == $sumB) {\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        // Otherwise, sort by sum of digits\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Test the function\nprint_r(orderByPoints([1, 11, -1, -11, -12]));  // Output: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([]));  // Output: []"}
{"result_1":"<?php\n\n/**\n * This function sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, they are ordered based on their index in original list.\n *\n * @param array $nums A list of integers\n *\n * @return array The sorted list of integers\n */\nfunction orderByPoints($nums){\n    // Use the usort function to sort the array\n    usort($nums, function($a, $b) {\n        // Calculate the sum of digits for each number\n        $sumA = array_sum(str_split(abs($a)));\n        $sumB = array_sum(str_split(abs($b)));\n\n        // If the sums are different, sort based on the sum\n        if ($sumA != $sumB) {\n            return $sumA - $sumB;\n        } else {\n            // If the sums are equal, sort based on the original index\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n    });\n\n    return $nums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Output: []"}
{"result_2":"<?php\n\n/**\n * Sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, they are ordered based on their index in original list.\n *\n * @param array $nums A list of integers\n * @return array The sorted list of integers\n */\nfunction orderByPoints($nums){\n    // Use the usort function to sort the array\n    usort($nums, function($a, $b) {\n        // Calculate the sum of digits for each number\n        $sumA = array_sum(str_split(abs($a)));\n        $sumB = array_sum(str_split(abs($b)));\n\n        // If the sums are different, sort based on the sum\n        if ($sumA != $sumB) {\n            return $sumA - $sumB;\n        } else {\n            // If the sums are equal, sort based on the original index\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n    });\n\n    return $nums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Output: []"}
{"result_3":"<?php\n\n/**\n * Sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, orders them based on their index in original list.\n *\n * @param array $nums A list of integers\n * @return array The sorted list of integers\n */\nfunction orderByPoints($nums){\n    // Use the usort function to sort the array\n    // The usort function sorts an array by a user-defined comparison function\n    usort($nums, function($a, $b) {\n        // Calculate the sum of digits for each number\n        $sumA = array_sum(str_split(abs($a)));\n        $sumB = array_sum(str_split(abs($b)));\n\n        // If the sums are equal, sort based on original index\n        if ($sumA == $sumB) {\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        // Otherwise, sort by sum of digits\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Test the function\n$nums = [1, 11, -1, -11, -12];\nprint_r(orderByPoints($nums));"}
{"result_4":"<?php\n\n/**\n * This function sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, they are ordered based on their index in original list.\n *\n * @param array $nums A list of integers\n * @return array The sorted list of integers\n */\nfunction orderByPoints($nums){\n    // Use the usort function to sort the array\n    // The callback function calculates the sum of the digits for each number\n    // If two numbers have the same sum, their original index is used as a tie-breaker\n    usort($nums, function($a, $b) {\n        $sumA = array_sum(str_split(abs($a)));\n        $sumB = array_sum(str_split(abs($b)));\n        \n        if ($sumA == $sumB) {\n            return $nums[1] - $nums[0];\n        } else {\n            return $sumA - $sumB;\n        }\n    });\n    \n    // Return the sorted array\n    return $nums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Output: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Output: []\n\n?>"}
