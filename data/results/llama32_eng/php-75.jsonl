{"result_0":" /**\n  * Converts a positive integer to its Roman numeral equivalent as a string in lowercase.\n  *\n  * @param int $number A positive integer between 1 and 1000 (inclusive).\n  *\n  * @return string The Roman numeral equivalent of the input number, in lowercase.\n  */\n function intToMiniRoman($number){\n    // Define an array to map integers to their corresponding Roman numerals\n    $romanNumerals = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the result\n    $result = '';\n\n    // Loop through the array in descending order of integer values\n    foreach ($romanNumerals as $value => $numeral) {\n        // Calculate how many times the current Roman numeral can fit into the number\n        $count = floor($number / $value);\n        \n        // Subtract the value of the current Roman numeral multiplied by its count from the number\n        $number -= $count * $value;\n        \n        // Append the current Roman numeral to the result, repeated 'count' times\n        $result .= str_repeat($numeral, $count);\n    }\n\n    // Return the result in lowercase\n    return strtolower($result);\n}"}
{"result_1":" /**\n  * Converts a positive integer into its Roman numeral equivalent as a string,\n  * and returns it in lowercase.\n  *\n  * @param int $number A positive integer between 1 and 1000.\n  *\n  * @return string The Roman numeral equivalent of the input number, in lowercase.\n  */\nfunction intToMiniRoman($number){\n    // Define an array to map integers to their corresponding Roman numerals\n    $romanNumerals = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the result\n    $result = '';\n\n    // Iterate over the array in descending order of integer values\n    foreach ($romanNumerals as $value => $numeral) {\n        // Calculate how many times the current Roman numeral can fit into the number\n        $count = floor($number / $value);\n        \n        // Subtract the value of the current Roman numeral multiplied by its count from the number\n        $number -= $count * $value;\n        \n        // Append the current Roman numeral to the result, repeated 'count' times\n        $result .= str_repeat($numeral, $count);\n    }\n\n    // Return the result in lowercase\n    return strtolower($result);\n}"}
{"result_2":" /**\n  * Converts a positive integer to its Roman numeral equivalent as a string in lowercase.\n  *\n  * @param int $number A positive integer between 1 and 1000.\n  *\n  * @return string The Roman numeral equivalent of the input number as a string in lowercase.\n  */\n function intToMiniRoman($number){\n    // Define an array to map integers to their corresponding Roman numerals\n    $romanNumerals = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the result\n    $result = '';\n\n    // Iterate over the array in descending order of integer values\n    foreach ($romanNumerals as $value => $numeral) {\n        // Calculate how many times the current Roman numeral can fit into the number\n        $count = floor($number / $value);\n        \n        // Subtract the value of the current Roman numeral multiplied by its count from the number\n        $number -= $count * $value;\n        \n        // Append the current Roman numeral to the result, repeated 'count' times\n        $result .= str_repeat($numeral, $count);\n    }\n\n    // Return the result in lowercase\n    return strtolower($result);\n}"}
{"result_3":" /**\n  * Converts a positive integer to its Roman numeral equivalent as a string.\n  *\n  * @param int $number A positive integer between 1 and 1000.\n  *\n  * @return string The Roman numeral equivalent of the input number in lowercase.\n  */\n function intToMiniRoman($number){\n    // Define an array that maps integers to their corresponding Roman numerals\n    $romanNumerals = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the result\n    $result = '';\n\n    // Iterate over the array in descending order of integer values\n    foreach ($romanNumerals as $value => $numeral) {\n        // Calculate how many times the current Roman numeral can fit into the number\n        $count = floor($number / $value);\n        \n        // Subtract the value of the current Roman numeral multiplied by its count from the number\n        $number -= $count * $value;\n        \n        // Append the current Roman numeral to the result, repeated 'count' times\n        $result .= str_repeat($numeral, $count);\n    }\n\n    // Return the result in lowercase\n    return strtolower($result);\n}"}
{"result_4":"Here's a PHP function that converts integers to their Roman numeral equivalents:\n\n```php\n/**\n * Converts an integer into its Roman numeral equivalent as a string.\n *\n * @param int $number A positive integer between 1 and 1000.\n *\n * @return string The Roman numeral representation of the input number in lowercase.\n */\nfunction intToMiniRoman($number)\n{\n    // Define the mapping from integers to their corresponding Roman numerals\n    $romanNumerals = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the result\n    $result = '';\n\n    // Iterate over the Roman numerals in descending order of their values\n    foreach ($romanNumerals as $value => $numeral) {\n        // Calculate how many times the current numeral can fit into the number\n        $count = (int) ($number / $value);\n\n        // Subtract the value of the current numeral multiplied by its count from the number\n        $number -= $count * $value;\n\n        // Append the current numeral to the result, repeated 'count' times\n        for ($i = 0; $i < $count; $i++) {\n            $result .= $numeral;\n        }\n    }\n\n    // Return the result in lowercase\n    return strtolower($result);\n}\n```\n\nExample usage:\n\n```php\necho intToMiniRoman(19);   // Output: xix\necho intToMiniRoman(152);  // Output: clii\necho intToMiniRoman(426);  // Output: cdxxvi\n```\n\nThis function works by iterating over the Roman numerals in descending order of their values, subtracting the value of each numeral from the input number as many times as possible, and appending the corresponding numeral to the result string. The result is then returned in lowercase."}
