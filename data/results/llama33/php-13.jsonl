{"result_0":"```php\n/**\n * Überprüft, ob es in der Liste zwei unterschiedliche Elemente gibt, die sich zu Null addieren.\n *\n * @param array $l Die Liste von ganzen Zahlen.\n *\n * @return bool True, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls False.\n */\nfunction pairsSumToZero($l) {\n    // Durchlaufe die Liste\n    foreach ($l as $i => $wert1) {\n        // Durchlaufe die Liste erneut\n        foreach (array_slice($l, $i + 1) as $j => $wert2) {\n            // Überprüfe, ob die Summe der beiden Werte Null ergibt\n            if ($wert1 + $wert2 == 0 && $wert1 != $wert2) {\n                return true;\n            }\n        }\n    }\n    // Wenn keine passenden Elemente gefunden wurden, gib False zurück\n    return false;\n}\n```\n\n### Beispielanwendungen\n\n```php\n// Testfälle\nprint(pairsSumToZero([1, 3, 5, 0]) ? \"True\" : \"False\") . \"\n\"; // False\nprint(pairsSumToZero([1, 3, -2, 1]) ? \"True\" : \"False\") . \"\n\"; // False\nprint(pairsSumToZero([1, 2, 3, 7]) ? \"True\" : \"False\") . \"\n\"; // False\nprint(pairsSumToZero([2, 4, -5, 3, 5, 7]) ? \"True\" : \"False\") . \"\n\"; // True\nprint(pairsSumToZero([1]) ? \"True\" : \"False\") . \"\n\"; // False\n```"}
{"result_1":"```php\n/**\n * Diese Funktion überprüft, ob es in einer Liste von ganzen Zahlen zwei unterschiedliche Elemente gibt, \n * die sich zu Null addieren.\n *\n * @param array $l Die Liste von ganzen Zahlen.\n *\n * @return bool True, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, \n * andernfalls False.\n */\nfunction pairsSumToZero($l) {\n    // Wir iterieren über alle möglichen Paare von Elementen in der Liste\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            // Wenn die Summe zweier Elemente Null ergibt, geben wir True zurück\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n            }\n        }\n    }\n    // Wenn keine Paare gefunden wurden, die sich zu Null addieren, geben wir False zurück\n    return false;\n}\n```\n\nBeispielanwendung:\n```php\nprint(pairsSumToZero([1, 3, 5, 0]) . \"\n\"); // False\nprint(pairsSumToZero([1, 3, -2, 1]) . \"\n\"); // False\nprint(pairsSumToZero([1, 2, 3, 7]) . \"\n\"); // False\nprint(pairsSumToZero([2, 4, -5, 3, 5, 7]) . \"\n\"); // True\nprint(pairsSumToZero([1]) . \"\n\"); // False\n```"}
{"result_2":"```php\n/**\n * Überprüft, ob es in der Liste zwei unterschiedliche Elemente gibt, die sich zu Null addieren.\n *\n * @param array $l Die Liste von ganzen Zahlen.\n *\n * @return bool True, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls False.\n */\nfunction pairsSumToZero($l) {\n    // Durchlaufe die Liste\n    foreach ($l as $i => $wert1) {\n        // Durchlaufe die Liste erneut, um alle möglichen Paare zu überprüfen\n        foreach ($l as $j => $wert2) {\n            // Überprüfe, ob die Summe der beiden Werte Null ergibt und ob es sich um unterschiedliche Elemente handelt\n            if ($i !== $j && $wert1 + $wert2 === 0) {\n                return true;\n            }\n        }\n    }\n    // Wenn keine Paare gefunden wurden, die sich zu Null addieren, gib False zurück\n    return false;\n}\n```\n\nBeispielanwendung:\n\n```php\nprint(pairsSumToZero([1, 3, 5, 0]) ? \"True\" : \"False\"); // False\nprint(pairsSumToZero([1, 3, -2, 1]) ? \"True\" : \"False\"); // False\nprint(pairsSumToZero([1, 2, 3, 7]) ? \"True\" : \"False\"); // False\nprint(pairsSumToZero([2, 4, -5, 3, 5, 7]) ? \"True\" : \"False\"); // True\nprint(pairsSumToZero([1]) ? \"True\" : \"False\"); // False\n```"}
{"result_3":"```php\n/**\n * Diese Funktion überprüft, ob es in einer Liste von ganzen Zahlen zwei unterschiedliche Elemente gibt, \n * die sich zu Null addieren.\n *\n * @param array $l Eine Liste von ganzen Zahlen.\n *\n * @return bool True, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, \n *         andernfalls False.\n */\nfunction pairsSumToZero($l) {\n    // Wir iterieren über alle möglichen Paare von Elementen in der Liste\n    for ($i = 0; $i < count($l); $i++) {\n        for ($j = $i + 1; $j < count($l); $j++) {\n            // Wenn die Summe eines Paares Null ergibt, geben wir True zurück\n            if ($l[$i] + $l[$j] == 0) {\n                return true;\n            }\n        }\n    }\n    // Wenn keine Paare gefunden wurden, die sich zu Null addieren, geben wir False zurück\n    return false;\n}\n```\n\nBeispielanwendung:\n\n```php\nprint(pairsSumToZero([1, 3, 5, 0]) . \"\n\"); // False\nprint(pairsSumToZero([1, 3, -2, 1]) . \"\n\"); // False\nprint(pairsSumToZero([1, 2, 3, 7]) . \"\n\"); // False\nprint(pairsSumToZero([2, 4, -5, 3, 5, 7]) . \"\n\"); // True\nprint(pairsSumToZero([1]) . \"\n\"); // False\n```"}
{"result_4":"```php\n/**\n * Überprüft, ob es in der Liste zwei unterschiedliche Elemente gibt, die sich zu Null addieren.\n *\n * @param array $l Die Liste von ganzen Zahlen.\n *\n * @return bool True, wenn es zwei unterschiedliche Elemente in der Liste gibt, die sich zu Null addieren, andernfalls False.\n */\nfunction pairsSumToZero($l) {\n    // Durchlaufe die Liste\n    foreach ($l as $i => $wert1) {\n        // Durchlaufe die Liste erneut, um alle möglichen Paare zu überprüfen\n        foreach ($l as $j => $wert2) {\n            // Überprüfe, ob die Werte unterschiedlich sind und sich zu Null addieren\n            if ($i !== $j && $wert1 + $wert2 === 0) {\n                return true;\n            }\n        }\n    }\n    // Wenn keine Paare gefunden wurden, die sich zu Null addieren, gib False zurück\n    return false;\n}\n```\n\nBeispielanwendung:\n```php\nprint(pairsSumToZero([1, 3, 5, 0]) ? \"True\" : \"False\"); // False\nprint(pairsSumToZero([1, 3, -2, 1]) ? \"True\" : \"False\"); // False\nprint(pairsSumToZero([1, 2, 3, 7]) ? \"True\" : \"False\"); // False\nprint(pairsSumToZero([2, 4, -5, 3, 5, 7]) ? \"True\" : \"False\"); // True\nprint(pairsSumToZero([1]) ? \"True\" : \"False\"); // False\n```"}
