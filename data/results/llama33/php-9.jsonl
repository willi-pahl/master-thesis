{"result_0":"```php\n/**\n * Überprüft, ob eine gegebene Zahl eine Primzahl ist.\n *\n * @param int $n Die zu überprüfende Zahl.\n *\n * @return bool True, wenn die Zahl eine Primzahl ist, false andernfalls.\n */\nfunction isPrime($n) {\n    // Zahlen kleiner als 2 sind keine Primzahlen\n    if ($n < 2) {\n        return false;\n    }\n\n    // Überprüfe alle Zahlen bis zur Quadratwurzel von n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // Wenn n durch i teilbar ist, ist es keine Primzahl\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // Wenn keine Teilbarkeit gefunden wurde, ist die Zahl eine Primzahl\n    return true;\n}\n```\n\nBeispielaufrufe:\n```php\necho var_export(isPrime(6), true) . \"\n\";   // False\necho var_export(isPrime(101), true) . \"\n\";  // True\necho var_export(isPrime(11), true) . \"\n\";   // True\necho var_export(isPrime(13441), true) . \"\n\"; // True\necho var_export(isPrime(61), true) . \"\n\";    // True\necho var_export(isPrime(4), true) . \"\n\";     // False\necho var_export(isPrime(1), true) . \"\n\";     // False\n```"}
{"result_1":"```php\n/**\n * Überprüft, ob eine gegebene Zahl eine Primzahl ist.\n *\n * @param int $n Die zu überprüfende Zahl.\n *\n * @return bool True, wenn die Zahl eine Primzahl ist, false andernfalls.\n */\nfunction isPrime($n) {\n    // Zahlen kleiner als 2 sind keine Primzahlen\n    if ($n < 2) {\n        return false;\n    }\n\n    // Überprüfe alle Zahlen bis zur Quadratwurzel von n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // Wenn n durch i teilbar ist, ist es keine Primzahl\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // Wenn keine Teilbarkeit gefunden wurde, ist die Zahl eine Primzahl\n    return true;\n}\n\n// Testfälle\nprint(isPrime(6) ? \"True\" : \"False\") . \"\n\"; // False\nprint(isPrime(101) ? \"True\" : \"False\") . \"\n\"; // True\nprint(isPrime(11) ? \"True\" : \"False\") . \"\n\"; // True\nprint(isPrime(13441) ? \"True\" : \"False\") . \"\n\"; // True\nprint(isPrime(61) ? \"True\" : \"False\") . \"\n\"; // True\nprint(isPrime(4) ? \"True\" : \"False\") . \"\n\"; // False\nprint(isPrime(1) ? \"True\" : \"False\") . \"\n\"; // False\n```\n\nDiese Funktion überprüft, ob eine gegebene Zahl `$n` eine Primzahl ist. Sie tut dies, indem sie alle Zahlen von 2 bis zur Quadratwurzel von `$n` durchgeht und überprüft, ob `$n` durch eine dieser Zahlen teilbar ist. Wenn `$n` durch eine dieser Zahlen teilbar ist, ist es keine Primzahl und die Funktion gibt `false` zurück. Wenn keine Teilbarkeit gefunden wird, ist die Zahl eine Primzahl und die Funktion gibt `true` zurück.\n\nDie Testfälle am Ende des Codes überprüfen die Funktionsweise mit verschiedenen Zahlen und geben das Ergebnis aus."}
{"result_2":"```php\n/**\n * Überprüft, ob eine gegebene Zahl eine Primzahl ist.\n *\n * @param int $n Die zu überprüfende Zahl.\n *\n * @return bool True, wenn die Zahl eine Primzahl ist, andernfalls false.\n */\nfunction isPrime($n) {\n    // Zahlen kleiner als 2 sind keine Primzahlen\n    if ($n < 2) {\n        return false;\n    }\n\n    // Überprüfe alle Zahlen bis zur Quadratwurzel von n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // Wenn n durch i teilbar ist, ist es keine Primzahl\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // Wenn keine Teilbarkeit gefunden wurde, ist die Zahl eine Primzahl\n    return true;\n}\n```\n\nBeispielaufrufe:\n\n```php\necho var_dump(isPrime(6));   // bool(false)\necho var_dump(isPrime(101)); // bool(true)\necho var_dump(isPrime(11));  // bool(true)\necho var_dump(isPrime(13441)); // bool(true)\necho var_dump(isPrime(61));   // bool(true)\necho var_dump(isPrime(4));    // bool(false)\necho var_dump(isPrime(1));    // bool(false)\n```"}
{"result_3":"```php\n/**\n * Überprüft, ob eine gegebene Zahl eine Primzahl ist.\n *\n * @param int $n Die zu überprüfende Zahl.\n *\n * @return bool True, wenn die Zahl eine Primzahl ist, false andernfalls.\n */\nfunction isPrime($n) {\n    // Zahlen kleiner als 2 sind keine Primzahlen\n    if ($n < 2) {\n        return false;\n    }\n\n    // Überprüfe alle Zahlen bis zur Quadratwurzel von n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // Wenn n durch i teilbar ist, ist es keine Primzahl\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // Wenn keine Teilbarkeit gefunden wurde, ist die Zahl eine Primzahl\n    return true;\n}\n```\n\nBeispielaufrufe:\n\n```php\necho var_dump(isPrime(6));   // bool(false)\necho var_dump(isPrime(101)); // bool(true)\necho var_dump(isPrime(11));  // bool(true)\necho var_dump(isPrime(13441)); // bool(true)\necho var_dump(isPrime(61));   // bool(true)\necho var_dump(isPrime(4));    // bool(false)\necho var_dump(isPrime(1));    // bool(false)\n```\n\nHinweis: Die Funktion `isPrime` ist nicht für sehr große Zahlen optimiert, da sie alle Zahlen bis zur Quadratwurzel von `$n` überprüft. Für sehr große Zahlen kann die Funktion `isPrime` langsam sein. Es gibt jedoch effizientere Algorithmen, um Primzahlen zu überprüfen, wie zum Beispiel der Miller-Rabin-Test."}
{"result_4":"```php\n/**\n * Überprüft, ob eine gegebene Zahl eine Primzahl ist.\n *\n * @param int $n Die zu überprüfende Zahl.\n *\n * @return bool True, wenn die Zahl eine Primzahl ist, andernfalls False.\n */\nfunction isPrime($n) {\n    // Zahlen kleiner als 2 sind keine Primzahlen\n    if ($n < 2) {\n        return false;\n    }\n\n    // Überprüfe alle Zahlen bis zur Quadratwurzel von n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // Wenn n durch i teilbar ist, ist es keine Primzahl\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // Wenn keine Teilbarkeit gefunden wurde, ist die Zahl eine Primzahl\n    return true;\n}\n```\n\nBeispielaufrufe:\n\n```php\necho var_export(isPrime(6), true) . \"\n\";   // False\necho var_export(isPrime(101), true) . \"\n\";  // True\necho var_export(isPrime(11), true) . \"\n\";   // True\necho var_export(isPrime(13441), true) . \"\n\"; // True\necho var_export(isPrime(61), true) . \"\n\";    // True\necho var_export(isPrime(4), true) . \"\n\";     // False\necho var_export(isPrime(1), true) . \"\n\";     // False\n```\n\nDiese Funktion überprüft, ob eine Zahl $n$ eine Primzahl ist. Sie tut dies, indem sie alle Zahlen von 2 bis zur Quadratwurzel von $n$ durchgeht und überprüft, ob $n$ durch irgendeine dieser Zahlen teilbar ist. Wenn $n$ durch keine dieser Zahlen teilbar ist, ist es eine Primzahl und die Funktion gibt `true` zurück. Andernfalls gibt sie `false` zurück."}
