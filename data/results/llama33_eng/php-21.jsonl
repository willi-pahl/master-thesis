{"result_0":"```php\n/**\n * Returns the n-th Fibonacci number.\n *\n * @param int $n The position of the Fibonacci number to return.\n * @return int The n-th Fibonacci number.\n */\nfunction fib($n) {\n    // Base cases: F(1) = 1, F(2) = 1\n    if ($n <= 2) {\n        return 1;\n    }\n\n    // Initialize variables for the previous two numbers in the sequence\n    $a = 1;\n    $b = 1;\n\n    // Calculate the n-th Fibonacci number\n    for ($i = 3; $i <= $n; $i++) {\n        // Calculate the next number as the sum of the previous two\n        $temp = $a + $b;\n        // Update the previous two numbers\n        $a = $b;\n        $b = $temp;\n    }\n\n    // Return the n-th Fibonacci number\n    return $b;\n}\n\n// Test cases\nprint(fib(10) . \"\n\");  // Output: 55\nprint(fib(1) . \"\n\");   // Output: 1\nprint(fib(8) . \"\n\");   // Output: 21\n```\n\nThis solution uses an iterative approach to calculate the n-th Fibonacci number, which is more efficient than a recursive approach for large values of `n`. The function initializes variables for the previous two numbers in the sequence and then calculates each subsequent number as the sum of the previous two. The base cases are handled explicitly at the beginning of the function."}
{"result_1":"```php\n/**\n * Returns the n-th Fibonacci number.\n *\n * @param int $n The position of the Fibonacci number to return.\n * @return int The n-th Fibonacci number.\n */\nfunction fib($n) {\n    // Base cases: F(1) = 1, F(2) = 1\n    if ($n <= 2) {\n        return 1;\n    }\n\n    // Initialize variables for the previous two numbers in the sequence\n    $a = 1;\n    $b = 1;\n\n    // Calculate the n-th Fibonacci number\n    for ($i = 3; $i <= $n; $i++) {\n        // Calculate the next number as the sum of the previous two\n        $temp = $a + $b;\n        // Update the previous two numbers\n        $a = $b;\n        $b = $temp;\n    }\n\n    // Return the n-th Fibonacci number\n    return $b;\n}\n\n// Test cases\necho fib(10) . \"\n\";  // Output: 55\necho fib(1) . \"\n\";   // Output: 1\necho fib(8) . \"\n\";   // Output: 21\n```\n\nThis solution uses an iterative approach to calculate the n-th Fibonacci number, which is more efficient than a recursive approach for large values of `n`. The function initializes variables `a` and `b` to the first two numbers in the sequence (both 1), then calculates each subsequent number as the sum of the previous two. After calculating the n-th number, it returns the result.\n\n**Example Use Cases:**\n\n* `fib(10)` returns `55`, which is the 10th Fibonacci number.\n* `fib(1)` returns `1`, which is the first Fibonacci number.\n* `fib(8)` returns `21`, which is the 8th Fibonacci number."}
{"result_2":"```php\n/**\n * Returns the n-th Fibonacci number.\n *\n * @param int $n The position of the Fibonacci number to return.\n * @return int The n-th Fibonacci number.\n */\nfunction fib($n) {\n    // Base cases: F(1) = 1, F(2) = 1\n    if ($n <= 2) {\n        return 1;\n    }\n\n    // Initialize variables for the previous two numbers in the sequence\n    $a = 1;\n    $b = 1;\n\n    // Calculate the n-th Fibonacci number\n    for ($i = 3; $i <= $n; $i++) {\n        // The next number is the sum of the previous two\n        $temp = $a + $b;\n        $a = $b;\n        $b = $temp;\n    }\n\n    // Return the n-th Fibonacci number\n    return $b;\n}\n\n// Test cases\necho fib(10) . \"\n\";  // Output: 55\necho fib(1) . \"\n\";   // Output: 1\necho fib(8) . \"\n\";   // Output: 21\n```\n\nThis solution uses an iterative approach to calculate the n-th Fibonacci number, which is more efficient than a recursive approach for large values of `n`. The function starts with the base cases where `n` is less than or equal to 2, and then calculates the n-th Fibonacci number using a loop. The time complexity of this solution is O(n), making it suitable for calculating large Fibonacci numbers."}
{"result_3":"```php\n/**\n * Returns the n-th Fibonacci number.\n *\n * @param int $n The position of the Fibonacci number to return.\n * @return int The n-th Fibonacci number.\n */\nfunction fib($n) {\n    // Base cases: F(1) = 1, F(2) = 1\n    if ($n <= 2) {\n        return 1;\n    }\n\n    // Initialize variables for the previous two numbers in the sequence\n    $prev = 1;\n    $curr = 1;\n\n    // Calculate the n-th Fibonacci number\n    for ($i = 3; $i <= $n; $i++) {\n        // Calculate the next number as the sum of the previous two\n        $next = $prev + $curr;\n\n        // Update the previous two numbers\n        $prev = $curr;\n        $curr = $next;\n    }\n\n    // Return the n-th Fibonacci number\n    return $curr;\n}\n\n// Test cases\necho fib(10) . \"\n\";  // Output: 55\necho fib(1) . \"\n\";   // Output: 1\necho fib(8) . \"\n\";   // Output: 21\n```\n\nThis solution uses an iterative approach to calculate the n-th Fibonacci number, which is more efficient than a recursive approach for large values of `n`. The function initializes variables for the previous two numbers in the sequence and then calculates the next number as the sum of the previous two. This process continues until the n-th Fibonacci number is reached."}
{"result_4":"```php\n/**\n * Returns the n-th Fibonacci number.\n *\n * @param int $n The position of the Fibonacci number to return.\n * @return int The n-th Fibonacci number.\n */\nfunction fib($n) {\n    // Base cases: F(1) = 1, F(2) = 1\n    if ($n <= 2) {\n        return 1;\n    }\n\n    // Initialize variables for the previous two numbers in the sequence\n    $a = 1;\n    $b = 1;\n\n    // Calculate the n-th Fibonacci number\n    for ($i = 3; $i <= $n; $i++) {\n        // The next number is the sum of the previous two\n        $temp = $a + $b;\n        $a = $b;\n        $b = $temp;\n    }\n\n    // Return the n-th Fibonacci number\n    return $b;\n}\n\n// Test cases\nprint(fib(10) . \"\n\");  // Output: 55\nprint(fib(1) . \"\n\");   // Output: 1\nprint(fib(8) . \"\n\");   // Output: 21\n```\n\nThis solution uses an iterative approach to calculate the n-th Fibonacci number. It starts with the base cases where `n` is less than or equal to 2, and then iterates from 3 to `n`, calculating each subsequent Fibonacci number as the sum of the previous two. The function returns the calculated n-th Fibonacci number.\n\n**Explanation:**\n\n*   We define a function `fib($n)` that takes an integer `$n` as input.\n*   For base cases where `$n` is less than or equal to 2, we return 1 since F(1) = F(2) = 1 in the Fibonacci sequence.\n*   We initialize variables `$a` and `$b` to 1, representing the first two numbers in the Fibonacci sequence.\n*   The function then enters a loop from 3 to `$n`. In each iteration:\n    *   It calculates the next number in the sequence as the sum of the previous two (`$temp = $a + $b;`).\n    *   Updates `$a` and `$b` for the next iteration, effectively shifting the sequence forward by one position.\n*   After calculating all numbers up to the n-th position, the function returns the last calculated number, which is the n-th Fibonacci number (`$b`).\n\n**Time Complexity:** O(n)\n\n**Space Complexity:** O(1)"}
