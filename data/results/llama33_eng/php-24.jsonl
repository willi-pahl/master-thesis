{"result_0":"```php\n/**\n * This function calculates the sum of numbers from 1 to n.\n *\n * @param int $n The upper limit for the sum calculation.\n *\n * @return int The sum of numbers from 1 to n.\n */\nfunction sumToN($n) {\n    // Calculate the sum using the formula: n * (n + 1) / 2\n    return $n * ($n + 1) / 2;\n}\n\n// Test cases\necho sumToN(30) . \"\n\";  // Output: 465\necho sumToN(100) . \"\n\"; // Output: 5050\necho sumToN(5) . \"\n\";   // Output: 15\necho sumToN(10) . \"\n\";  // Output: 55\necho sumToN(1) . \"\n\";   // Output: 1\n```\n\nThis solution uses the mathematical formula for the sum of an arithmetic series, which is `n * (n + 1) / 2`, where `n` is the number of terms in the series. This approach avoids the need to iterate over all numbers from 1 to `n`, resulting in a more efficient calculation."}
{"result_1":"```php\n/**\n * You are an expert PHP programmer, and here is your task.\n * sum_to_n is a function that sums numbers from 1 to n.\n * >>> sum_to_n(30)\n * 465\n * >>> sum_to_n(100)\n * 5050\n * >>> sum_to_n(5)\n * 15\n * >>> sum_to_n(10)\n * 55\n * >>> sum_to_n(1)\n * 1\n *\n */\nfunction sumToN($n){\n    // Calculate the sum of numbers from 1 to n using the formula for the sum of an arithmetic series: n*(n+1)/2\n    $sum = (int) ($n * ($n + 1) / 2);\n    \n    // Return the calculated sum\n    return $sum;\n}\n\n// Test cases\necho \"Sum of numbers from 1 to 30: \" . sumToN(30) . \"\n\";\necho \"Sum of numbers from 1 to 100: \" . sumToN(100) . \"\n\";\necho \"Sum of numbers from 1 to 5: \" . sumToN(5) . \"\n\";\necho \"Sum of numbers from 1 to 10: \" . sumToN(10) . \"\n\";\necho \"Sum of numbers from 1 to 1: \" . sumToN(1) . \"\n\";\n\n```"}
{"result_2":"```php\n/**\n * This function calculates the sum of numbers from 1 to n.\n *\n * @param int $n The upper limit for the sum.\n * @return int The sum of numbers from 1 to n.\n */\nfunction sumToN($n) {\n    // Calculate the sum using the formula: n * (n + 1) / 2\n    return $n * ($n + 1) / 2;\n}\n\n// Test cases\necho sumToN(30) . \"\n\";  // Output: 465\necho sumToN(100) . \"\n\"; // Output: 5050\necho sumToN(5) . \"\n\";   // Output: 15\necho sumToN(10) . \"\n\";  // Output: 55\necho sumToN(1) . \"\n\";   // Output: 1\n```\n\nThis solution uses the formula for the sum of an arithmetic series, which is `n * (n + 1) / 2`, where `n` is the number of terms in the series. This approach avoids iterating over all numbers from 1 to `n`, resulting in a more efficient calculation."}
{"result_3":"```php\n/**\n * This function calculates the sum of numbers from 1 to n.\n *\n * @param int $n The upper limit for the sum.\n * @return int The sum of numbers from 1 to n.\n */\nfunction sumToN($n) {\n    // Calculate the sum using the formula: n * (n + 1) / 2\n    return $n * ($n + 1) / 2;\n}\n\n// Test cases\necho sumToN(30) . \"\n\";  // Output: 465\necho sumToN(100) . \"\n\"; // Output: 5050\necho sumToN(5) . \"\n\";   // Output: 15\necho sumToN(10) . \"\n\";  // Output: 55\necho sumToN(1) . \"\n\";   // Output: 1\n```\n\nThis solution uses the mathematical formula for the sum of an arithmetic series, which is `n * (n + 1) / 2`, where `n` is the number of terms in the series. This approach avoids the need for a loop and makes the function more efficient."}
{"result_4":"```php\n/**\n * This function calculates the sum of numbers from 1 to n.\n *\n * @param int $n The upper limit for the sum.\n * @return int The sum of numbers from 1 to n.\n */\nfunction sumToN($n) {\n    // Using the formula for the sum of an arithmetic series: n * (a1 + an) / 2\n    // where a1 is the first term, an is the last term, and n is the number of terms\n    // In this case, a1 = 1 and an = $n\n    return $n * ($n + 1) / 2;\n}\n\n// Test cases\necho sumToN(30) . \"\n\";  // Output: 465\necho sumToN(100) . \"\n\";  // Output: 5050\necho sumToN(5) . \"\n\";    // Output: 15\necho sumToN(10) . \"\n\";   // Output: 55\necho sumToN(1) . \"\n\";    // Output: 1\n```\n\nThis solution uses the formula for the sum of an arithmetic series, which is `n * (a1 + an) / 2`, where `n` is the number of terms, `a1` is the first term, and `an` is the last term. In this case, `a1 = 1` and `an = $n`. This approach avoids iterating over all numbers from 1 to `$n`, resulting in a more efficient solution with a time complexity of O(1)."}
