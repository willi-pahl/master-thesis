{"result_0":"```php\n/**\n * Returns the closest integer to a given number.\n * If the number is equidistant from two integers, round it away from zero.\n *\n * @param string $value A string representing a number.\n * @return int The closest integer to the given number.\n */\nfunction closestInteger($value) {\n    // Convert the input value to a float\n    $floatValue = (float) $value;\n\n    // Calculate the decimal part of the number\n    $decimalPart = $floatValue - floor($floatValue);\n\n    // If the decimal part is 0.5, we need to round away from zero\n    if ($decimalPart == 0.5) {\n        // Check if the number is negative or positive\n        if ($floatValue < 0) {\n            // If the number is negative, return the next lower integer\n            return floor($floatValue) - 1;\n        } else {\n            // If the number is positive, return the next higher integer\n            return ceil($floatValue);\n        }\n    }\n\n    // For all other cases, use the built-in round function with PHP_ROUND_HALF_UP\n    // This will round to the nearest integer, rounding ties away from zero\n    $roundedValue = round($floatValue, 0, PHP_ROUND_HALF_UP);\n\n    // Return the rounded value as an integer\n    return (int) $roundedValue;\n}\n\n// Test cases\necho closestInteger(\"10\") . \"\n\";   // Expected output: 10\necho closestInteger(\"15.3\") . \"\n\"; // Expected output: 15\necho closestInteger(\"14.5\") . \"\n\"; // Expected output: 15\necho closestInteger(\"-14.5\") . \"\n\"; // Expected output: -15\n```"}
{"result_1":"```php\n/**\n * Returns the closest integer to a given number.\n * If the number is equidistant from two integers, round it away from zero.\n *\n * @param string $value A string representing a number.\n * @return int The closest integer to the given number.\n */\nfunction closestInteger($value) {\n    // Convert the input value to a float\n    $floatValue = (float) $value;\n\n    // Calculate the absolute difference between the float value and its integer part\n    $decimalPart = abs($floatValue - round($floatValue));\n\n    // If the decimal part is 0.5, we need to round away from zero\n    if ($decimalPart == 0.5) {\n        // Check if the number is negative or positive\n        if ($floatValue < 0) {\n            // If the number is negative, subtract 1 from its integer part\n            return floor($floatValue);\n        } else {\n            // If the number is positive, add 1 to its integer part\n            return ceil($floatValue);\n        }\n    }\n\n    // For other decimal parts, simply round to the nearest integer\n    return round($floatValue);\n}\n\n// Test cases\necho closestInteger(\"10\") . \"\n\";   // Output: 10\necho closestInteger(\"15.3\") . \"\n\"; // Output: 15\necho closestInteger(\"14.5\") . \"\n\"; // Output: 15\necho closestInteger(\"-14.5\") . \"\n\"; // Output: -15\n```\n\nThis solution first converts the input string to a float, then calculates the absolute difference between the float value and its integer part. If this difference is exactly 0.5, it checks whether the number is negative or positive and rounds accordingly. For other decimal parts, it simply rounds to the nearest integer using PHP's built-in `round` function."}
{"result_2":"```php\n/**\n * Returns the closest integer to a given number.\n * If the number is equidistant from two integers, round it away from zero.\n *\n * @param string $value A string representing a number.\n * @return int The closest integer to the given number.\n */\nfunction closestInteger($value) {\n    // Convert the input value to a float\n    $floatValue = (float) $value;\n\n    // Calculate the decimal part of the number\n    $decimalPart = $floatValue - floor($floatValue);\n\n    // If the decimal part is 0.5, we need to round away from zero\n    if ($decimalPart == 0.5) {\n        // Check if the number is negative or positive\n        if ($floatValue < 0) {\n            return floor($floatValue - 1);\n        } else {\n            return ceil($floatValue);\n        }\n    }\n\n    // For other decimal parts, we can use the built-in round function\n    return round($floatValue);\n}\n\n// Test cases\necho closestInteger(\"10\") . \"\n\";   // Expected output: 10\necho closestInteger(\"15.3\") . \"\n\"; // Expected output: 15\necho closestInteger(\"14.5\") . \"\n\"; // Expected output: 15\necho closestInteger(\"-14.5\") . \"\n\"; // Expected output: -15\n```"}
{"result_3":"```php\n/**\n * Returns the closest integer to a given number.\n * If the number is equidistant from two integers, round it away from zero.\n *\n * @param string $value A string representing a number.\n * @return int The closest integer to the given number.\n */\nfunction closestInteger($value) {\n    // Convert the input value to a float\n    $floatValue = (float) $value;\n\n    // Calculate the decimal part of the number\n    $decimalPart = $floatValue - floor($floatValue);\n\n    // If the decimal part is 0.5, we need to round away from zero\n    if ($decimalPart == 0.5) {\n        // Check if the number is negative or positive\n        if ($floatValue < 0) {\n            // If the number is negative, subtract 1 from the floor value\n            return floor($floatValue) - 1;\n        } else {\n            // If the number is positive, add 1 to the floor value\n            return floor($floatValue) + 1;\n        }\n    }\n\n    // For all other cases, use the built-in round function with PHP_ROUND_HALF_UP\n    // This will round to the nearest integer, and if equidistant, it rounds away from zero\n    $roundedValue = round($floatValue, 0, PHP_ROUND_HALF_UP);\n\n    return $roundedValue;\n}\n\n// Test cases\necho closestInteger(\"10\") . \"\n\";   // Expected output: 10\necho closestInteger(\"15.3\") . \"\n\"; // Expected output: 15\necho closestInteger(\"14.5\") . \"\n\"; // Expected output: 15\necho closestInteger(\"-14.5\") . \"\n\"; // Expected output: -15\n```"}
{"result_4":"```php\n/**\n * Returns the closest integer to the given number.\n * If the number is equidistant from two integers, round it away from zero.\n *\n * @param string $value A string representing a number.\n * @return int The closest integer to the given number.\n */\nfunction closestInteger($value) {\n    // Convert the input value to a float\n    $floatValue = (float) $value;\n\n    // Calculate the decimal part of the number\n    $decimalPart = $floatValue - (int) $floatValue;\n\n    // If the decimal part is 0.5, we need to round away from zero\n    if ($decimalPart == 0.5) {\n        // Check if the number is negative or positive\n        if ($floatValue < 0) {\n            // If the number is negative, subtract 1 to make it an integer and then add 1 to get the closest integer\n            return (int) $floatValue - 1;\n        } else {\n            // If the number is positive, add 1 to make it an integer\n            return (int) $floatValue + 1;\n        }\n    }\n\n    // For other decimal values, use the built-in round function with PHP_ROUND_HALF_UP as the mode\n    // This will round to the nearest integer, and if equidistant, it will round away from zero\n    return round($floatValue, 0, PHP_ROUND_HALF_UP);\n}\n\n// Test cases\necho closestInteger(\"10\") . \"\n\";  // Expected output: 10\necho closestInteger(\"15.3\") . \"\n\";  // Expected output: 15\necho closestInteger(\"14.5\") . \"\n\";  // Expected output: 15\necho closestInteger(\"-14.5\") . \"\n\";  // Expected output: -15\n```"}
