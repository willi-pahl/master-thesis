{"result_0":"```php\n/**\n * Applies a linear transformation to the given list of numbers,\n * such that the smallest number becomes 0 and the largest becomes 1.\n *\n * @param array $numbers A list of numbers (of at least two elements)\n * @return array The transformed list of numbers\n */\nfunction rescaleToUnit($numbers) {\n    // Check if input is an array\n    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('Input must be an array');\n    }\n\n    // Check if array has at least two elements\n    if (count($numbers) < 2) {\n        throw new InvalidArgumentException('Array must have at least two elements');\n    }\n\n    // Find the minimum and maximum values in the array\n    $min = min($numbers);\n    $max = max($numbers);\n\n    // Calculate the range of the input array\n    $range = $max - $min;\n\n    // Apply linear transformation to each number in the array\n    $transformedNumbers = array_map(function ($num) use ($min, $range) {\n        return ($num - $min) / $range;\n    }, $numbers);\n\n    return $transformedNumbers;\n}\n\n// Example usage:\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\n$result = rescaleToUnit($numbers);\nprint_r($result); // Output: Array ( [0] => 0 [1] => 0.25 [2] => 0.5 [3] => 0.75 [4] => 1 )\n```\n\nThis PHP function takes an array of numbers as input, applies a linear transformation to the array such that the smallest number becomes 0 and the largest becomes 1, and returns the transformed array.\n\n**Explanation:**\n\n*   The function first checks if the input is an array and if it has at least two elements. If not, it throws an `InvalidArgumentException`.\n*   It then finds the minimum and maximum values in the array using the built-in `min` and `max` functions.\n*   The range of the input array is calculated by subtracting the minimum value from the maximum value.\n*   The function applies a linear transformation to each number in the array using an anonymous function within `array_map`. This transformation shifts the minimum value to 0 and scales all other values between 0 and 1 based on their position within the range of the input array.\n*   Finally, it returns the transformed array.\n\n**Example Usage:**\n\nThe example usage demonstrates how to call the `rescaleToUnit` function with an array of numbers `[1.0, 2.0, 3.0, 4.0, 5.0]`. The output will be an array where the smallest number (1.0) becomes 0 and the largest number (5.0) becomes 1, with other numbers scaled proportionally: `[0.0, 0.25, 0.5, 0.75, 1.0]`."}
{"result_1":"```php\n/**\n * Rescales a list of numbers to the range [0, 1] using a linear transformation.\n * The smallest number in the list becomes 0 and the largest becomes 1.\n *\n * @param array $numbers A list of numbers (of at least two elements)\n * @return array The rescaled list of numbers\n */\nfunction rescaleToUnit($numbers) {\n    // Check if the input is an array\n    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('Input must be an array');\n    }\n\n    // Check if the array has at least two elements\n    if (count($numbers) < 2) {\n        throw new InvalidArgumentException('Array must have at least two elements');\n    }\n\n    // Find the minimum and maximum values in the array\n    $minValue = min($numbers);\n    $maxValue = max($numbers);\n\n    // Calculate the range of the input array\n    $range = $maxValue - $minValue;\n\n    // Apply the linear transformation to each number in the array\n    $rescaledNumbers = array_map(function ($number) use ($minValue, $range) {\n        return ($number - $minValue) / $range;\n    }, $numbers);\n\n    return $rescaledNumbers;\n}\n\n// Example usage:\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\n$rescaledNumbers = rescaleToUnit($numbers);\nprint_r($rescaledNumbers); // Output: Array ( [0] => 0 [1] => 0.25 [2] => 0.5 [3] => 0.75 [4] => 1 )\n```\n\nThis PHP function takes an array of numbers as input and returns the rescaled array. It first checks if the input is an array and has at least two elements. Then, it finds the minimum and maximum values in the array and calculates the range. Finally, it applies a linear transformation to each number in the array using the formula `(x - min) / (max - min)`, where `x` is each number in the array, `min` is the minimum value, and `max` is the maximum value. The result is an array with values between 0 and 1."}
{"result_2":"```php\n/**\n * Rescales a list of numbers to the range [0, 1] using a linear transformation.\n * The smallest number in the list becomes 0 and the largest becomes 1.\n *\n * @param array $numbers A list of numbers (of at least two elements)\n * @return array The rescaled list of numbers\n */\nfunction rescaleToUnit($numbers) {\n    // Check if the input is an array\n    if (!is_array($numbers)) {\n        throw new InvalidArgumentException('Input must be an array');\n    }\n\n    // Check if the array has at least two elements\n    if (count($numbers) < 2) {\n        throw new InvalidArgumentException('Array must have at least two elements');\n    }\n\n    // Find the minimum and maximum values in the array\n    $min = min($numbers);\n    $max = max($numbers);\n\n    // Calculate the range of the input array\n    $range = $max - $min;\n\n    // Apply the linear transformation to each number in the array\n    $rescaledNumbers = array_map(function ($number) use ($min, $range) {\n        return ($number - $min) / $range;\n    }, $numbers);\n\n    return $rescaledNumbers;\n}\n\n// Example usage:\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\n$rescaledNumbers = rescaleToUnit($numbers);\nprint_r($rescaledNumbers); // Output: Array ( [0] => 0 [1] => 0.25 [2] => 0.5 [3] => 0.75 [4] => 1 )\n```\n\nThis PHP function takes an array of numbers as input, finds the minimum and maximum values in the array, calculates the range, and then applies a linear transformation to each number in the array. The result is an array where the smallest number becomes 0 and the largest becomes 1. Note that this implementation uses `array_map` for concise code, but it requires PHP 7.0 or later due to the use of the `use` keyword in the closure. For earlier versions of PHP, you can replace `array_map` with a traditional `foreach` loop.\n\n**Explanation:**\n\n*   The function first checks if the input is an array and has at least two elements.\n*   It then finds the minimum (`$min`) and maximum (`$max`) values in the array using built-in `min` and `max` functions.\n*   The range of the input array is calculated as `$max - $min`.\n*   A linear transformation is applied to each number in the array. For a given number, this transformation subtracts the minimum value from it (shifting all values down) and then divides by the range (scaling the values).\n*   Finally, the function returns an array of rescaled numbers.\n\n**Example Use Case:**\n\nSuppose you have a list of exam scores that you want to normalize so that the lowest score becomes 0 (worst performance) and the highest score becomes 1 (best performance). You can use this `rescaleToUnit` function for such normalization."}
{"result_3":"```php\n/**\n * Applies a linear transformation to the given list of numbers such that the smallest number becomes 0 and the largest becomes 1.\n *\n * @param array $numbers A list of numbers with at least two elements.\n * @return array The transformed list of numbers.\n */\nfunction rescaleToUnit($numbers) {\n    // Find the minimum and maximum values in the list\n    $minValue = min($numbers);\n    $maxValue = max($numbers);\n\n    // Calculate the range of the list\n    $range = $maxValue - $minValue;\n\n    // Apply the linear transformation to each number in the list\n    $transformedNumbers = array_map(function ($number) use ($minValue, $range) {\n        return ($number - $minValue) / $range;\n    }, $numbers);\n\n    // Return the transformed list of numbers\n    return $transformedNumbers;\n}\n\n// Example usage:\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\n$result = rescaleToUnit($numbers);\nprint_r($result);  // Output: Array ( [0] => 0 [1] => 0.25 [2] => 0.5 [3] => 0.75 [4] => 1 )\n```\n\nThis PHP function takes a list of numbers as input, finds the minimum and maximum values in the list, calculates the range, and then applies a linear transformation to each number in the list such that the smallest number becomes 0 and the largest becomes 1. The transformed list is then returned.\n\n**Explanation:**\n\n*   We first find the minimum (`$minValue`) and maximum (`$maxValue`) values in the input list `$numbers`.\n*   Then, we calculate the range of the list by subtracting the minimum value from the maximum value (`$range = $maxValue - $minValue`).\n*   Next, we apply a linear transformation to each number in the list using `array_map`. For each number (`$number`), we subtract the minimum value and then divide by the range. This transforms the number to a value between 0 (for the smallest number) and 1 (for the largest number).\n*   Finally, we return the transformed list of numbers.\n\n**Example Usage:**\n\nIn the provided example, the input list is `[1.0, 2.0, 3.0, 4.0, 5.0]`. After applying the linear transformation, the output will be `[0.0, 0.25, 0.5, 0.75, 1.0]`, which are the transformed numbers where the smallest becomes 0 and the largest becomes 1."}
{"result_4":"```php\n/**\n * Rescales a list of numbers to the range [0, 1] by applying a linear transformation.\n * The smallest number in the list becomes 0 and the largest becomes 1.\n *\n * @param array $numbers A list of numbers with at least two elements.\n * @return array The rescaled list of numbers.\n */\nfunction rescaleToUnit($numbers) {\n    // Check if the input list has at least two elements\n    if (count($numbers) < 2) {\n        throw new Exception(\"Input list must have at least two elements.\");\n    }\n\n    // Find the minimum and maximum values in the list\n    $minValue = min($numbers);\n    $maxValue = max($numbers);\n\n    // Calculate the range of the input list\n    $range = $maxValue - $minValue;\n\n    // Apply the linear transformation to each number in the list\n    $rescaledNumbers = array_map(function ($number) use ($minValue, $range) {\n        return ($number - $minValue) / $range;\n    }, $numbers);\n\n    return $rescaledNumbers;\n}\n\n// Example usage:\n$numbers = [1.0, 2.0, 3.0, 4.0, 5.0];\n$result = rescaleToUnit($numbers);\nprint_r($result); // Output: Array ( [0] => 0 [1] => 0.25 [2] => 0.5 [3] => 0.75 [4] => 1 )\n```\n\nThis PHP function takes a list of numbers as input, applies a linear transformation to rescale the numbers to the range [0, 1], and returns the rescaled list. The smallest number in the original list becomes 0, and the largest becomes 1. The example usage demonstrates how to use this function with a sample list of numbers."}
