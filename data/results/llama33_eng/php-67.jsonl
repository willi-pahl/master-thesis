{"result_0":"```php\n/**\n * Sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, orders them based on their index in original list.\n *\n * @param array $nums The list of integers to be sorted.\n * @return array The sorted list of integers.\n */\nfunction orderByPoints($nums) {\n    // Create a new array to store the sum of digits for each number and its original index\n    $sums = [];\n    foreach ($nums as $index => $num) {\n        // Calculate the sum of digits for the current number\n        $digitSum = 0;\n        $absNum = abs($num); // Take the absolute value to handle negative numbers\n        while ($absNum > 0) {\n            $digitSum += $absNum % 10; // Add the last digit to the sum\n            $absNum = (int)($absNum / 10); // Remove the last digit\n        }\n        \n        // Store the sum of digits and the original index in the new array\n        $sums[] = [$digitSum, $index];\n    }\n\n    // Sort the new array based on the sum of digits and then by the original index\n    usort($sums, function($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1]; // If sums are equal, sort by original index\n        }\n        return $a[0] - $b[0]; // Otherwise, sort by sum of digits\n    });\n\n    // Create the final sorted array based on the sorted indices\n    $sortedNums = [];\n    foreach ($sums as $pair) {\n        $sortedNums[] = $nums[$pair[1]];\n    }\n\n    return $sortedNums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Should print [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Should print []\n```\n\nThis solution first calculates the sum of digits for each number in the input array and stores it along with its original index in a new array. Then, it sorts this new array based on the sum of digits and the original index. Finally, it creates the final sorted array by using the sorted indices to retrieve the corresponding numbers from the original array."}
{"result_1":"```php\n/**\n * This function sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, order them based on their index in original list.\n *\n * @param array $nums The list of integers to be sorted.\n * @return array The sorted list of integers.\n */\nfunction orderByPoints($nums) {\n    // First, we calculate the sum of digits for each number and store it along with its original index\n    $sums = [];\n    foreach ($nums as $index => $num) {\n        // Calculate the sum of digits for the current number\n        $digitSum = 0;\n        $absNum = abs($num); // Take the absolute value to handle negative numbers\n        while ($absNum > 0) {\n            $digitSum += $absNum % 10; // Add the last digit to the sum\n            $absNum = (int)($absNum / 10); // Remove the last digit\n        }\n        \n        // Store the sum of digits, the original number and its index in the array\n        $sums[] = [$digitSum, $num, $index];\n    }\n\n    // Then, we sort this array based on the sum of digits and the original index\n    usort($sums, function($a, $b) {\n        if ($a[0] == $b[0]) { // If the sums are equal, compare based on the original index\n            return $a[2] - $b[2];\n        } else { // Otherwise, compare based on the sum of digits\n            return $a[0] - $b[0];\n        }\n    });\n\n    // Finally, we extract and return the sorted list of numbers\n    $sortedNums = array_column($sums, 1);\n    return $sortedNums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Should print [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Should print []\n```\n\nThis solution works as follows:\n\n- It calculates the sum of digits for each number in the input list.\n- It stores this sum along with the original number and its index in a new array.\n- It sorts this new array based on the sum of digits (and the original index if sums are equal).\n- Finally, it extracts and returns the sorted list of numbers.\n\nNote: The `usort` function is used for sorting because it allows us to define a custom comparison function. This is necessary here because we need to compare both the sum of digits and the original index in case of a tie."}
{"result_2":"```php\n/**\n * This function sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, order them based on their index in original list.\n *\n * @param array $nums The list of integers to be sorted.\n * @return array The sorted list of integers.\n */\nfunction orderByPoints($nums) {\n    // First, we calculate the sum of digits for each number and store it along with its original index\n    $sums = array();\n    foreach ($nums as $i => $num) {\n        // Calculate the sum of digits\n        $digitSum = 0;\n        $absNum = abs($num); // Take absolute value to handle negative numbers\n        while ($absNum > 0) {\n            $digitSum += $absNum % 10; // Add last digit to sum\n            $absNum = (int)($absNum / 10); // Remove last digit\n        }\n        \n        // Store the sum of digits and original index in an array\n        $sums[] = [$digitSum, $i];\n    }\n\n    // Then, we sort this new list based on the sum of digits and original index\n    usort($sums, function($a, $b) {\n        if ($a[0] == $b[0]) { // If sums are equal, compare indices\n            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0]; // Compare sums of digits\n    });\n\n    // Finally, we construct the sorted list based on the sorted indices\n    $sortedNums = array();\n    foreach ($sums as $pair) {\n        $sortedNums[] = $nums[$pair[1]];\n    }\n\n    return $sortedNums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Should print [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Should print []\n```\n\nThis solution works as follows:\n\n- It calculates the sum of digits for each number in the input list.\n- It stores these sums along with their original indices in a new array.\n- It sorts this new array based on the sums and original indices.\n- Finally, it constructs the sorted list by looking up the numbers at their sorted indices.\n\nThis approach ensures that numbers are ordered first by the sum of their digits (in ascending order), and then by their original index if there's a tie in the digit sums."}
{"result_3":"```php\n/**\n * This function sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, order them based on their index in original list.\n *\n * @param array $nums The list of integers to be sorted.\n * @return array The sorted list of integers.\n */\nfunction orderByPoints($nums) {\n    // First, we calculate the sum of digits for each number and store it along with its original index\n    $sums = array();\n    foreach ($nums as $i => $num) {\n        $digitSum = 0;\n        $absNum = abs($num); // We use absolute value to handle negative numbers correctly\n        while ($absNum > 0) {\n            $digitSum += $absNum % 10; // Add the last digit to the sum\n            $absNum = (int)($absNum / 10); // Remove the last digit\n        }\n        $sums[] = array('index' => $i, 'num' => $num, 'sum' => $digitSum);\n    }\n\n    // Then, we sort this list based on the sum of digits and original index\n    usort($sums, function($a, $b) {\n        if ($a['sum'] == $b['sum']) {\n            return $a['index'] - $b['index'];\n        }\n        return $a['sum'] - $b['sum'];\n    });\n\n    // Finally, we extract the sorted numbers\n    $sortedNums = array();\n    foreach ($sums as $item) {\n        $sortedNums[] = $item['num'];\n    }\n\n    return $sortedNums;\n}\n\n// Test cases\nprint_r(orderByPoints(array(1, 11, -1, -11, -12))); // Should print [-1, -11, 1, -12, 11]\nprint_r(orderByPoints(array())); // Should print []\n```\n\nThis solution works as follows:\n\n- It calculates the sum of digits for each number in the input list.\n- It stores this sum along with the original index and the number itself in an array.\n- It sorts this array based on the sum of digits (and then by the original index if sums are equal).\n- Finally, it extracts the sorted numbers from this array.\n\nThe `usort` function is used to sort the list. This function takes a comparison function as its argument. In our case, this comparison function first checks if the sums of digits are equal. If they are, it compares the original indices (to ensure stability). Otherwise, it simply compares the sums of digits."}
{"result_4":"```php\n/**\n * This function sorts the given list of integers in ascending order according to the sum of their digits.\n * If there are several items with similar sum of their digits, \n * it orders them based on their index in original list.\n *\n * @param array $nums The list of integers to be sorted.\n * @return array The sorted list of integers.\n */\nfunction orderByPoints($nums) {\n    // First, we calculate the sum of digits for each number and store it along with its index\n    $sums = [];\n    foreach ($nums as $index => $num) {\n        // Calculate the sum of digits\n        $digitSum = 0;\n        $absNum = abs($num); // We use absolute value to calculate digit sum\n        while ($absNum > 0) {\n            $digitSum += $absNum % 10;\n            $absNum = (int)($absNum / 10);\n        }\n        \n        // Store the sum and index in an array\n        $sums[] = [$digitSum, $index];\n    }\n\n    // Then we sort this list based on the sums and original indices\n    usort($sums, function($a, $b) {\n        if ($a[0] == $b[0]) { // If sums are equal, compare by index\n            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0]; // Otherwise, compare by sum\n    });\n\n    // Finally, we construct the sorted list based on the sorted sums and indices\n    $sortedNums = [];\n    foreach ($sums as $item) {\n        $sortedNums[] = $nums[$item[1]];\n    }\n\n    return $sortedNums;\n}\n\n// Test cases\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Should print [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Should print []\n```\n\nThis solution first calculates the sum of digits for each number in the list and stores it along with its index. Then it sorts this list based on the sums and original indices. Finally, it constructs the sorted list based on the sorted sums and indices.\n\nThe `usort` function is used to sort the list of sums and indices. It takes a comparison function as an argument, which compares two elements at a time. If the sums are equal, it compares by index; otherwise, it compares by sum.\n\nNote that this solution assumes that the input list contains only integers. If the input can contain other types of numbers (e.g., floats), you may need to adjust the digit sum calculation accordingly."}
