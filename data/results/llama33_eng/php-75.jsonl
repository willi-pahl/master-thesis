{"result_0":"```php\n/**\n * Converts an integer to its Roman numeral equivalent as a string in lowercase.\n *\n * @param int $number A positive integer between 1 and 1000 (inclusive).\n *\n * @return string The Roman numeral equivalent of the input number in lowercase.\n */\nfunction intToMiniRoman($number) {\n    // Define the mapping of decimal values to their corresponding Roman numerals\n    $decimalToRoman = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the Roman numeral representation\n    $romanNumeral = '';\n\n    // Iterate over the decimal values in descending order\n    foreach ($decimalToRoman as $decimal => $roman) {\n        // Calculate how many times the current decimal value fits into the number\n        $count = (int) ($number / $decimal);\n\n        // Subtract the decimal value multiplied by the count from the number\n        $number -= $count * $decimal;\n\n        // Append the Roman numeral representation to the result, repeated 'count' times\n        $romanNumeral .= str_repeat($roman, $count);\n    }\n\n    // Return the resulting Roman numeral string in lowercase\n    return strtolower($romanNumeral);\n}\n\n// Test cases\nprint(intToMiniRoman(19) . \"\n\");  // Output: xix\nprint(intToMiniRoman(152) . \"\n\"); // Output: clii\nprint(intToMiniRoman(426) . \"\n\"); // Output: cdxxvi\n```\n\nThis solution defines a function `intToMiniRoman` that takes an integer as input and returns its Roman numeral equivalent as a string in lowercase. It uses a mapping of decimal values to their corresponding Roman numerals, iterating over the decimal values in descending order to construct the Roman numeral representation. The result is then returned in lowercase.\n\nThe test cases demonstrate the correctness of the implementation by comparing the output with the expected results for different input numbers."}
{"result_1":"```php\n/**\n * Converts an integer to its Roman numeral equivalent as a string in lowercase.\n *\n * @param int $number A positive integer between 1 and 1000 (inclusive).\n *\n * @return string The Roman numeral equivalent of the input number in lowercase.\n */\nfunction intToMiniRoman($number) {\n    // Define the mapping of decimal values to their corresponding Roman numerals\n    $decimalToRoman = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the Roman numeral\n    $romanNumeral = '';\n\n    // Iterate over the decimal values in descending order\n    foreach ($decimalToRoman as $decimal => $roman) {\n        // Calculate how many times the current decimal value fits into the number\n        $count = (int) ($number / $decimal);\n\n        // Subtract the decimal value multiplied by the count from the number\n        $number -= $count * $decimal;\n\n        // Append the Roman numeral to the result, repeated 'count' times\n        $romanNumeral .= str_repeat($roman, $count);\n    }\n\n    // Return the resulting Roman numeral in lowercase\n    return strtolower($romanNumeral);\n}\n\n// Test cases\nprint(intToMiniRoman(19) . \"\n\");  // Output: xix\nprint(intToMiniRoman(152) . \"\n\"); // Output: clii\nprint(intToMiniRoman(426) . \"\n\"); // Output: cdxxvi\n```\n\nThis solution defines a function `intToMiniRoman` that takes an integer as input and returns its Roman numeral equivalent as a string in lowercase. The function uses an array to map decimal values to their corresponding Roman numerals. It then iterates over the decimal values, calculates how many times each value fits into the number, and appends the corresponding Roman numeral to the result. Finally, it returns the resulting Roman numeral in lowercase.\n\nThe test cases demonstrate the correctness of the function by comparing its output with the expected results for different inputs."}
{"result_2":"```php\n/**\n * Converts an integer to its Roman numeral equivalent as a string in lowercase.\n *\n * @param int $number A positive integer between 1 and 1000 (inclusive).\n *\n * @return string The Roman numeral equivalent of the input number in lowercase.\n */\nfunction intToMiniRoman($number) {\n    // Define the mapping of decimal values to their corresponding Roman numerals\n    $decimalToRoman = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the Roman numeral result\n    $roman = '';\n\n    // Iterate over the decimal values in descending order\n    foreach ($decimalToRoman as $decimal => $romanSymbol) {\n        // Calculate how many times the current decimal value fits into the number\n        $count = floor($number / $decimal);\n\n        // Subtract the corresponding decimal value from the number for each count\n        $number -= $count * $decimal;\n\n        // Append the Roman numeral symbol to the result for each count\n        $roman .= str_repeat($romanSymbol, $count);\n    }\n\n    // Return the resulting Roman numeral string in lowercase\n    return strtolower($roman);\n}\n\n// Test cases\nprint(intToMiniRoman(19) . \"\n\");  // 'xix'\nprint(intToMiniRoman(152) . \"\n\");  // 'clii'\nprint(intToMiniRoman(426) . \"\n\");  // 'cdxxvi'\n```\n\nThis solution defines a function `intToMiniRoman` that takes an integer as input and returns its Roman numeral equivalent as a string in lowercase. The function uses a mapping of decimal values to their corresponding Roman numerals and iterates over the decimal values in descending order to construct the Roman numeral result.\n\n**Explanation:**\n\n1.  Define the mapping of decimal values to their corresponding Roman numerals.\n2.  Initialize an empty string to store the Roman numeral result.\n3.  Iterate over the decimal values in descending order.\n4.  For each decimal value, calculate how many times it fits into the number and subtract the corresponding decimal value from the number for each count.\n5.  Append the Roman numeral symbol to the result for each count.\n6.  Return the resulting Roman numeral string in lowercase.\n\n**Example Use Cases:**\n\n*   `intToMiniRoman(19)` returns `'xix'`.\n*   `intToMiniRoman(152)` returns `'clii'`.\n*   `intToMiniRoman(426)` returns `'cdxxvi'`."}
{"result_3":"```php\n/**\n * Converts an integer to its Roman numeral equivalent as a string in lowercase.\n *\n * @param int $number A positive integer between 1 and 1000 (inclusive).\n *\n * @return string The Roman numeral equivalent of the input number in lowercase.\n */\nfunction intToMiniRoman($number) {\n    // Define the mapping of decimal values to their corresponding Roman numerals\n    $decimalToRoman = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the Roman numeral\n    $romanNumeral = '';\n\n    // Iterate over the decimal values in descending order\n    foreach ($decimalToRoman as $decimal => $roman) {\n        // Calculate how many times the current decimal value fits into the number\n        $count = (int) ($number / $decimal);\n\n        // Subtract the decimal value multiplied by the count from the number\n        $number -= $count * $decimal;\n\n        // Append the Roman numeral to the result, repeated 'count' times\n        $romanNumeral .= str_repeat($roman, $count);\n    }\n\n    // Return the resulting Roman numeral in lowercase\n    return strtolower($romanNumeral);\n}\n\n// Test cases\nprint(intToMiniRoman(19) . \"\n\");  // Output: xix\nprint(intToMiniRoman(152) . \"\n\"); // Output: clii\nprint(intToMiniRoman(426) . \"\n\"); // Output: cdxxvi\n```"}
{"result_4":"```php\n/**\n * Converts an integer to its Roman numeral equivalent as a string in lowercase.\n *\n * @param int $number A positive integer between 1 and 1000 (inclusive).\n *\n * @return string The Roman numeral equivalent of the input number in lowercase.\n */\nfunction intToMiniRoman($number) {\n    // Define the mapping of decimal values to their corresponding Roman numerals\n    $decimalToRoman = [\n        1000 => 'm', 900 => 'cm', 500 => 'd', 400 => 'cd',\n        100 => 'c', 90 => 'xc', 50 => 'l', 40 => 'xl',\n        10 => 'x', 9 => 'ix', 5 => 'v', 4 => 'iv', 1 => 'i'\n    ];\n\n    // Initialize an empty string to store the Roman numeral\n    $roman = '';\n\n    // Iterate over the decimal values in descending order\n    foreach ($decimalToRoman as $decimal => $romanSymbol) {\n        // Calculate how many times the current decimal value fits into the number\n        $count = (int) ($number / $decimal);\n\n        // Subtract the decimal value multiplied by the count from the number\n        $number -= $count * $decimal;\n\n        // Append the Roman symbol to the result, repeated 'count' times\n        $roman .= str_repeat($romanSymbol, $count);\n    }\n\n    // Return the resulting Roman numeral in lowercase\n    return strtolower($roman);\n}\n\n// Test cases\nprint(intToMiniRoman(19) . \"\n\");  // Should print: xix\nprint(intToMiniRoman(152) . \"\n\"); // Should print: clii\nprint(intToMiniRoman(426) . \"\n\"); // Should print: cdxxvi\n```\n\nThis solution works by iterating over the decimal values in descending order and appending the corresponding Roman numeral symbols to the result. The `str_repeat` function is used to repeat each symbol the correct number of times. Finally, the resulting string is converted to lowercase using the `strtolower` function."}
