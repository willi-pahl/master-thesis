{"result_0":"```php\n/**\n * Checks if a given number is prime.\n *\n * @param int $n The number to check for primality.\n *\n * @return bool True if the number is prime, false otherwise.\n */\nfunction isPrime($n) {\n    // Corner cases: numbers less than 2 are not prime\n    if ($n < 2) {\n        return false;\n    }\n\n    // 2 is the only even prime number\n    if ($n == 2) {\n        return true;\n    }\n\n    // All other even numbers are not prime\n    if ($n % 2 == 0) {\n        return false;\n    }\n\n    // Only need to check up to the square root of $n\n    $sqrtN = sqrt($n);\n    for ($i = 3; $i <= $sqrtN; $i += 2) {\n        // If $n is divisible by any odd number, it's not prime\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // If we've checked all numbers up to the square root and haven't found a divisor, $n is prime\n    return true;\n}\n\n// Example usage:\necho var_export(isPrime(6), true) . \"\n\";   // False\necho var_export(isPrime(101), true) . \"\n\";  // True\necho var_export(isPrime(11), true) . \"\n\";   // True\necho var_export(isPrime(13441), true) . \"\n\"; // True\necho var_export(isPrime(61), true) . \"\n\";    // True\necho var_export(isPrime(4), true) . \"\n\";     // False\necho var_export(isPrime(1), true) . \"\n\";     // False\n```\n\nThis solution uses an optimized approach to check for primality by only checking divisibility up to the square root of the given number, and skipping even numbers (except for 2). It correctly handles corner cases like numbers less than 2 and the special case of the number 2 itself."}
{"result_1":"```php\n/**\n * Checks if a given number is prime.\n *\n * @param int $n The number to check for primality.\n *\n * @return bool True if the number is prime, false otherwise.\n */\nfunction isPrime($n) {\n    // Corner cases: numbers less than 2 are not prime\n    if ($n < 2) {\n        return false;\n    }\n\n    // Check divisibility up to the square root of $n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // If $n is divisible by any number between 2 and its square root, it's not prime\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // If no divisors were found, the number is prime\n    return true;\n}\n\n// Example usage:\necho var_dump(isPrime(6)) . \"\n\";   // bool(false)\necho var_dump(isPrime(101)) . \"\n\"; // bool(true)\necho var_dump(isPrime(11)) . \"\n\";  // bool(true)\necho var_dump(isPrime(13441)) . \"\n\"; // bool(true)\necho var_dump(isPrime(61)) . \"\n\";   // bool(true)\necho var_dump(isPrime(4)) . \"\n\";    // bool(false)\necho var_dump(isPrime(1)) . \"\n\";    // bool(false)\n```\n\nThis solution works by checking each number up to the square root of `$n` for divisibility. If any divisor is found, it immediately returns `false`. If no divisors are found after checking all numbers up to the square root, it returns `true`, indicating that the number is prime.\n\n**Why only up to the square root?**\n\nChecking only up to the square root of `$n` works because a larger factor of `$n` would be a multiple of a smaller factor that has already been checked. For example, if `$n = 100`, checking divisibility by `10` also checks for the factor `10 * 10 = 100`. Therefore, it's sufficient to only check up to the square root.\n\n**Optimization**\n\nThis solution is optimized because it:\n\n* Only checks divisibility up to the square root of `$n`.\n* Immediately returns `false` when a divisor is found.\n* Uses a simple and efficient algorithm for checking primality."}
{"result_2":"```php\n/**\n * Checks if a given number is prime.\n *\n * @param int $n The number to check for primality.\n *\n * @return bool True if the number is prime, false otherwise.\n */\nfunction isPrime($n) {\n    // Corner cases: numbers less than 2 are not prime\n    if ($n < 2) {\n        return false;\n    }\n\n    // Check divisibility up to the square root of $n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // If $n is divisible by any number between 2 and its square root, it's not prime\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // If no divisors were found, the number is prime\n    return true;\n}\n\n// Example usage:\necho var_dump(isPrime(6)) . \"\n\";   // bool(false)\necho var_dump(isPrime(101)) . \"\n\"; // bool(true)\necho var_dump(isPrime(11)) . \"\n\";  // bool(true)\necho var_dump(isPrime(13441)) . \"\n\"; // bool(true)\necho var_dump(isPrime(61)) . \"\n\";   // bool(true)\necho var_dump(isPrime(4)) . \"\n\";    // bool(false)\necho var_dump(isPrime(1)) . \"\n\";    // bool(false)\n```\n\nThis solution works by checking each number up to the square root of `$n` for divisibility. If any divisor is found, it immediately returns `false`. If no divisors are found after checking all numbers up to the square root, it concludes that the number is prime and returns `true`.\n\n**Why only up to the square root?**\n\nChecking divisibility only up to the square root of `$n` works because a larger factor of `$n` would be a multiple of a smaller factor that has already been checked. For example, if `$n = 100`, checking for factors up to its square root (10) will find the factor 2 before needing to check the larger factor 50.\n\n**Optimization**\n\nThis approach significantly reduces the number of iterations needed compared to checking all the way up to `$n` itself, especially for large numbers. However, it's worth noting that this function could be further optimized with more advanced primality tests or probabilistic methods for very large inputs."}
{"result_3":"```php\n/**\n * Checks if a given number is prime.\n *\n * @param int $n The number to check for primality.\n *\n * @return bool True if the number is prime, false otherwise.\n */\nfunction isPrime($n) {\n    // Corner cases: numbers less than 2 are not prime\n    if ($n < 2) {\n        return false;\n    }\n\n    // Check divisibility up to the square root of $n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // If $n is divisible by any number between 2 and its square root, it's not prime\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // If no divisors were found, the number is prime\n    return true;\n}\n\n// Example usage:\necho var_export(isPrime(6), true) . \"\n\";   // False\necho var_export(isPrime(101), true) . \"\n\";  // True\necho var_export(isPrime(11), true) . \"\n\";   // True\necho var_export(isPrime(13441), true) . \"\n\"; // True\necho var_export(isPrime(61), true) . \"\n\";    // True\necho var_export(isPrime(4), true) . \"\n\";     // False\necho var_export(isPrime(1), true) . \"\n\";     // False\n```\n\nThis solution works by checking each number up to the square root of `$n` for divisibility. If any divisor is found, it immediately returns `false`. If no divisors are found after checking all numbers up to the square root, it returns `true`, indicating that the number is prime.\n\n**Why only check up to the square root?**\n\nChecking beyond the square root would be redundant because a larger factor of the number would be a multiple of a smaller factor that has already been checked. For example, if `$n` is divisible by 10, then it's also divisible by either 2 or 5 (or both), which are smaller than its square root.\n\n**Why return false for numbers less than 2?**\n\nBy definition, prime numbers are greater than 1 and only divisible by 1 and themselves. Numbers less than 2 do not meet this criterion because they have fewer than two distinct positive divisors."}
{"result_4":"```php\n/**\n * Checks if a given number is prime.\n *\n * @param int $n The number to check for primality.\n *\n * @return bool True if the number is prime, false otherwise.\n */\nfunction isPrime($n) {\n    // Corner cases: numbers less than 2 are not prime\n    if ($n < 2) {\n        return false;\n    }\n\n    // Check divisibility up to the square root of $n\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        // If $n is divisible by any number between 2 and its square root, it's not prime\n        if ($n % $i == 0) {\n            return false;\n        }\n    }\n\n    // If $n is only divisible by 1 and itself, it's a prime number\n    return true;\n}\n\n// Example usage:\necho var_export(isPrime(6), true) . \"\n\";   // False\necho var_export(isPrime(101), true) . \"\n\"; // True\necho var_export(isPrime(11), true) . \"\n\";  // True\necho var_export(isPrime(13441), true) . \"\n\"; // True\necho var_export(isPrime(61), true) . \"\n\";   // True\necho var_export(isPrime(4), true) . \"\n\";    // False\necho var_export(isPrime(1), true) . \"\n\";    // False\n```\n\nThis solution works by checking each number up to the square root of `$n` for divisibility. If any divisor is found, it immediately returns `false`. If no divisors are found after checking all numbers up to the square root, it returns `true`, indicating that `$n` is a prime number.\n\n**Why only check up to the square root?**\n\nChecking beyond the square root of `$n` would be redundant because a larger factor of `$n` must be a multiple of a smaller factor that has already been checked. For example, if `$n` were divisible by 10 and 20, it would also be divisible by 2 (a factor of both 10 and 20), which we've already checked.\n\n**Why return false for numbers less than 2?**\n\nBy definition, a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Numbers less than 2 do not meet this criterion because they either have only one divisor (for the number 1) or are not natural numbers (for numbers less than 1)."}
