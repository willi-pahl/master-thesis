{"result_0":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` berechnen, diesen auf die nächste Ganzzahl runden und das Ergebnis in binär umwandeln. Wenn `n` größer als `m` ist, sollte die Funktion `-1` zurückgeben. Hier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Berechnen des Durchschnitts der Ganzzahlen von n bis m (einschließlich n und m)\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $count = $m - $n + 1; // Anzahl der Zahlen von n bis m\n    $average = $sum / $count;\n\n    // Auf die nächste Ganzzahl runden\n    $roundedAverage = round($average);\n\n    // In binär umwandeln und das Präfix \"0b\" hinzufügen\n    $binary = decbin($roundedAverage);\n    return '0b' . strrev($binary); // strrev wird verwendet, um die richtige Reihenfolge der Binärzahl zu gewährleisten\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // -1\necho roundedAvg(10, 20) . \"\n\"; // \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // \"0b11010\"\n\n?>\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `n` größer als `m` ist, wird `-1` zurückgegeben.\n2. **Berechnung des Durchschnitts**:\n   - Die Summe der Zahlen von `n` bis `m` wird berechnet.\n   - Die Anzahl der Zahlen von `n` bis `m` wird berechnet (dies ist einfach `m - n + 1`).\n   - Der Durchschnitt wird als `sum / count` berechnet.\n3. **Runden**: Der Durchschnitt wird auf die nächste Ganzzahl gerundet.\n4. **Umwandlung in Binär**: Die gerundete Zahl wird in eine binäre Zeichenkette umgewandelt und das Präfix `0b` hinzugefügt.\n5. **Rückgabe**: Die Funktion gibt die binäre Darstellung der gerundeten Durchschnittszahl zurück.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen und die gewünschten Ergebnisse liefern."}
{"result_1":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` (einschließlich `n` und `m`) berechnen. Wenn `n` größer als `m` ist, geben wir -1 zurück. Andernfalls runden wir die Antwort auf die nächste Ganzzahl und konvertieren diese in binär.\n\nHier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\n/**\n * Berechnet den Durchschnitt der Ganzzahlen von n bis m (einschließlich n und m), rundet auf die nächste Ganzzahl und konvertiert diese in binär.\n * Wenn n größer als m ist, gibt -1 zurück.\n *\n * @param int $n Die untere Grenze der Berechnung.\n * @param int $m Die obere Grenze der Berechnung.\n * @return string|int Der Durchschnitt in binärer Darstellung oder -1, wenn n größer als m ist.\n */\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Summe der Zahlen von n bis m berechnen\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n\n    // Anzahl der Zahlen von n bis m berechnen\n    $count = $m - $n + 1;\n\n    // Durchschnitt berechnen und auf die nächste Ganzzahl runden\n    $average = round($sum / $count);\n\n    // In binär konvertieren und mit \"0b\" voranstellen\n    return '0b' . decbin($average);\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // Ausgabe: \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // Ausgabe: -1\necho roundedAvg(10, 20) . \"\n\"; // Ausgabe: \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // Ausgabe: \"0b11010\"\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `n` größer als `m` ist, wird -1 zurückgegeben.\n2. **Summe berechnen**: Die Summe aller Zahlen von `n` bis `m` wird berechnet.\n3. **Anzahl der Zahlen berechnen**: Die Anzahl der Zahlen von `n` bis `m` wird berechnet (`$count = $m - $n + 1`).\n4. **Durchschnitt berechnen und runden**: Der Durchschnitt wird berechnet und auf die nächste Ganzzahl gerundet.\n5. **Binärkonvertierung**: Die gerundete Zahl wird in binär konvertiert und mit `0b` vorangestellt.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen."}
{"result_2":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` berechnen, diesen auf die nächste Ganzzahl runden und das Ergebnis in binär umwandeln. Wenn `n` größer als `m` ist, soll -1 zurückgegeben werden. Hier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Berechnen des Durchschnitts der Ganzzahlen von n bis m\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $count = $m - $n + 1; // Anzahl der Zahlen von n bis m\n    $average = $sum / $count;\n\n    // Auf die nächste Ganzzahl runden\n    $roundedAverage = round($average);\n\n    // In binär umwandeln und das Präfix \"0b\" hinzufügen\n    $binary = decbin($roundedAverage);\n    return '0b' . str_pad($binary, 32, '0', STR_PAD_LEFT); // 32 Bits für sicherheitshalber\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // -1\necho roundedAvg(10, 20) . \"\n\"; // \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // \"0b11010\"\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `n` größer als `m` ist, wird -1 zurückgegeben.\n2. **Berechnung des Durchschnitts**:\n   - Die Summe der Zahlen von `n` bis `m` wird berechnet.\n   - Die Anzahl der Zahlen von `n` bis `m` wird berechnet (`$count = $m - $n + 1`).\n3. **Berechnung des Durchschnitts**: Der Durchschnitt wird durch Division der Summe durch die Anzahl der Zahlen berechnet.\n4. **Rundung**: Der Durchschnitt wird auf die nächste Ganzzahl gerundet.\n5. **Umwandlung in binär**: Die gerundete Zahl wird in eine binäre Darstellung umgewandelt und mit dem Präfix `0b` versehen.\n6. **Padding**: Um sicherzustellen, dass die Binärdarstellung immer 32 Bits lang ist, wird das Ergebnis mit Nullen aufgefüllt.\n\nDiese Funktion sollte die Anforderungen der Aufgabe erfüllen und korrekte Ergebnisse liefern."}
{"result_3":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` (einschließlich `n` und `m`) berechnen. Wenn `n` größer als `m` ist, geben wir `-1` zurück. Andernfalls runden wir die Antwort auf die nächste Ganzzahl und konvertieren diese in binär.\n\nHier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\n/**\n * Berechnet den Durchschnitt der Ganzzahlen von n bis m (einschließlich n und m),\n * rundet auf die nächste Ganzzahl und konvertiert diese in binär.\n * Wenn n größer als m ist, gibt -1 zurück.\n *\n * @param int $n Die untere Grenze der Berechnung.\n * @param int $m Die obere Grenze der Berechnung.\n * @return string|int Der Durchschnitt in binärer Darstellung oder -1 bei ungültigen Eingaben.\n */\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Berechnen der Summe der Ganzzahlen von n bis m\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n\n    // Berechnen des Durchschnitts\n    $count = $m - $n + 1;\n    $average = round($sum / $count);\n\n    // Konvertieren des Durchschnitts in binär\n    $binary = decbin($average);\n\n    // Voranstellen von \"0b\" für die binäre Darstellung\n    return \"0b\" . $binary;\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // -1\necho roundedAvg(10, 20) . \"\n\"; // \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // \"0b11010\"\n?>\n```\n\n### Erklärung:\n1. **Überprüfung der Eingaben**: Wenn `n` größer als `m` ist, wird `-1` zurückgegeben.\n2. **Berechnung der Summe**: Eine Schleife durchläuft alle Zahlen von `n` bis `m` und summiert sie.\n3. **Berechnung des Durchschnitts**: Der Durchschnitt wird berechnet, indem die Summe durch die Anzahl der Zahlen (`$count`) geteilt wird. Die Funktion `round` rundet das Ergebnis auf die nächste Ganzzahl.\n4. **Konvertierung in binär**: Die Funktion `decbin` konvertiert den Durchschnitt in eine binäre Zeichenkette.\n5. **Voranstellen von \"0b\"**: Der binäre String wird mit `\"0b\"` vorangestellt, um die binäre Darstellung zu kennzeichnen.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen und die gewünschten Ergebnisse liefern."}
{"result_4":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` berechnen, diesen auf die nächste Ganzzahl runden und das Ergebnis in binär umwandeln. Wenn `n` größer als `m` ist, soll -1 zurückgegeben werden. Hier ist der vollständige Code für die Funktion:\n\n```php\n<?php\n\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Summe der Zahlen von n bis m berechnen\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n\n    // Anzahl der Zahlen von n bis m berechnen\n    $count = $m - $n + 1;\n\n    // Durchschnitt berechnen und auf die nächste Ganzzahl runden\n    $average = round($sum / $count);\n\n    // Ergebnis in binär umwandeln und mit \"0b\" prefixieren\n    return '0b' . decbin($average);\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // -1\necho roundedAvg(10, 20) . \"\n\"; // \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // \"0b11010\"\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `n` größer als `m` ist, wird -1 zurückgegeben.\n2. **Berechnung der Summe**: Eine Schleife durchläuft die Zahlen von `n` bis `m` und summiert sie.\n3. **Anzahl der Zahlen berechnen**: Die Anzahl der Zahlen von `n` bis `m` ist `$count = $m - $n + 1`.\n4. **Durchschnitt berechnen und runden**: Der Durchschnitt wird berechnet und auf die nächste Ganzzahl gerundet.\n5. **Umwandlung in binär**: Die Funktion `decbin` wandelt die Zahl in eine binäre Zeichenkette um, und wir fügen den Präfix `0b` hinzu.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen und die gewünschten Ergebnisse liefern."}
{"result_5":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` berechnen, diesen auf die nächste Ganzzahl runden und das Ergebnis in binär umwandeln. Wenn `n` größer als `m` ist, sollten wir `-1` zurückgeben. Hier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\n/**\n * Berechnet den Durchschnitt der Ganzzahlen von n bis m (einschließlich n und m),\n * rundet diesen auf die nächste Ganzzahl und konvertiert das Ergebnis in binär.\n * Wenn n größer als m ist, gibt -1 zurück.\n *\n * @param int $n Die untere Grenze der Berechnung.\n * @param int $m Die obere Grenze der Berechnung.\n * @return string|int Der Durchschnitt in binärer Darstellung oder -1.\n */\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Berechnen des Durchschnitts\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $count = $m - $n + 1;\n    $average = round($sum / $count);\n\n    // Umwandeln des Durchschnitts in binär\n    $binary = decbin($average);\n\n    // Voranstellen von \"0b\" für die binäre Darstellung\n    return '0b' . $binary;\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // -1\necho roundedAvg(10, 20) . \"\n\"; // \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // \"0b11010\"\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `n` größer als `m` ist, wird `-1` zurückgegeben.\n2. **Berechnung des Durchschnitts**:\n   - Die Summe aller Zahlen von `n` bis `m` wird berechnet.\n   - Die Anzahl der Zahlen in diesem Bereich wird ermittelt (`$count = $m - $n + 1`).\n   - Der Durchschnitt wird berechnet und auf die nächste Ganzzahl gerundet.\n3. **Umwandlung in binär**: Die Funktion `decbin` wandelt den Durchschnitt in eine binäre Zeichenkette um.\n4. **Voranstellen von \"0b\"**: Dies ist die Konvention für binäre Literale in PHP.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen und die gewünschten Ergebnisse liefern."}
{"result_6":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `$n` bis `$m` berechnen, diesen auf die nächste Ganzzahl runden und das Ergebnis in binär konvertieren. Wenn `$n` größer als `$m` ist, sollten wir `-1` zurückgeben.\n\nHier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\n/**\n * Berechnet den Durchschnitt der Ganzzahlen von n bis m (einschließlich n und m), rundet ihn auf die nächste Ganzzahl und konvertiert das Ergebnis in binär.\n * Wenn n größer als m ist, gibt -1 zurück.\n *\n * @param int $n Die untere Grenze der Berechnung.\n * @param int $m Die obere Grenze der Berechnung.\n * @return string|int Das Ergebnis in binärer Form oder -1, wenn n größer als m ist.\n */\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Summe der Zahlen von n bis m berechnen\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n\n    // Anzahl der Zahlen von n bis m berechnen\n    $count = $m - $n + 1;\n\n    // Durchschnitt berechnen und auf die nächste Ganzzahl runden\n    $average = round($sum / $count);\n\n    // Ergebnis in binär konvertieren und mit \"0b\" voranstellen\n    return '0b' . decbin($average);\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // -1\necho roundedAvg(10, 20) . \"\n\"; // \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // \"0b11010\"\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `$n` größer als `$m` ist, wird `-1` zurückgegeben.\n2. **Summe berechnen**: Eine Schleife durchläuft alle Zahlen von `$n` bis `$m` und summiert sie.\n3. **Anzahl der Zahlen berechnen**: Die Anzahl der Zahlen von `$n` bis `$m` wird berechnet.\n4. **Durchschnitt berechnen und runden**: Der Durchschnitt wird berechnet und auf die nächste Ganzzahl gerundet.\n5. **Binärkonvertierung**: Das Ergebnis wird in binär konvertiert und mit `0b` vorangestellt.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen."}
{"result_7":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` (einschließlich `n` und `m`) berechnen. Wenn `n` größer als `m` ist, sollte die Funktion `-1` zurückgeben. Andernfalls sollten wir den Durchschnitt runden und das Ergebnis in binär konvertieren.\n\nHier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Berechnen des Durchschnitts der Ganzzahlen von n bis m\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $count = $m - $n + 1;\n    $average = round($sum / $count);\n\n    // Konvertieren des Durchschnitts in binär und hinzufügen des Präfixes \"0b\"\n    return '0b' . decbin($average);\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // Ausgabe: \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // Ausgabe: -1\necho roundedAvg(10, 20) . \"\n\"; // Ausgabe: \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // Ausgabe: \"0b11010\"\n```\n\n### Erklärung:\n1. **Überprüfung der Bedingung**: Wenn `n` größer als `m` ist, wird `-1` zurückgegeben.\n2. **Berechnung des Durchschnitts**:\n   - Die Summe der Zahlen von `n` bis `m` wird berechnet.\n   - Die Anzahl der Zahlen (`count`) wird berechnet.\n   - Der Durchschnitt wird berechnet und mit `round()` auf die nächste Ganzzahl gerundet.\n3. **Konvertierung in binär**:\n   - Die Funktion `decbin()` konvertiert den Durchschnitt in eine binäre Zeichenkette.\n   - Das Präfix `0b` wird hinzugefügt, um die binäre Darstellung zu kennzeichnen.\n\nDieser Code sollte die Anforderungen der Aufgabe erfüllen und die gewünschten Ergebnisse liefern."}
{"result_8":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von `n` bis `m` berechnen, diesen auf die nächste Ganzzahl runden und das Ergebnis in binär umwandeln. Wenn `n` größer als `m` ist, soll -1 zurückgegeben werden. Hier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Summe der Zahlen von n bis m berechnen\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n\n    // Anzahl der Zahlen von n bis m berechnen\n    $count = $m - $n + 1;\n\n    // Durchschnitt berechnen und auf die nächste Ganzzahl runden\n    $average = round($sum / $count);\n\n    // Ergebnis in binär umwandeln und mit \"0b\" prefixieren\n    return '0b' . decbin($average);\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // Ausgabe: \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // Ausgabe: -1\necho roundedAvg(10, 20) . \"\n\"; // Ausgabe: \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // Ausgabe: \"0b11010\"\n\n?>\n```\n\n### Erklärung des Codes:\n\n1. **Überprüfung, ob `n` größer als `m` ist**:\n   - Wenn `n` größer als `m` ist, wird sofort `-1` zurückgegeben.\n\n2. **Berechnung der Summe der Zahlen von `n` bis `m`**:\n   - Eine Schleife durchläuft die Zahlen von `n` bis `m` und summiert sie.\n\n3. **Anzahl der Zahlen von `n` bis `m` berechnen**:\n   - Die Anzahl der Zahlen in diesem Bereich ist `$m - $n + 1`.\n\n4. **Berechnung des Durchschnitts und Rundung auf die nächste Ganzzahl**:\n   - Der Durchschnitt wird berechnet und mit der Funktion `round` auf die nächste Ganzzahl gerundet.\n\n5. **Umwandlung des Ergebnisses in binär**:\n   - Die Funktion `decbin` wandelt die dezimale Zahl in eine binäre Zeichenkette um.\n   - Der Präfix `0b` wird hinzugefügt, um anzuzeigen, dass es sich um eine binäre Zahl handelt.\n\n### Beispiele:\n- `roundedAvg(1, 5)` berechnet den Durchschnitt von 1 bis 5, was 3 ist. In binär ist das `0b11`.\n- `roundedAvg(7, 5)` gibt -1 zurück, weil `n` größer als `m` ist.\n- `roundedAvg(10, 20)` berechnet den Durchschnitt von 10 bis 20, was 15 ist. In binär ist das `0b1111`.\n- `roundedAvg(20, 33)` berechnet den Durchschnitt von 20 bis 33, was 26 ist. In binär ist das `0b11010`."}
{"result_9":" Um die Aufgabe zu lösen, müssen wir den Durchschnitt der Ganzzahlen von \( n \) bis \( m \) berechnen, diesen auf die nächste ganze Zahl runden und das Ergebnis in binär umwandeln. Wenn \( n \) größer als \( m \) ist, soll -1 zurückgegeben werden.\n\nHier ist der vollständige Code für die Funktion `roundedAvg`:\n\n```php\n<?php\n\nfunction roundedAvg($n, $m) {\n    // Überprüfen, ob n größer als m ist\n    if ($n > $m) {\n        return -1;\n    }\n\n    // Berechnen des Durchschnitts der Ganzzahlen von n bis m (einschließlich n und m)\n    $sum = 0;\n    for ($i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    $count = $m - $n + 1;\n    $average = $sum / $count;\n\n    // Runden des Durchschnitts auf die nächste ganze Zahl\n    $roundedAverage = round($average);\n\n    // Umwandeln der gerundeten Zahl in binär\n    $binary = decbin($roundedAverage);\n\n    // Voranstellen von \"0b\" für die binäre Darstellung\n    return '0b' . $binary;\n}\n\n// Beispiele\necho roundedAvg(1, 5) . \"\n\"; // Ausgabe: \"0b11\"\necho roundedAvg(7, 5) . \"\n\"; // Ausgabe: -1\necho roundedAvg(10, 20) . \"\n\"; // Ausgabe: \"0b1111\"\necho roundedAvg(20, 33) . \"\n\"; // Ausgabe: \"0b11010\"\n```\n\n### Erklärung des Codes:\n1. **Überprüfung der Bedingung**: Wenn \( n \) größer als \( m \) ist, wird -1 zurückgegeben.\n2. **Berechnung des Durchschnitts**:\n   - Die Summe der Zahlen von \( n \) bis \( m \) wird berechnet.\n   - Die Anzahl der Zahlen (von \( n \) bis \( m \)) wird bestimmt.\n   - Der Durchschnitt wird als Quotient aus Summe und Anzahl berechnet.\n3. **Runden des Durchschnitts**: Die Funktion `round` rundet den Durchschnitt auf die nächste ganze Zahl.\n4. **Umwandeln in binär**: Die Funktion `decbin` wandelt die gerundete Zahl in eine binäre Zeichenkette um.\n5. **Voranstellen von \"0b\"**: Der binäre String wird mit \"0b\" vorangestellt, um die binäre Darstellung zu kennzeichnen.\n\nDieser Code erfüllt die Anforderungen und liefert die gewünschten Ergebnisse."}
