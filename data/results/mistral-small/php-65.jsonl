{"result_0":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen, überprüfen, ob die Länge jedes Wortes eine Primzahl ist, und dann die Wörter mit Primzahllängen in der ursprünglichen Reihenfolge zurückgeben.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Funktion zur Überprüfung, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) {\n            return false;\n        }\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Satz in einzelne Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen String mit Wörtern, deren Längen Primzahlen sind, erstellen\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen und zurückgeben\n    return trim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1); // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2); // Ausgabe: \"go for\"\n?>\n```\n\n### Erklärung:\n1. **Primzahl-Überprüfungsfunktion**: Die Funktion `isPrime` überprüft, ob eine gegebene Zahl eine Primzahl ist. Sie kehrt `false` zurück, wenn die Zahl kleiner oder gleich 1 ist. Andernfalls überprüft sie, ob die Zahl durch irgendeine Zahl von 2 bis zur Wurzel der Zahl teilbar ist.\n\n2. **Satz in Wörter zerlegen**: Die Funktion `explode` wird verwendet, um den Satz an Leerzeichen zu trennen und ein Array von Wörtern zu erhalten.\n\n3. **Wörter filtern**: Ein `foreach`-Schleife durchläuft das Array der Wörter. Für jedes Wort wird überprüft, ob die Länge des Wortes eine Primzahl ist (mit der `isPrime`-Funktion). Wenn ja, wird das Wort zum Ergebnis hinzugefügt.\n\n4. **Leerzeichen entfernen**: Die Funktion `trim` wird verwendet, um eventuelle Leerzeichen am Ende des resultierenden Strings zu entfernen.\n\nDiese Methode stellt sicher, dass nur die Wörter mit Primzahllängen im ursprünglichen Satz erhalten bleiben und in der richtigen Reihenfolge zurückgegeben werden."}
{"result_1":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen, die Länge jedes Wortes überprüfen und nur die Wörter behalten, deren Länge eine Primzahl ist. Schließlich setzen wir diese Wörter wieder zusammen und geben den resultierenden Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction isPrime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $num; $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction wordsInSentence($sentence) {\n    // Zerlege den Satz in einzelne Wörter\n    $words = explode(\" \", $sentence);\n\n    // Initialisiere einen leeren String für die Ausgabe\n    $output = \"\";\n\n    // Iteriere über die Wörter und füge nur diejenigen hinzu, deren Länge eine Primzahl ist\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $output .= $word . \" \";\n        }\n    }\n\n    // Entferne das letzte Leerzeichen\n    return rtrim($output);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n\n?>\n```\n\n### Erklärung:\n1. **Funktion `isPrime`**: Diese Hilfsfunktion überprüft, ob eine gegebene Zahl eine Primzahl ist.\n2. **Funktion `wordsInSentence`**:\n   - Der Satz wird mit `explode(\" \", $sentence)` in ein Array von Wörtern zerlegt.\n   - Ein leerer String `$output` wird initialisiert, um die Ausgabe zu speichern.\n   - Für jedes Wort im Array wird überprüft, ob seine Länge eine Primzahl ist (mit der Funktion `isPrime`).\n   - Wenn die Länge des Wortes eine Primzahl ist, wird das Wort an den String `$output` angehängt.\n   - Schließlich wird das letzte Leerzeichen mit `rtrim($output)` entfernt und der resultierende Satz zurückgegeben.\n\nDiese Funktion erfüllt die Anforderungen und liefert den gewünschten Ausgabesatz."}
{"result_2":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen und dann überprüfen, ob die Länge jedes Wortes eine Primzahl ist. Schließlich fügen wir alle Wörter zusammen, deren Längen Primzahlen sind, und geben den resultierenden Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Funktion zur Überprüfung, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) {\n            return false;\n        }\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Satz in einzelne Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen Satz mit Wörtern erstellen, deren Längen Primzahlen sind\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen\n    return trim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1); // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2); // Ausgabe: \"go for\"\n\n?>\n```\n\n### Erklärung des Codes:\n1. **Funktion `isPrime`**: Diese Hilfsfunktion überprüft, ob eine gegebene Zahl eine Primzahl ist. Sie kehrt `false` zurück, wenn die Zahl kleiner oder gleich 1 ist. Andernfalls überprüft sie, ob die Zahl durch irgendeine Zahl von 2 bis zur Wurzel der Zahl teilbar ist.\n\n2. **Zerlegen des Satzes**: Die Funktion `explode` wird verwendet, um den Eingabesatz in ein Array von Wörtern zu zerlegen.\n\n3. **Erstellen des neuen Satzes**: Ein Schleifendurchlauf durch das Array der Wörter überprüft die Länge jedes Wortes mit der `isPrime`-Funktion. Wenn die Länge eine Primzahl ist, wird das Wort zum Ergebnis hinzugefügt.\n\n4. **Leerzeichen entfernen**: Die Funktion `trim` wird verwendet, um eventuelle Leerzeichen am Ende des resultierenden Satzes zu entfernen.\n\nDieser Ansatz stellt sicher, dass nur die Wörter mit Primzahllängen im Ergebnis enthalten sind und die Reihenfolge der Wörter im Original erhalten bleibt."}
{"result_3":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen und dann überprüfen, ob die Länge jedes Wortes eine Primzahl ist. Schließlich fügen wir die Wörter mit Primzahllängen wieder zusammen und geben den resultierenden Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Funktion, um zu überprüfen, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) {\n            return false;\n        }\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Satz in Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen Satz mit Wörtern, deren Länge Primzahlen sind, erstellen\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen\n    return trim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n?>\n```\n\n### Erklärung:\n1. **Primzahl-Überprüfungsfunktion (`isPrime`)**: Diese Funktion überprüft, ob eine gegebene Zahl eine Primzahl ist. Sie kehrt `false` zurück, wenn die Zahl kleiner oder gleich 1 ist. Andernfalls überprüft sie, ob die Zahl durch irgendeine Zahl von 2 bis zur Wurzel der Zahl teilbar ist.\n\n2. **Satz in Wörter zerlegen**: Die Funktion `explode(\" \", $sentence)` teilt den Satz an jedem Leerzeichen und erstellt ein Array von Wörtern.\n\n3. **Wörter filtern**: Ein `foreach`-Schleife durchläuft das Array der Wörter. Für jedes Wort wird die Länge überprüft, um zu sehen, ob sie eine Primzahl ist. Wenn ja, wird das Wort zum Resultat hinzugefügt.\n\n4. **Leerzeichen am Ende entfernen**: Die Funktion `trim` entfernt eventuelle Leerzeichen am Ende des resultierenden Satzes.\n\nDiese Methode stellt sicher, dass nur die Wörter mit Primzahllängen im resultierenden Satz enthalten sind und die Reihenfolge der Wörter beibehalten wird."}
{"result_4":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen, die Länge jedes Wortes überprüfen und nur die Wörter behalten, deren Länge eine Primzahl ist. Schließlich setzen wir diese Wörter wieder zusammen und geben den resultierenden Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Hilfsfunktion zur Überprüfung, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) return false;\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) return false;\n        }\n        return true;\n    }\n\n    // Satz in einzelne Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen Satz mit Wörtern erstellen, deren Länge eine Primzahl ist\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Letztes Leerzeichen entfernen\n    return rtrim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n?>\n```\n\n### Erklärung des Codes:\n1. **Hilfsfunktion `isPrime`**: Diese Funktion überprüft, ob eine gegebene Zahl eine Primzahl ist. Sie durchläuft alle Zahlen von 2 bis zur Wurzel der Zahl und prüft, ob die Zahl durch irgendeine dieser Zahlen teilbar ist.\n2. **Zerlegen des Satzes**: Die Funktion `explode` wird verwendet, um den Satz in ein Array von Wörtern zu zerlegen.\n3. **Erstellen des neuen Satzes**: Ein Schleifendurchlauf durch das Array der Wörter überprüft die Länge jedes Wortes mit der `isPrime`-Funktion. Wenn die Länge eine Primzahl ist, wird das Wort zum Resultat hinzugefügt.\n4. **Entfernen des letzten Leerzeichens**: Die Funktion `rtrim` entfernt das letzte Leerzeichen aus dem resultierenden Satz.\n\nDiese Methode stellt sicher, dass nur die Wörter mit Primzahllängen im neuen Satz enthalten sind und die Reihenfolge der Wörter erhalten bleibt."}
{"result_5":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen, überprüfen, ob die Länge jedes Wortes eine Primzahl ist, und dann die Wörter mit Primzahllängen in der gleichen Reihenfolge zurückgeben.\n\nHier ist eine mögliche Implementierung:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Funktion zur Überprüfung, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) {\n            return false;\n        }\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Satz in einzelne Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen String mit Wörtern, deren Längen Primzahlen sind, erstellen\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen\n    return trim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n\n?>\n```\n\n### Erklärung:\n1. **Funktion `isPrime`**: Diese Hilfsfunktion überprüft, ob eine Zahl eine Primzahl ist. Sie durchläuft alle Zahlen von 2 bis zur Quadratwurzel der Zahl und prüft, ob die Zahl durch irgendeine dieser Zahlen teilbar ist.\n2. **Zerlegen des Satzes**: Die Funktion `explode` wird verwendet, um den Satz in ein Array von Wörtern zu zerlegen.\n3. **Überprüfen der Längen**: Für jedes Wort im Array wird die Länge überprüft. Wenn die Länge eine Primzahl ist, wird das Wort zum Ergebnis hinzugefügt.\n4. **Leerzeichen entfernen**: Am Ende wird `trim` verwendet, um eventuelle Leerzeichen am Ende des resultierenden Strings zu entfernen.\n\nDiese Implementierung stellt sicher, dass nur die Wörter mit Primzahllängen im Ergebnis enthalten sind und die Reihenfolge der Wörter beibehalten wird."}
{"result_6":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen, überprüfen, ob die Länge jedes Wortes eine Primzahl ist, und dann die Wörter mit Primzahllängen in der ursprünglichen Reihenfolge zurückgeben.\n\nHier ist eine mögliche Implementierung:\n\n```php\n<?php\n\n/**\n * Sie sind ein erfahrener PHP-Programmierer und hier ist Ihre Aufgabe.\n * * Du erhältst einen String, der einen Satz repräsentiert. Der Satz enthält einige Wörter, die durch ein Leerzeichen getrennt sind. Du musst einen String zurückgeben, der die Wörter aus dem ursprünglichen Satz enthält, deren Längen Primzahlen sind. Die Reihenfolge der Wörter im neuen String sollte dieselbe wie im Original sein.\n *\n *     Beispiel 1:\n *         Eingabe: sentence = \"This is a test\"\n *         Ausgabe: \"is\"\n *\n *     Beispiel 2:\n *         Eingabe: sentence = \"lets go for swimming\"\n *         Ausgabe: \"go for\"\n *\n *     Einschränkungen:\n *         * 1 <= len(sentence) <= 100\n *         * Der Satz enthält nur Buchstaben.\n *\n */\nfunction wordsInSentence($sentence){\n    // Funktion, um zu überprüfen, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) return false;\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) return false;\n        }\n        return true;\n    }\n\n    // Satz in Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen String mit Wörtern, deren Längen Primzahlen sind, erstellen\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen\n    return trim($result);\n}\n\n// Beispiele\necho wordsInSentence(\"This is a test\") . \"\n\"; // Ausgabe: \"is\"\necho wordsInSentence(\"lets go for swimming\") . \"\n\"; // Ausgabe: \"go for\"\n?>\n```\n\n### Erklärung:\n1. **Primzahl-Funktion**: Die Funktion `isPrime` überprüft, ob eine gegebene Zahl eine Primzahl ist.\n2. **Zerlegen des Satzes**: Der Satz wird mit der Funktion `explode(\" \", $sentence)` in ein Array von Wörtern zerlegt.\n3. **Filterung der Wörter**: Wir iterieren über das Array der Wörter und fügen nur die Wörter hinzu, deren Längen Primzahlen sind.\n4. **Leerzeichen entfernen**: Am Ende wird das Leerzeichen am Ende des resultierenden Strings mit `trim` entfernt.\n\nDiese Implementierung stellt sicher, dass nur die Wörter mit Primzahllängen im ursprünglichen Satz erhalten bleiben und in der richtigen Reihenfolge zurückgegeben werden."}
{"result_7":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen und dann überprüfen, ob die Länge jedes Wortes eine Primzahl ist. Schließlich setzen wir die Wörter mit Primzahlenlängen wieder zusammen und geben sie als neuen Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Funktion, um zu überprüfen, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) {\n            return false;\n        }\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Satz in einzelne Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen Satz mit Wörtern, deren Länge Primzahlen sind, erstellen\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen\n    return trim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n\n?>\n```\n\n### Erklärung des Codes:\n1. **Primzahl-Funktion**: Die Funktion `isPrime` überprüft, ob eine gegebene Zahl eine Primzahl ist. Sie kehrt `false` zurück, wenn die Zahl kleiner oder gleich 1 ist. Andernfalls überprüft sie, ob die Zahl durch irgendeine Zahl von 2 bis zur Wurzel der Zahl teilbar ist.\n2. **Satz in Wörter zerlegen**: Die Funktion `explode` teilt den Satz an jedem Leerzeichen und erstellt ein Array von Wörtern.\n3. **Wörter filtern**: Ein `foreach`-Loop durchläuft das Array der Wörter und fügt nur die Wörter zum Ergebnis hinzu, deren Länge eine Primzahl ist.\n4. **Leerzeichen entfernen**: Die Funktion `trim` entfernt das letzte Leerzeichen aus dem resultierenden Satz.\n\nDieser Ansatz stellt sicher, dass nur die Wörter mit Primzahlenlängen im neuen Satz enthalten sind und die Reihenfolge der Wörter beibehalten wird."}
{"result_8":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen, die Länge jedes Wortes überprüfen und nur die Wörter behalten, deren Länge eine Primzahl ist. Schließlich setzen wir diese Wörter wieder zusammen und geben den resultierenden Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction isPrime($num) {\n    if ($num <= 1) {\n        return false;\n    }\n    for ($i = 2; $i * $i <= $num; $i++) {\n        if ($num % $i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction wordsInSentence($sentence) {\n    // Zerlege den Satz in einzelne Wörter\n    $words = explode(\" \", $sentence);\n\n    // Initialisiere einen leeren String für die Ausgabe\n    $output = \"\";\n\n    // Iteriere über die Wörter und füge nur die mit Primzahlen-Länge hinzu\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $output .= $word . \" \";\n        }\n    }\n\n    // Entferne das letzte Leerzeichen, falls vorhanden\n    return rtrim($output);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n\n?>\n```\n\n### Erklärung:\n1. **Funktion `isPrime`**: Diese Hilfsfunktion überprüft, ob eine gegebene Zahl eine Primzahl ist.\n2. **Funktion `wordsInSentence`**:\n   - Der Satz wird mit `explode(\" \", $sentence)` in ein Array von Wörtern zerlegt.\n   - Ein leerer String `$output` wird initialisiert, um die Ausgabe zu speichern.\n   - Für jedes Wort im Array wird überprüft, ob seine Länge eine Primzahl ist (mit der Funktion `isPrime`).\n   - Wenn ja, wird das Wort an den String `$output` angehängt.\n   - Schließlich wird das letzte Leerzeichen mit `rtrim($output)` entfernt und der resultierende Satz zurückgegeben.\n\nDiese Methode stellt sicher, dass nur die Wörter mit Primzahlen-Länge im Ergebnis enthalten sind und die Reihenfolge der Wörter erhalten bleibt."}
{"result_9":" Um die Aufgabe zu lösen, müssen wir den Eingabesatz in einzelne Wörter zerlegen und dann überprüfen, ob die Länge jedes Wortes eine Primzahl ist. Schließlich setzen wir die Wörter mit Primzahlenlängen wieder zusammen und geben den resultierenden Satz zurück.\n\nHier ist der vollständige Code für die Funktion `wordsInSentence`:\n\n```php\n<?php\n\nfunction wordsInSentence($sentence) {\n    // Funktion zur Überprüfung, ob eine Zahl eine Primzahl ist\n    function isPrime($num) {\n        if ($num <= 1) {\n            return false;\n        }\n        for ($i = 2; $i * $i <= $num; $i++) {\n            if ($num % $i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Satz in Wörter zerlegen\n    $words = explode(\" \", $sentence);\n\n    // Neuen Satz mit Wörtern, deren Länge Primzahlen sind, erstellen\n    $result = \"\";\n    foreach ($words as $word) {\n        if (isPrime(strlen($word))) {\n            $result .= $word . \" \";\n        }\n    }\n\n    // Leerzeichen am Ende entfernen\n    return trim($result);\n}\n\n// Beispiel 1\n$sentence1 = \"This is a test\";\necho wordsInSentence($sentence1) . \"\n\"; // Ausgabe: \"is\"\n\n// Beispiel 2\n$sentence2 = \"lets go for swimming\";\necho wordsInSentence($sentence2) . \"\n\"; // Ausgabe: \"go for\"\n?>\n```\n\n### Erklärung:\n1. **Primzahl-Überprüfungsfunktion (`isPrime`)**: Diese Funktion überprüft, ob eine gegebene Zahl eine Primzahl ist. Sie kehrt `false` zurück, wenn die Zahl kleiner oder gleich 1 ist. Andernfalls überprüft sie, ob die Zahl durch irgendeine Zahl von 2 bis zur Wurzel der Zahl teilbar ist.\n\n2. **Satz in Wörter zerlegen**: Die Funktion `explode` wird verwendet, um den Satz anhand des Leerzeichens in ein Array von Wörtern zu zerlegen.\n\n3. **Wörter filtern und zusammenfügen**: Ein `foreach`-Loop durchläuft das Array der Wörter. Für jedes Wort wird überprüft, ob die Länge des Wortes eine Primzahl ist. Wenn ja, wird das Wort zum Resultat hinzugefügt.\n\n4. **Leerzeichen am Ende entfernen**: Die Funktion `trim` wird verwendet, um eventuelle Leerzeichen am Ende des resultierenden Satzes zu entfernen.\n\nDiese Methode stellt sicher, dass nur die Wörter mit Primzahlenlängen im resultierenden Satz enthalten sind und die Reihenfolge der Wörter erhalten bleibt."}
