{"result_0":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine mögliche Implementierung der Funktion `orderByPoints`:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        while ($num != 0) {\n            $sum += $num % 10;\n            $num = intdiv($num, 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        // Ansonsten vergleichen wir die Summen der Ziffern\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place und verwendet eine benutzerdefinierte Vergleichsfunktion.\n   - Wenn die Summen der Ziffern gleich sind (`$sumA == $sumB`), wird der ursprüngliche Index der Zahlen verglichen, um die Reihenfolge beizubehalten.\n   - Andernfalls werden die Summen der Ziffern verglichen, um die Zahlen in aufsteigender Reihenfolge zu sortieren.\n\nDiese Implementierung stellt sicher, dass die Liste nach den angegebenen Kriterien sortiert wird."}
{"result_1":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine mögliche Implementierung der Funktion `orderByPoints`:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($num) {\n        $sum = 0;\n        while ($num != 0) {\n            $sum += $num % 10;\n            $num = intdiv($num, 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        // Andernfalls vergleichen wir die Summen der Ziffern\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf den angegebenen Kriterien.\n   - Wenn die Summen der Ziffern gleich sind, wird der ursprüngliche Index der Zahl verwendet, um die Reihenfolge zu bestimmen.\n   - Andernfalls wird die Liste basierend auf der Summe der Ziffern sortiert.\n\nDiese Implementierung stellt sicher, dass die Liste in der gewünschten Reihenfolge sortiert wird."}
{"result_2":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine Implementierung der Funktion `orderByPoints`:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = (int)($number / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use (&$nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return $nums->indexOfValue($a) - $nums->indexOfValue($b);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf den angegebenen Kriterien.\n   - Wenn die Summen der Ziffern gleich sind, wird der ursprüngliche Index der Zahl verwendet, um die Reihenfolge zu bestimmen.\n   - Andernfalls wird die Liste basierend auf der Summe der Ziffern sortiert.\n\n### Hinweis:\n- Die Funktion `indexOfValue` ist in PHP nicht direkt verfügbar. Um den ursprünglichen Index zu erhalten, müssen wir eine zusätzliche Struktur verwenden, um die Indizes zu speichern und während der Sortierung abzurufen. Hier ist ein Beispiel, wie man dies tun kann:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = (int)($number / 10);\n        }\n        return $sum;\n    }\n\n    // Speichern der ursprünglichen Indizes\n    $indices = array_combine($nums, range(0, count($nums) - 1));\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use (&$indices) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return $indices[$a] - $indices[$b];\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\nMit dieser Implementierung wird die Liste korrekt nach den angegebenen Kriterien sortiert."}
{"result_3":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine Implementierung der Funktion `orderByPoints`:\n\n```php\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = intdiv($number, 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use (&$nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispiele zur Überprüfung der Funktion\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Erwartetes Ergebnis: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Erwartetes Ergebnis: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf den angegebenen Kriterien.\n   - Wenn die Summen der Ziffern gleich sind, wird der ursprüngliche Index der Zahl verwendet, um die Reihenfolge zu bestimmen.\n   - Andernfalls wird die Liste basierend auf der Summe der Ziffern sortiert.\n\nDiese Implementierung stellt sicher, dass die Liste in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert ist und bei Gleichheit der Summen die ursprüngliche Reihenfolge beibehalten wird."}
{"result_4":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren und bei gleicher Summe den Index in der Originalliste zu berücksichtigen, können wir eine benutzerdefinierte Sortierfunktion verwenden. Hier ist ein Beispiel für die Implementierung:\n\n```php\n<?php\n\n/**\n * Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n * in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n * Hinweis: Wenn es mehrere Elemente mit ähnlicher Summe ihrer Ziffern gibt,\n * ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n *\n * Zum Beispiel:\n * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n * >>> order_by_points([]) == []\n */\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $absNumber = abs($number);\n        $sum = 0;\n        while ($absNumber > 0) {\n            $sum += $absNumber % 10;\n            $absNumber = (int)($absNumber / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem Index\n    usort($nums, function($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA === $sumB) {\n            // Wenn die Summen gleich sind, vergleiche die Indizes\n            return $nums->indexOf($a) - $nums->indexOf($b);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl. Sie verwendet eine Schleife, um jede Ziffer zu extrahieren und zur Summe hinzuzufügen.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf einer benutzerdefinierten Vergleichsfunktion.\n   - **Vergleichsfunktion**: Diese Funktion vergleicht zuerst die Summen der Ziffern der beiden Zahlen (`$a` und `$b`). Wenn diese gleich sind, wird der Index der Zahl in der Originalliste verwendet, um den Vergleich durchzuführen.\n3. **Indexof Funktion**: Da PHP keine direkte Möglichkeit bietet, den Index einer Zahl in einem Array zu finden, müssen wir dies manuell implementieren oder eine andere Strategie verwenden, um die Stabilität der Sortierung sicherzustellen.\n\n### Hinweis:\nDie obige Implementierung enthält einen Fehler, da `usort` keine Möglichkeit bietet, den Index direkt zu verwenden. Eine korrekte Implementierung würde die Indizes während der Sortierung speichern und diese Informationen später verwenden, um die Stabilität sicherzustellen. Hier ist eine verbesserte Version:\n\n```php\n<?php\n\n/**\n * Schreiben Sie eine Funktion, die die gegebene Liste von Ganzzahlen\n * in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert.\n * Hinweis: Wenn es mehrere Elemente mit ähnlicher Summe ihrer Ziffern gibt,\n * ordnen Sie sie basierend auf ihrem Index in der Originalliste.\n *\n * Zum Beispiel:\n * >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n * >>> order_by_points([]) == []\n */\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $absNumber = abs($number);\n        $sum = 0;\n        while ($absNumber > 0) {\n            $sum += $absNumber % 10;\n            $absNumber = (int)($absNumber / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem Index\n    usort($nums, function($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA === $sumB) {\n            // Wenn die Summen gleich sind, vergleiche die Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\nDiese Version verwendet `array_search`, um die Indizes der Elemente zu finden und sicherzustellen, dass die Sortierung stabil ist."}
{"result_5":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Dinge berücksichtigen:\n1. Die Summe der Ziffern jeder Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine Implementierung der Funktion `orderByPoints`:\n\n```php\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = (int)($number / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf einer benutzerdefinierten Vergleichsfunktion.\n   - Wenn die Summen der Ziffern von `$a` und `$b` gleich sind, wird der ursprüngliche Index verwendet, um die Reihenfolge zu bestimmen.\n   - Andernfalls wird die Differenz der Summen der Ziffern verwendet, um die Reihenfolge zu bestimmen.\n\nDiese Implementierung stellt sicher, dass die Liste in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert ist und bei Gleichheit der Summen die ursprüngliche Reihenfolge beibehalten wird."}
{"result_6":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine Implementierung der Funktion `orderByPoints`:\n\n```php\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = (int)($number / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use (&$nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispiele zur Überprüfung der Funktion\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf den angegebenen Kriterien.\n   - **Summe der Ziffern**: Wenn die Summen der Ziffern unterschiedlich sind, wird die Zahl mit der kleineren Summe zuerst platziert.\n   - **Ursprünglicher Index**: Wenn die Summen der Ziffern gleich sind, wird die Zahl mit dem kleineren ursprünglichen Index zuerst platziert. Dies wird durch `array_search` erreicht, das den Index der Zahl in der Original-Liste zurückgibt.\n\nDiese Implementierung stellt sicher, dass die Liste korrekt nach den angegebenen Kriterien sortiert wird."}
{"result_7":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte sowohl die Summe der Ziffern als auch den ursprünglichen Index berücksichtigen, um sicherzustellen, dass bei gleicher Summe der ursprüngliche Index beibehalten wird.\n\nHier ist eine mögliche Implementierung:\n\n```php\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = intdiv($number, 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        // Ansonsten vergleichen wir die Summen der Ziffern\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispiele zur Überprüfung\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place und verwendet eine benutzerdefinierte Vergleichsfunktion.\n   - Wenn die Summen der Ziffern gleich sind, wird der ursprüngliche Index verglichen, um die ursprüngliche Reihenfolge zu erhalten.\n   - Ansonsten werden die Summen der Ziffern verglichen.\n\nDiese Implementierung stellt sicher, dass die Liste in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert wird und bei gleicher Summe die ursprüngliche Reihenfolge beibehalten bleibt."}
{"result_8":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine Implementierung der Funktion `orderByPoints`:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = (int)($number / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use (&$nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispiele zur Überprüfung der Funktion\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n?>\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf den angegebenen Kriterien.\n   - Wenn die Summen der Ziffern gleich sind, wird der ursprüngliche Index verwendet, um die Reihenfolge zu bestimmen.\n   - Andernfalls wird die Differenz der Summen der Ziffern verwendet, um die Reihenfolge zu bestimmen.\n\nDiese Implementierung stellt sicher, dass die Liste in aufsteigender Reihenfolge nach der Summe ihrer Ziffern sortiert ist und bei gleichen Summen die ursprüngliche Reihenfolge beibehalten wird."}
{"result_9":" Um die gegebene Liste von Ganzzahlen in aufsteigender Reihenfolge nach der Summe ihrer Ziffern zu sortieren, können wir eine benutzerdefinierte Sortierfunktion verwenden. Diese Funktion sollte zwei Kriterien berücksichtigen:\n1. Die Summe der Ziffern der Zahl.\n2. Den ursprünglichen Index der Zahl in der Liste, falls die Summen der Ziffern gleich sind.\n\nHier ist eine Implementierung der Funktion `orderByPoints`:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Funktion zur Berechnung der Summe der Ziffern einer Zahl\n    function sumOfDigits($number) {\n        $sum = 0;\n        while ($number != 0) {\n            $sum += $number % 10;\n            $number = (int)($number / 10);\n        }\n        return $sum;\n    }\n\n    // Sortierfunktion basierend auf der Summe der Ziffern und dem ursprünglichen Index\n    usort($nums, function ($a, $b) use ($nums) {\n        $sumA = sumOfDigits($a);\n        $sumB = sumOfDigits($b);\n\n        if ($sumA == $sumB) {\n            // Wenn die Summen der Ziffern gleich sind, vergleichen wir die ursprünglichen Indizes\n            return array_search($a, $nums) - array_search($b, $nums);\n        }\n\n        // Ansonsten vergleichen wir die Summen der Ziffern\n        return $sumA - $sumB;\n    });\n\n    return $nums;\n}\n\n// Beispielaufrufe\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n```\n\n### Erklärung:\n1. **sumOfDigits Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl.\n2. **usort Funktion**: Die `usort`-Funktion sortiert die Liste in-place basierend auf den beiden Kriterien:\n   - Zuerst wird die Summe der Ziffern verglichen.\n   - Falls die Summen gleich sind, wird der ursprüngliche Index der Zahl verwendet, um die Reihenfolge zu bestimmen.\n\nDiese Implementierung stellt sicher, dass die Liste nach den angegebenen Kriterien sortiert wird."}
