{"result_0":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` mit den gegebenen Bedingungen erstellen. Dann müssen wir alle möglichen Tripel `(i, j, k)` finden, bei denen `i < j < k` gilt und die Summe der entsprechenden Elemente ein Vielfaches von 3 ist.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\nfunction getMaxTriples($n) {\n    // Erstellen des Arrays a\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zählen der gültigen Tripel\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel:\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung:\n\n1. **Array `a` erstellen**:\n   - Wir initialisieren ein leeres Array `$a`.\n   - Mit einer Schleife von `1` bis `n` berechnen wir jedes Element nach der Formel `i * i - i + 1` und fügen es dem Array hinzu.\n\n2. **Zählen der gültigen Tripel**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n   - Für jedes Tripel überprüfen wir, ob die Summe der Elemente `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist.\n   - Wenn dies der Fall ist, erhöhen wir den Zähler `$count`.\n\n### Beispiel:\nFür `n = 5` wird das Array `a` wie folgt erstellt:\n- `a = [1, 3, 7, 13, 21]`\n\nDas einzige gültige Tripel ist `(1, 7, 13)`, da `1 + 7 + 13 = 21`, was ein Vielfaches von 3 ist.\n\nDie Funktion gibt also `1` zurück, was der erwarteten Ausgabe entspricht."}
{"result_1":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` erstellen, wobei jedes Element `a[i]` nach der gegebenen Formel berechnet wird: `a[i] = i * i - i + 1`. Anschließend müssen wir alle möglichen Tripel `(a[i], a[j], a[k])` finden, bei denen `i < j < k` gilt und die Summe der drei Elemente ein Vielfaches von 3 ist.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\nfunction getMaxTriples($n) {\n    // Erstellen des Arrays a nach der gegebenen Formel\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zählen der gültigen Tripel\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung:\n1. **Array `a` erstellen**: Wir verwenden eine Schleife, um das Array `a` zu erstellen, wobei jedes Element nach der gegebenen Formel berechnet wird.\n2. **Zählen der gültigen Tripel**: Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(a[i], a[j], a[k])` zu durchlaufen, wobei `i < j < k` gilt.\n3. **Prüfen der Bedingung**: Für jedes Tripel prüfen wir, ob die Summe der drei Elemente ein Vielfaches von 3 ist. Wenn ja, erhöhen wir den Zähler `count`.\n4. **Rückgabe des Ergebnisses**: Schließlich geben wir den Zähler `count` zurück, der die Anzahl der gültigen Tripel darstellt.\n\nDiese Methode ist effizient genug für kleine Werte von `n`, aber für sehr große Werte könnte sie verbessert werden, indem man zusätzliche Datenstrukturen oder Algorithmen verwendet, um die Anzahl der notwendigen Berechnungen zu reduzieren."}
{"result_2":" Um die Anzahl der gültigen Tripel `(a[i], a[j], a[k])` zu berechnen, bei denen `i < j < k` und `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist, können wir die folgenden Schritte ausführen:\n\n1. Erstellen Sie das Array `a` basierend auf der gegebenen Formel `a[i] = i * i - i + 1`.\n2. Iterieren Sie durch alle möglichen Tripel `(i, j, k)` und überprüfen Sie, ob die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist.\n3. Zählen Sie die gültigen Tripel.\n\nHier ist der vollständige PHP-Code zur Lösung des Problems:\n\n```php\nfunction getMaxTriples($n) {\n    // Erstellen Sie das Array a basierend auf der gegebenen Formel\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zählen Sie die gültigen Tripel\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung des Codes:\n\n1. **Array `a` erstellen**:\n   - Wir verwenden eine Schleife, um das Array `a` zu erstellen, wobei jedes Element `a[i]` basierend auf der Formel `i * i - i + 1` berechnet wird.\n\n2. **Tripel zählen**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n   - Für jedes Tripel überprüfen wir, ob die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist (`($a[$i] + $a[$j] + $a[$k]) % 3 == 0`).\n   - Wenn diese Bedingung erfüllt ist, erhöhen wir den Zähler `count`.\n\n3. **Ergebnis zurückgeben**:\n   - Nachdem alle Tripel überprüft wurden, geben wir den Zähler `count` zurück, der die Anzahl der gültigen Tripel darstellt.\n\nDieser Ansatz ist effizient genug für kleine Werte von `n`, aber für sehr große Werte könnte er verbessert werden, indem man zusätzliche Datenstrukturen oder Algorithmen verwendet, um die Anzahl der Überprüfungen zu reduzieren."}
{"result_3":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` der Länge `n` erstellen, wobei jedes Element `a[i]` gemäß der Formel `a[i] = i * i - i + 1` berechnet wird. Anschließend müssen wir alle Tripel `(a[i], a[j], a[k])` finden, bei denen `i < j < k` gilt und die Summe der drei Elemente ein Vielfaches von 3 ist.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\n<?php\n\nfunction getMaxTriples($n) {\n    // Array a erstellen\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zähler für gültige Tripel\n    $count = 0;\n\n    // Alle möglichen Tripel (i, j, k) durchlaufen\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                // Überprüfen, ob die Summe ein Vielfaches von 3 ist\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n?>\n```\n\n### Erklärung:\n\n1. **Array `a` erstellen**:\n   - Wir verwenden eine Schleife, um das Array `a` der Länge `n` zu erstellen, wobei jedes Element gemäß der Formel `a[i] = i * i - i + 1` berechnet wird.\n\n2. **Zähler für gültige Tripel**:\n   - Wir initialisieren einen Zähler `count`, um die Anzahl der gültigen Tripel zu speichern.\n\n3. **Alle möglichen Tripel durchlaufen**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n   - Innerhalb der innersten Schleife überprüfen wir, ob die Summe der drei Elemente ein Vielfaches von 3 ist (`($a[$i] + $a[$j] + $a[$k]) % 3 == 0`). Wenn dies der Fall ist, erhöhen wir den Zähler `count`.\n\n4. **Ergebnis zurückgeben**:\n   - Schließlich geben wir den Zähler `count` zurück, der die Anzahl der gültigen Tripel enthält.\n\nDiese Implementierung sollte effizient genug sein, um für typische Eingabewerte von `n` zu funktionieren."}
{"result_4":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` mit den gegebenen Bedingungen erstellen. Dann müssen wir alle möglichen Tripel `(i, j, k)` finden, bei denen `i < j < k` gilt und die Summe der entsprechenden Elemente `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\nfunction getMaxTriples($n) {\n    // Erstellen des Arrays a gemäß der gegebenen Bedingung\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Variable zur Zählung der gültigen Tripel\n    $count = 0;\n\n    // Iterieren über alle möglichen Tripel (i, j, k)\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                // Überprüfen, ob die Summe ein Vielfaches von 3 ist\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung:\n1. **Array-Erstellung**: Wir erstellen das Array `a` gemäß der gegebenen Bedingung \( a[i] = i^2 - i + 1 \).\n2. **Zählung der Tripel**: Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n3. **Summen-Überprüfung**: Für jedes Tripel überprüfen wir, ob die Summe der entsprechenden Elemente ein Vielfaches von 3 ist. Wenn ja, erhöhen wir den Zähler `count`.\n4. **Rückgabe des Ergebnisses**: Schließlich geben wir die Anzahl der gültigen Tripel zurück.\n\nDieser Ansatz hat eine Zeitkomplexität von \( O(n^3) \), was für kleine Werte von `n` akzeptabel ist. Für sehr große Werte von `n` könnte dieser Ansatz jedoch zu ineffizient sein und Optimierungen wären notwendig."}
{"result_5":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` erstellen, wie in der Aufgabenstellung beschrieben. Dann müssen wir alle möglichen Tripel `(i, j, k)` finden, bei denen `i < j < k` gilt und die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist.\n\nHier ist der vollständige Code zur Lösung der Aufgabe:\n\n```php\n<?php\n\nfunction getMaxTriples($n) {\n    // Erstellen des Arrays a\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zähler für gültige Tripel\n    $count = 0;\n\n    // Überprüfen aller möglichen Tripel (i, j, k)\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n?>\n```\n\n### Erklärung des Codes:\n\n1. **Erstellen des Arrays `a`**:\n   - Wir verwenden eine Schleife, um das Array `a` zu erstellen, wobei jedes Element nach der Formel `i * i - i + 1` berechnet wird.\n\n2. **Zählen der gültigen Tripel**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n   - Innerhalb der innersten Schleife überprüfen wir, ob die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist (d.h., den Rest 0 hat).\n   - Wenn diese Bedingung erfüllt ist, erhöhen wir den Zähler `count`.\n\n3. **Rückgabe des Ergebnisses**:\n   - Nachdem alle Tripel überprüft wurden, geben wir den Zähler `count` zurück, der die Anzahl der gültigen Tripel darstellt.\n\nDieser Ansatz ist effizient genug für kleine Werte von `n`, wie im Beispiel gezeigt. Für größere Werte von `n` könnte eine Optimierung notwendig sein, um die Laufzeit zu verbessern."}
{"result_6":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` der Länge `n` erstellen, wobei jedes Element `a[i]` gemäß der Formel `a[i] = i * i - i + 1` berechnet wird. Anschließend müssen wir alle gültigen Tripel `(a[i], a[j], a[k])` finden, bei denen `i < j < k` und die Summe der Elemente ein Vielfaches von 3 ist.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\nfunction getMaxTriples($n) {\n    // Array a erstellen\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zähler für gültige Tripel\n    $count = 0;\n\n    // Alle möglichen Tripel (i, j, k) durchlaufen\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                // Überprüfen, ob die Summe ein Vielfaches von 3 ist\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung:\n\n1. **Array `a` erstellen**:\n   - Wir initialisieren ein leeres Array `$a`.\n   - Mit einer Schleife von `1` bis `n` berechnen wir jedes Element `a[i]` gemäß der Formel `i * i - i + 1` und fügen es dem Array hinzu.\n\n2. **Zähler für gültige Tripel**:\n   - Wir initialisieren einen Zähler `$count`, um die Anzahl der gültigen Tripel zu speichern.\n\n3. **Alle möglichen Tripel durchlaufen**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Kombinationen von `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n   - In der innersten Schleife überprüfen wir, ob die Summe der Elemente `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist. Wenn dies der Fall ist, erhöhen wir den Zähler `$count`.\n\n4. **Ergebnis zurückgeben**:\n   - Nachdem alle Kombinationen durchlaufen wurden, geben wir den Zähler `$count` zurück.\n\nDiese Methode ist effizient genug für kleine bis mittlere Werte von `n`. Für sehr große Werte von `n` könnte die Laufzeit optimiert werden, indem man zusätzliche Datenstrukturen oder Algorithmen verwendet, um die Anzahl der zu überprüfenden Kombinationen zu reduzieren."}
{"result_7":" Um die Aufgabe zu lösen, müssen wir zunächst das Array `a` gemäß der gegebenen Formel erstellen. Anschließend müssen wir alle möglichen Tripel `(i, j, k)` finden, bei denen `i < j < k` gilt und die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist.\n\nHier ist der vollständige Code zur Lösung des Problems:\n\n```php\n<?php\n\nfunction getMaxTriples($n) {\n    // Erstellen des Arrays a gemäß der gegebenen Formel\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zählen der gültigen Tripel\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n?>\n```\n\n### Erklärung des Codes:\n\n1. **Erstellen des Arrays `a`**:\n   - Wir verwenden eine Schleife, um das Array `a` gemäß der Formel `i * i - i + 1` zu erstellen.\n\n2. **Zählen der gültigen Tripel**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei `i < j < k` gilt.\n   - Für jedes Tripel überprüfen wir, ob die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist (d.h., der Rest bei Division durch 3 ist 0).\n   - Wenn dies der Fall ist, erhöhen wir den Zähler `count`.\n\n3. **Rückgabe des Ergebnisses**:\n   - Schließlich geben wir die Anzahl der gültigen Tripel zurück.\n\nDieser Ansatz hat eine Zeitkomplexität von O(n^3), was für kleine Werte von `n` in Ordnung ist, aber für sehr große Werte von `n` möglicherweise optimiert werden muss."}
{"result_8":" Um die Aufgabe zu lösen, müssen wir ein Array `a` der Länge `n` erstellen, wobei jedes Element `a[i]` nach der Formel `a[i] = i * i - i + 1` berechnet wird. Anschließend müssen wir die Anzahl der Tripel `(a[i], a[j], a[k])` finden, bei denen `i < j < k` gilt und `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\nfunction getMaxTriples($n) {\n    // Array a erstellen\n    $a = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Anzahl der gültigen Tripel zählen\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel:\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung:\n\n1. **Array `a` erstellen**:\n   - Wir initialisieren ein leeres Array `a`.\n   - Mit einer Schleife von `1` bis `n` berechnen wir jedes Element nach der Formel `i * i - i + 1` und fügen es dem Array hinzu.\n\n2. **Anzahl der gültigen Tripel zählen**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(a[i], a[j], a[k])` zu durchlaufen, wobei `i < j < k` gilt.\n   - Für jedes Tripel überprüfen wir, ob die Summe `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist (`% 3 == 0`).\n   - Wenn diese Bedingung erfüllt ist, erhöhen wir den Zähler `count`.\n\n3. **Ergebnis zurückgeben**:\n   - Nachdem alle Tripel überprüft wurden, geben wir den Zähler `count` zurück.\n\nDiese Methode ist effizient für kleine Werte von `n`, aber für sehr große Werte könnte sie verbessert werden, indem man beispielsweise die Modulo-Operationen optimiert oder andere Datenstrukturen verwendet."}
{"result_9":" Um die Anzahl der gültigen Tripel `(a[i], a[j], a[k])` zu berechnen, bei denen `i < j < k` und `a[i] + a[j] + a[k]` ein Vielfaches von 3 ist, können wir die folgenden Schritte ausführen:\n\n1. Erstellen Sie das Array `a` basierend auf der gegebenen Formel `a[i] = i * i - i + 1`.\n2. Iterieren Sie durch alle möglichen Tripel `(i, j, k)` und überprüfen Sie, ob die Summe ein Vielfaches von 3 ist.\n3. Zählen Sie die gültigen Tripel.\n\nHier ist der vollständige PHP-Code zur Lösung des Problems:\n\n```php\nfunction getMaxTriples($n) {\n    // Erstellen Sie das Array a basierend auf der gegebenen Formel\n    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\n    // Zählen Sie die gültigen Tripel\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n            }\n        }\n    }\n\n    return $count;\n}\n\n// Beispiel: Eingabe n = 5\n$n = 5;\necho getMaxTriples($n); // Ausgabe: 1\n```\n\n### Erklärung des Codes:\n\n1. **Array `a` erstellen**:\n   - Wir verwenden eine Schleife, um das Array `a` zu erstellen, wobei jedes Element basierend auf der Formel `a[i] = i * i - i + 1` berechnet wird.\n\n2. **Tripel zählen**:\n   - Wir verwenden drei verschachtelte Schleifen, um alle möglichen Tripel `(i, j, k)` zu durchlaufen, wobei sichergestellt wird, dass `i < j < k` gilt.\n   - Für jedes Tripel überprüfen wir, ob die Summe der Elemente ein Vielfaches von 3 ist (`($a[$i] + $a[$j] + $a[$k]) % 3 == 0`).\n   - Wenn dies der Fall ist, erhöhen wir den Zähler `count`.\n\n3. **Ergebnis zurückgeben**:\n   - Nachdem alle Tripel überprüft wurden, geben wir den Zähler `count` zurück, der die Anzahl der gültigen Tripel darstellt.\n\nDieser Ansatz ist effizient genug für kleine Werte von `n`, aber für sehr große Werte könnte er verbessert werden, indem man zusätzliche Datenstrukturen oder Algorithmen verwendet, um die Anzahl der notwendigen Berechnungen zu reduzieren."}
