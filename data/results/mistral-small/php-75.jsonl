{"result_0":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Zahlen verwenden. Hier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle der römischen Zahlen in Kleinbuchstaben\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Durchlaufen der Tabelle in absteigender Reihenfolge\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19) . \"\n\"; // Ausgabe: xix\necho intToMiniRoman(152) . \"\n\"; // Ausgabe: clii\necho intToMiniRoman(426) . \"\n\"; // Ausgabe: cdxxvi\n\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Zahlen**: Wir erstellen eine Tabelle, die die arabischen Zahlen den entsprechenden römischen Zeichen zuordnet. Die Tabelle ist in absteigender Reihenfolge sortiert, um sicherzustellen, dass wir immer die größte mögliche römische Zahl verwenden.\n2. **Ergebnis initialisieren**: Wir initialisieren eine leere Zeichenkette `$result`, die das Ergebnis speichern wird.\n3. **Durchlaufen der Tabelle**: Wir durchlaufen die Tabelle und fügen so lange das entsprechende römische Zeichen zum Ergebnis hinzu, wie die aktuelle Zahl größer oder gleich dem Wert in der Tabelle ist.\n4. **Zahl reduzieren**: Nachdem wir das römische Zeichen hinzugefügt haben, subtrahieren wir den Wert aus der Zahl.\n5. **Ergebnis zurückgeben**: Schließlich geben wir die resultierende Zeichenkette zurück.\n\nDiese Methode stellt sicher, dass wir immer die größte mögliche römische Zahl verwenden und somit die korrekte römische Numeral-Äquivalenz erhalten."}
{"result_1":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Ziffern und deren Werten verwenden. Anschließend zerlegen wir die Zahl in ihre Bestandteile (Tausender, Hunderter, Zehner und Einer) und konvertieren jede dieser Komponenten separat in die entsprechenden römischen Ziffern.\n\nHier ist der vollständige Code für die Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle mit den römischen Ziffern und deren Werten\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Zerlege die Zahl in ihre Bestandteile und konvertiere jede Komponente separat\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19); // Ausgabe: 'xix'\necho intToMiniRoman(152); // Ausgabe: 'clii'\necho intToMiniRoman(426); // Ausgabe: 'cdxxvi'\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Ziffern**: Wir erstellen eine Tabelle, die die Werte der römischen Ziffern in absteigender Reihenfolge enthält. Dies ist wichtig, um sicherzustellen, dass wir die größten Werte zuerst subtrahieren.\n2. **Leere Zeichenkette initialisieren**: Wir initialisieren eine leere Zeichenkette `$result`, in der wir die römischen Ziffern speichern werden.\n3. **Zerlegung und Konvertierung**: Wir durchlaufen die Tabelle der römischen Ziffern und subtrahieren den jeweiligen Wert von der Zahl, solange die Zahl größer oder gleich dem Wert ist. Dabei fügen wir die entsprechende römische Ziffer zur Zeichenkette hinzu.\n4. **Rückgabe**: Schließlich geben wir die resultierende Zeichenkette zurück.\n\nDiese Methode stellt sicher, dass wir die römischen Ziffern korrekt und effizient konvertieren."}
{"result_2":" Um die gegebene positive ganze Zahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Ziffern und ihren entsprechenden Werten verwenden. Hier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle mit römischen Ziffern und ihren entsprechenden Werten\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Durchlaufen der Tabelle in absteigender Reihenfolge\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19) . \"\n\"; // Ausgabe: xix\necho intToMiniRoman(152) . \"\n\"; // Ausgabe: clii\necho intToMiniRoman(426) . \"\n\"; // Ausgabe: cdxxvi\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Ziffern**: Wir erstellen eine Tabelle, die die römischen Ziffern und ihre entsprechenden Werte enthält. Die Reihenfolge ist so gewählt, dass wir von den größten Werten zu den kleinsten übergehen.\n2. **Ergebnisinitialisierung**: Eine leere Zeichenkette `$result` wird initialisiert, um die römischen Ziffern zu speichern.\n3. **Durchlaufen der Tabelle**: Wir durchlaufen die Tabelle in absteigender Reihenfolge und fügen so lange die entsprechende römische Zahl zur Ergebniszeichenkette hinzu, wie die aktuelle Zahl größer oder gleich dem Wert der römischen Zahl ist.\n4. **Rückgabe des Ergebnisses**: Die Funktion gibt die resultierende Zeichenkette zurück.\n\nDiese Methode stellt sicher, dass wir die römischen Ziffern in der korrekten Reihenfolge und Anzahl hinzufügen, um die richtige römische Numeral-Äquivalenz zu erhalten."}
{"result_3":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Zahlen verwenden. Hier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle mit den römischen Zahlen\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Die römischen Zahlen in absteigender Reihenfolge durchlaufen\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19); // 'xix'\necho \"\n\";\necho intToMiniRoman(152); // 'clii'\necho \"\n\";\necho intToMiniRoman(426); // 'cdxxvi'\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Zahlen**: Wir erstellen eine Tabelle, die die arabischen Zahlen den entsprechenden römischen Symbolen zuordnet. Die Reihenfolge ist wichtig, da wir von den größten Werten nach unten gehen müssen.\n2. **Leere Zeichenkette initialisieren**: Wir initialisieren eine leere Zeichenkette `$result`, in die wir die römischen Symbole hinzufügen werden.\n3. **Schleife durch die Tabelle**: Wir durchlaufen die Tabelle der römischen Zahlen und fügen so lange das entsprechende Symbol zur Zeichenkette hinzu, wie die aktuelle Zahl größer oder gleich dem Wert in der Tabelle ist.\n4. **Zahl verringern**: Nachdem wir ein Symbol hinzugefügt haben, verringern wir die Zahl um den entsprechenden Wert.\n5. **Ergebnis zurückgeben**: Schließlich geben wir die resultierende Zeichenkette zurück.\n\nDiese Methode stellt sicher, dass wir die römischen Symbole in der korrekten Reihenfolge und Anzahl hinzufügen, um die richtige römische Zahl zu erhalten."}
{"result_4":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Ziffern und ihren Werten verwenden. Hier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle mit den römischen Ziffern und ihren Werten\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Die römischen Ziffern in absteigender Reihenfolge durchlaufen\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19) . \"\n\"; // Ausgabe: xix\necho intToMiniRoman(152) . \"\n\"; // Ausgabe: clii\necho intToMiniRoman(426) . \"\n\"; // Ausgabe: cdxxvi\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Ziffern**: Wir erstellen eine Tabelle, die die Werte der römischen Ziffern in absteigender Reihenfolge enthält. Dies ist wichtig, um sicherzustellen, dass wir die größten Ziffern zuerst verwenden.\n2. **Schleife durch die Tabelle**: Wir durchlaufen die Tabelle und fügen so lange die entsprechende römische Ziffer zur Ergebniszeichenkette hinzu, wie der aktuelle Wert kleiner oder gleich dem Eingabewert ist.\n3. **Subtraktion des Werts**: Nachdem wir eine römische Ziffer hinzugefügt haben, subtrahieren wir den entsprechenden Wert von der Eingabezahl.\n4. **Wiederholung**: Dieser Prozess wird wiederholt, bis die Eingabezahl auf 0 reduziert ist.\n\nDiese Methode stellt sicher, dass wir die römischen Ziffern korrekt in der Reihenfolge ihrer Werte verwenden und die Ergebniszeichenkette in Kleinbuchstaben zurückgeben."}
{"result_5":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Ziffern verwenden. Die römischen Ziffern sind wie folgt:\n\n- I = 1\n- V = 5\n- X = 10\n- L = 50\n- C = 100\n- D = 500\n- M = 1000\n\nWir müssen sicherstellen, dass wir die römischen Ziffern korrekt kombinieren. Zum Beispiel sollte 4 nicht als IIII, sondern als IV geschrieben werden.\n\nHier ist eine Implementierung der Funktion `intToMiniRoman`:\n\n```php\nfunction intToMiniRoman($number) {\n    $values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\n    $romanNumeral = '';\n\n    foreach ($values as $value) {\n        while ($number >= $value) {\n            $romanNumeral .= $symbols[array_search($value, $values)];\n            $number -= $value;\n        }\n    }\n\n    return $romanNumeral;\n}\n\n// Beispiele\necho intToMiniRoman(19); // Ausgabe: 'xix'\necho intToMiniRoman(152); // Ausgabe: 'clii'\necho intToMiniRoman(426); // Ausgabe: 'cdxxvi'\n```\n\n### Erklärung:\n1. **Werte und Symbole**: Wir haben zwei Arrays, `$values` und `$symbols`, die die römischen Ziffern und ihre entsprechenden Werte enthalten. Die Reihenfolge ist so gewählt, dass größere Werte zuerst behandelt werden, um sicherzustellen, dass wir keine ungültigen Kombinationen wie IIII oder VIV erzeugen.\n2. **Schleife**: Wir durchlaufen die `$values`-Array und fügen die entsprechenden Symbole zur römischen Zahl hinzu, solange der aktuelle Wert kleiner oder gleich dem Eingabewert ist.\n3. **Subtraktion**: Nachdem wir ein Symbol hinzugefügt haben, subtrahieren wir den entsprechenden Wert von der Eingabezahl.\n\nDiese Methode stellt sicher, dass die römische Zahl korrekt gebildet wird und alle Bedingungen erfüllt sind."}
{"result_6":" Um die gegebene positive ganze Zahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Zahlen verwenden. Hier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle der römischen Zahlen\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Die Zahlen in absteigender Reihenfolge durchlaufen\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19); // Ausgabe: 'xix'\necho intToMiniRoman(152); // Ausgabe: 'clii'\necho intToMiniRoman(426); // Ausgabe: 'cdxxvi'\n\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Zahlen**: Wir erstellen eine Tabelle, die die arabischen Zahlen den entsprechenden römischen Symbolen zuordnet. Die Reihenfolge ist wichtig, da wir von den größten Werten nach unten gehen müssen.\n2. **Ergebnis initialisieren**: Eine leere Zeichenkette `$result` wird erstellt, um die römischen Zahlen zu speichern.\n3. **Schleife durchlaufen**: Wir durchlaufen die Tabelle in absteigender Reihenfolge und fügen so lange das entsprechende römische Symbol zum Ergebnis hinzu, wie die aktuelle Zahl größer oder gleich dem Wert der Tabelle ist.\n4. **Zahl verringern**: Nachdem ein Symbol hinzugefügt wurde, wird die Zahl um den Wert des Symbols verringert.\n5. **Ergebnis zurückgeben**: Schließlich wird das Ergebnis als Zeichenkette zurückgegeben.\n\nDiese Methode stellt sicher, dass wir die römischen Zahlen korrekt und in der richtigen Reihenfolge zusammenstellen."}
{"result_7":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den römischen Zahlen verwenden. Die römischen Zahlen haben feste Werte, die wir nutzen können, um die Umwandlung durchzuführen.\n\nHier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle mit den römischen Zahlen und ihren Werten\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Durchlaufen der Tabelle in absteigender Reihenfolge\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19) . \"\n\"; // Ausgabe: xix\necho intToMiniRoman(152) . \"\n\"; // Ausgabe: clii\necho intToMiniRoman(426) . \"\n\"; // Ausgabe: cdxxvi\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Zahlen**: Wir erstellen eine Tabelle, die die römischen Zahlen und ihre entsprechenden Werte enthält. Die Schlüssel sind die arabischen Zahlen, und die Werte sind die entsprechenden römischen Zeichen.\n2. **Ergebnisvariabl**: Wir initialisieren eine leere Zeichenkette `$result`, um das Ergebnis zu speichern.\n3. **Durchlaufen der Tabelle**: Wir durchlaufen die Tabelle in absteigender Reihenfolge und fügen so lange die entsprechenden römischen Zeichen zum Ergebnis hinzu, wie die Zahl größer oder gleich dem aktuellen Wert ist.\n4. **Subtraktion**: Nachdem wir die entsprechenden Zeichen hinzugefügt haben, subtrahieren wir den Wert von der Zahl.\n5. **Rückgabe des Ergebnisses**: Schließlich geben wir das Ergebnis zurück.\n\nDiese Methode stellt sicher, dass die römischen Zeichen in der korrekten Reihenfolge hinzugefügt werden und dass keine ungültigen Kombinationen entstehen."}
{"result_8":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz umzuwandeln und diese als Zeichenkette in Kleinbuchstaben zurückzugeben, können wir eine Tabelle mit den entsprechenden römischen Zahlen verwenden. Hier ist ein Beispiel für die Implementierung der Funktion `intToMiniRoman`:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle mit den römischen Zahlen in Kleinbuchstaben\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Durchlaufen der Tabelle in absteigender Reihenfolge\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19) . \"\n\"; // Ausgabe: xix\necho intToMiniRoman(152) . \"\n\"; // Ausgabe: clii\necho intToMiniRoman(426) . \"\n\"; // Ausgabe: cdxxvi\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Zahlen**: Wir erstellen eine Tabelle, die die arabischen Zahlen den entsprechenden römischen Zeichen in Kleinbuchstaben zuordnet.\n2. **Ergebnisinitialisierung**: Eine leere Zeichenkette `$result` wird initialisiert, um das Ergebnis zu speichern.\n3. **Durchlaufen der Tabelle**: Wir durchlaufen die Tabelle in absteigender Reihenfolge und fügen so lange das entsprechende römische Zeichen zum Ergebnis hinzu, wie die Zahl größer oder gleich dem aktuellen Wert ist.\n4. **Subtraktion**: Nachdem wir das Zeichen hinzugefügt haben, subtrahieren wir den Wert von der Zahl.\n5. **Rückgabe des Ergebnisses**: Schließlich geben wir die resultierende Zeichenkette zurück.\n\nDiese Methode stellt sicher, dass die römischen Zahlen korrekt gebildet werden und alle Bedingungen der Aufgabenstellung erfüllt sind."}
{"result_9":" Um die gegebene positive Ganzzahl in ihre römische Numeral-Äquivalenz als Zeichenkette zurückzugeben, können wir eine Tabelle der römischen Ziffern und deren Werte verwenden. Hier ist ein Beispiel für die Implementierung:\n\n```php\n<?php\n\nfunction intToMiniRoman($number) {\n    // Tabelle der römischen Ziffern und deren Werte\n    $romanNumerals = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\n    $result = '';\n\n    // Durchlaufen der Tabelle in absteigender Reihenfolge\n    foreach ($romanNumerals as $value => $symbol) {\n        while ($number >= $value) {\n            $result .= $symbol;\n            $number -= $value;\n        }\n    }\n\n    return $result;\n}\n\n// Beispiele\necho intToMiniRoman(19) . \"\n\"; // Ausgabe: xix\necho intToMiniRoman(152) . \"\n\"; // Ausgabe: clii\necho intToMiniRoman(426) . \"\n\"; // Ausgabe: cdxxvi\n?>\n```\n\n### Erklärung:\n1. **Tabelle der römischen Ziffern**: Wir erstellen eine Tabelle, die die arabischen Zahlen den entsprechenden römischen Zeichen zuordnet. Die Reihenfolge ist wichtig, da wir in absteigender Reihenfolge durchlaufen müssen.\n2. **Ergebnisinitialisierung**: Wir initialisieren eine leere Zeichenkette `$result`, die das Ergebnis speichern wird.\n3. **Durchlaufen der Tabelle**: Wir durchlaufen die Tabelle in absteigender Reihenfolge und fügen so lange die entsprechenden römischen Zeichen zum Ergebnis hinzu, wie die Zahl größer oder gleich dem aktuellen Wert ist.\n4. **Rückgabe des Ergebnisses**: Schließlich geben wir das Ergebnis zurück.\n\nDiese Methode stellt sicher, dass die römischen Ziffern in der korrekten Reihenfolge und Anzahl hinzugefügt werden."}
