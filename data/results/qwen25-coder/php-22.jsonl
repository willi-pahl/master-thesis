{"result_0":"Um die gemeinsamen eindeutigen Elemente zweier Listen zu finden und diese sortiert zurückzugeben, können Sie folgenden PHP-Code verwenden:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n * \n * @param array $l1 Die erste Liste von Elementen.\n * @param array $l2 Die zweite Liste von Elementen.\n * @return array Ein Array mit den sortierten, eindeutigen gemeinsamen Elementen.\n */\nfunction common($l1, $l2) {\n    // Finde die Schnittmenge der beiden Arrays\n    $intersection = array_intersect($l1, $l2);\n    \n    // Entferne doppelte Werte (obwohl array_intersect bereits eindeutige Werte liefert)\n    $uniqueIntersection = array_unique($intersection);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueIntersection);\n    \n    return $uniqueIntersection;\n}\n\n// Beispiele\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\n### Erklärung:\n1. **`array_intersect($l1, $l2)`**: Diese Funktion findet die gemeinsamen Elemente zwischen den beiden Arrays `$l1` und `$l2`.\n2. **`array_unique($intersection)`**: Obwohl `array_intersect` bereits eindeutige Werte liefert, wird hier `array_unique` verwendet, um sicherzustellen, dass alle Elemente einzigartig sind.\n3. **`sort($uniqueIntersection)`**: Diese Funktion sortiert die gemeinsamen Elemente in aufsteigender Reihenfolge.\n\nDieser Code sollte die gewünschten Ergebnisse liefern, wie in den Beispielen gezeigt."}
{"result_1":"Um die gemeinsamen Elemente zweier Listen zu finden, können wir folgende Schritte ausführen:\n\n1. Verwenden Sie die Funktion `array_intersect`, um die gemeinsamen Elemente der beiden Arrays zu erhalten.\n2. Entfernen Sie Duplikate mit `array_unique`.\n3. Sortieren Sie das Ergebnis mit `sort`.\n\nHier ist die vollständige Implementierung der Funktion `common`:\n\n```php\nfunction common($l1, $l2) {\n    // Finde die gemeinsamen Elemente\n    $intersection = array_intersect($l1, $l2);\n    \n    // Entferne Duplikate (obwohl array_intersect das in der Regel schon tut)\n    $uniqueIntersection = array_unique($intersection);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueIntersection);\n    \n    return $uniqueIntersection;\n}\n\n// Testfälle\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n```\n\nDiese Funktion gibt die sortierten eindeutigen gemeinsamen Elemente der beiden Listen zurück."}
{"result_2":"Um die gemeinsamen eindeutigen Elemente zweier Listen zu finden und diese sortiert zurückzugeben, können Sie folgenden PHP-Code verwenden:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n * \n * @param array $l1 Erste Liste von Zahlen.\n * @param array $l2 Zweite Liste von Zahlen.\n * @return array Sortierte Liste der eindeutigen gemeinsamen Elemente.\n */\nfunction common($l1, $l2) {\n    // Finde die Schnittmenge der beiden Listen\n    $intersection = array_intersect($l1, $l2);\n    \n    // Entferne doppelte Werte\n    $uniqueIntersection = array_unique($intersection);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueIntersection);\n    \n    return $uniqueIntersection;\n}\n\n// Beispiele\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\n### Erklärung:\n1. **`array_intersect($l1, $l2)`**: Diese Funktion findet die gemeinsamen Elemente zwischen den beiden Arrays `$l1` und `$l2`.\n2. **`array_unique($intersection)`**: Diese Funktion entfernt doppelte Werte aus dem Ergebnis der Schnittmenge.\n3. **`sort($uniqueIntersection)`**: Diese Funktion sortiert das Array mit den eindeutigen gemeinsamen Elementen in aufsteigender Reihenfolge.\n\nDas Ergebnis ist eine sortierte Liste der eindeutigen gemeinsamen Elemente beider Listen."}
{"result_3":"Um die gemeinsamen eindeutigen Elemente zweier Listen zu finden und diese sortiert zurückzugeben, können Sie die folgende PHP-Funktion verwenden:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n *\n * @param array $l1 Die erste Liste von Zahlen.\n * @param array $l2 Die zweite Liste von Zahlen.\n * @return array Ein Array mit den sortierten, eindeutigen gemeinsamen Elementen.\n */\nfunction common($l1, $l2) {\n    // Finde die Schnittmenge der beiden Arrays\n    $intersection = array_intersect($l1, $l2);\n    \n    // Entferne doppelte Werte (obwohl array_intersect bereits eindeutige Werte zurückgibt)\n    $uniqueIntersection = array_unique($intersection);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueIntersection);\n    \n    return $uniqueIntersection;\n}\n\n// Beispiele\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\n### Erklärung:\n1. **`array_intersect($l1, $l2)`**: Diese Funktion findet die gemeinsamen Elemente zwischen den beiden Arrays `$l1` und `$l2`.\n2. **`array_unique($intersection)`**: Obwohl `array_intersect` bereits eindeutige Werte zurückgibt, wird hier `array_unique` verwendet, um sicherzustellen, dass alle Elemente einzigartig sind.\n3. **`sort($uniqueIntersection)`**: Diese Funktion sortiert das Array der gemeinsamen Elemente in aufsteigender Reihenfolge.\n\nDiese Funktion gibt dann das gewünschte Ergebnis zurück: eine sortierte Liste der eindeutigen gemeinsamen Elemente beider Eingabelisten."}
{"result_4":"Um die gemeinsamen Elemente zweier Listen zu finden, können wir folgende Schritte ausführen:\n\n1. Verwenden Sie die `array_intersect`-Funktion, um die gemeinsamen Elemente der beiden Arrays zu erhalten.\n2. Entfernen Sie Duplikate mit `array_unique`.\n3. Sortieren Sie das Ergebnis mit `sort`.\n\nHier ist die vollständige Implementierung der Funktion:\n\n```php\nfunction common($l1, $l2) {\n    // Finde die gemeinsamen Elemente\n    $commonElements = array_intersect($l1, $l2);\n    \n    // Entferne Duplikate (obwohl array_intersect bereits eindeutige Werte zurückgibt)\n    $uniqueCommonElements = array_unique($commonElements);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueCommonElements);\n    \n    return $uniqueCommonElements;\n}\n\n// Testfälle\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n```\n\nDiese Funktion gibt die sortierten eindeutigen gemeinsamen Elemente der beiden Listen zurück."}
{"result_5":"Um die gemeinsamen Elemente zweier Listen zu finden, können wir die PHP-Funktionen `array_intersect` und `array_unique` verwenden. Die Funktion `array_intersect` gibt die gemeinsamen Werte der Arrays zurück, während `array_unique` sicherstellt, dass die Ergebnisse eindeutig sind. Schließlich sortieren wir das Ergebnis mit `sort`. Hier ist die vollständige Implementierung:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n */\nfunction common($l1, $l2) {\n    // Finde die gemeinsamen Elemente\n    $commonElements = array_intersect($l1, $l2);\n    \n    // Entferne Duplikate (obwohl array_intersect bereits eindeutige Werte zurückgibt)\n    $uniqueCommonElements = array_unique($commonElements);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueCommonElements);\n    \n    return $uniqueCommonElements;\n}\n\n// Testfälle\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\nDiese Funktion sollte die gewünschten Ergebnisse liefern. Die Verwendung von `array_intersect` und `sort` sorgt dafür, dass wir nur eindeutige gemeinsame Elemente in sortierter Reihenfolge erhalten."}
{"result_6":"Um die gemeinsamen eindeutigen Elemente zweier Listen zu finden und diese sortiert zurückzugeben, können Sie folgenden PHP-Code verwenden:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n * \n * @param array $l1 Die erste Liste von Zahlen.\n * @param array $l2 Die zweite Liste von Zahlen.\n * @return array Ein Array mit den sortierten, eindeutigen gemeinsamen Elementen.\n */\nfunction common($l1, $l2) {\n    // Finde die Schnittmenge der beiden Arrays\n    $intersection = array_intersect($l1, $l2);\n    \n    // Entferne doppelte Werte (obwohl array_intersect bereits eindeutige Werte liefert)\n    $uniqueIntersection = array_unique($intersection);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueIntersection);\n    \n    return $uniqueIntersection;\n}\n\n// Beispielaufrufe\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\n### Erklärung:\n- **`array_intersect($l1, $l2)`**: Diese Funktion findet die gemeinsamen Elemente zwischen den beiden Arrays `$l1` und `$l2`.\n- **`array_unique($intersection)`**: Obwohl `array_intersect` bereits eindeutige Werte liefert, wird hier `array_unique` verwendet, um sicherzustellen, dass alle Elemente einzigartig sind.\n- **`sort($uniqueIntersection)`**: Diese Funktion sortiert das Ergebnis in aufsteigender Reihenfolge.\n\nDieser Code sollte die gewünschten Ergebnisse liefern."}
{"result_7":"Um die gemeinsamen Elemente zweier Listen zu finden, können wir folgende Schritte ausführen:\n\n1. **Arrays in Mengen umwandeln**: Dies entfernt Duplikate.\n2. **Schnittmenge berechnen**: Findet die gemeinsamen Elemente beider Mengen.\n3. **Ergebnis sortieren**: Sortiert die gemeinsamen Elemente.\n\nHier ist der PHP-Code, der diese Schritte implementiert:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n *\n * @param array $l1 Die erste Liste von Zahlen.\n * @param array $l2 Die zweite Liste von Zahlen.\n * @return array Ein Array mit den sortierten, eindeutigen gemeinsamen Elementen.\n */\nfunction common($l1, $l2) {\n    // Arrays in Mengen umwandeln (Duplikate entfernen)\n    $set1 = array_unique($l1);\n    $set2 = array_unique($l2);\n\n    // Schnittmenge berechnen\n    $intersection = array_intersect($set1, $set2);\n\n    // Ergebnis sortieren\n    sort($intersection);\n\n    return $intersection;\n}\n\n// Beispiele\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\n### Erklärung:\n- **`array_unique($l1)` und `array_unique($l2)`**: Diese Funktionen entfernen Duplikate aus den Arrays.\n- **`array_intersect($set1, $set2)`**: Diese Funktion findet die gemeinsamen Elemente zwischen den beiden Mengen.\n- **`sort($intersection)`**: Diese Funktion sortiert das Ergebnis in aufsteigender Reihenfolge.\n\nDieser Code sollte die gewünschten Ergebnisse liefern."}
{"result_8":"Um die gemeinsamen eindeutigen Elemente zweier Listen zu finden und diese sortiert zurückzugeben, können Sie die folgende PHP-Funktion verwenden:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n *\n * @param array $l1 Die erste Liste von Elementen.\n * @param array $l2 Die zweite Liste von Elementen.\n * @return array Ein Array mit den sortierten, eindeutigen gemeinsamen Elementen.\n */\nfunction common($l1, $l2) {\n    // Finde die Schnittmenge der beiden Arrays\n    $intersection = array_intersect($l1, $l2);\n    \n    // Entferne doppelte Werte (obwohl array_intersect bereits eindeutige Werte liefert)\n    $uniqueIntersection = array_unique($intersection);\n    \n    // Sortiere das Ergebnis\n    sort($uniqueIntersection);\n    \n    return $uniqueIntersection;\n}\n\n// Beispiele\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\n### Erklärung:\n1. **`array_intersect($l1, $l2)`**: Diese Funktion gibt ein Array zurück, das nur die Werte enthält, die in beiden Eingabe-Arrays vorhanden sind.\n2. **`array_unique($intersection)`**: Obwohl `array_intersect` bereits eindeutige Werte liefert, ist diese Zeile sicherheitshalber eingefügt, um doppelte Werte zu entfernen.\n3. **`sort($uniqueIntersection)`**: Diese Funktion sortiert das Array in aufsteigender Reihenfolge.\n\nDiese Funktion sollte die gewünschten Ergebnisse liefern, wie in den Beispielen gezeigt."}
{"result_9":"Um die gemeinsamen Elemente zweier Listen zu finden, können wir die PHP-Funktionen `array_intersect` und `array_unique` verwenden. Die Funktion `array_intersect` gibt die Werte zurück, die in allen übergebenen Arrays vorhanden sind. Die Funktion `array_unique` entfernt doppelte Werte aus einem Array. Schließlich sortieren wir das Ergebnis mit der Funktion `sort`.\n\nHier ist die vollständige Implementierung der Funktion `common`:\n\n```php\n<?php\n\n/**\n * Gibt sortierte eindeutige gemeinsame Elemente für zwei Listen zurück.\n * >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n * [1, 5, 653]\n * >>> common([5, 3, 2, 8], [3, 2])\n * [2, 3]\n */\nfunction common($l1, $l2) {\n    // Finde die gemeinsamen Elemente\n    $commonElements = array_intersect($l1, $l2);\n    \n    // Entferne doppelte Werte (obwohl array_intersect bereits eindeutige Werte liefert)\n    $uniqueCommonElements = array_unique($commonElements);\n    \n    // Sortiere die Ergebnisliste\n    sort($uniqueCommonElements);\n    \n    return $uniqueCommonElements;\n}\n\n// Testfälle\nprint_r(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])); // [1, 5, 653]\nprint_r(common([5, 3, 2, 8], [3, 2])); // [2, 3]\n\n?>\n```\n\nDiese Funktion sollte die gewünschten Ergebnisse liefern. Die Verwendung von `array_intersect` stellt sicher, dass nur gemeinsame Elemente berücksichtigt werden, und `sort` ordnet das Ergebnis aufsteigend an."}
