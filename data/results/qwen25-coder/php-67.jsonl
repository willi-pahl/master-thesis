{"result_0":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollten sie in der gleichen Reihenfolge wie im Originalarray bleiben (stabil). Hier ist eine mögliche Implementierung:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen positiv machen, da wir nur die Beträge betrachten\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Letzte Ziffer hinzufügen\n            $num = (int)($num / 10); // Letzte Ziffer entfernen\n        }\n        return $sum;\n    }\n\n    // Wir erstellen ein Array von Arrays, das die Zahl und ihre Ziffernsumme enthält\n    $numsWithDigitSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dann dem Index\n    usort($numsWithDigitSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index']; // Stabile Sortierung basierend auf Index\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Werte\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithDigitSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n1. **digitSum-Funktion**: Diese Funktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs()` um negative Zahlen positiv zu machen, da wir nur die Beträge betrachten.\n\n2. **numsWithDigitSums**: Wir erstellen ein Array von Arrays, das jedes Element mit seiner Ziffernsumme und seinem ursprünglichen Index versehen hat. Dies hilft uns bei der Sortierung und dem Beibehalten der Originalreihenfolge für gleiche Ziffernsummen.\n\n3. **usort**: Wir verwenden `usort` um das Array nach der Ziffernsumme zu sortieren. Wenn zwei Elemente die gleiche Ziffernsumme haben, wird basierend auf ihrem Index sortiert, um eine stabile Sortierung sicherzustellen.\n\n4. **Extrahieren der Werte**: Schließlich extrahieren wir die sortierten Werte aus dem Array von Arrays und geben sie zurück.\n\nDiese Implementierung sollte die Anforderungen erfüllen und korrekt funktionieren."}
{"result_1":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollte die relative Reihenfolge beibehalten werden (stabil). Hier ist eine mögliche Implementierung in PHP:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen werden positiv genommen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit Zahlen und ihrer Ziffernsummen\n    $numsWithSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays nach Ziffernsumme und dann nach Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index'];\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Werte\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n\n1. **digitSum-Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer Zahl. Negative Zahlen werden positiv genommen, da die Vorzeichen für die Ziffernsumme irrelevant sind.\n\n2. **numsWithSums-Array**: Wir erstellen ein Array von Arrays, wobei jedes Element die ursprüngliche Zahl, ihre Ziffernsumme und ihren Index in der Originalliste enthält.\n\n3. **usort-Funktion**: Diese Funktion sortiert das `numsWithSums`-Array. Zuerst wird nach der Ziffernsumme sortiert. Wenn zwei Elemente dieselbe Ziffernsumme haben, wird nach dem Index sortiert, um die relative Reihenfolge beizubehalten.\n\n4. **Extrahieren der Werte**: Schließlich extrahieren wir die sortierten Werte aus dem `numsWithSums`-Array und geben sie als Ergebnis zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_2":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollen sie in der Reihenfolge ihres Auftretens im Originalarray bleiben.\n\nHier ist eine mögliche Implementierung der `orderByPoints`-Funktion:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen positiv machen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Letzte Ziffer addieren\n            $num = (int)($num / 10); // Letzte Ziffer entfernen\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit den Zahlen und ihren Ziffernsummen\n    $indexedNums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dann dem Index\n    usort($indexedNums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index']; // Stabil sortieren nach Index\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Werte\n    return array_map(function($item) {\n        return $item['value'];\n    }, $indexedNums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n\n1. **digitSum-Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl. Wir verwenden `abs()` um negative Zahlen positiv zu machen, da die Vorzeichen für die Ziffernsumme irrelevant sind.\n\n2. **array_map und array_keys**: Wir erstellen ein neues Array (`$indexedNums`), das jedes Element des Originalarrays mit seiner Ziffernsumme und seinem ursprünglichen Index versehen hat.\n\n3. **usort**: Mit `usort` sortieren wir das neue Array. Die Sortierung erfolgt zuerst nach der Ziffernsumme (`$a['digitSum'] <=> $b['digitSum']`). Wenn zwei Elemente dieselbe Ziffernsumme haben, wird dann nach dem Index sortiert (`$a['index'] <=> $b['index']`), um die Stabilität der Sortierung zu gewährleisten.\n\n4. **array_map**: Schließlich extrahieren wir die sortierten Werte aus dem sortierten Array und geben sie als Ergebnis zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_3":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die die Liste von Ganzzahlen basierend auf der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollte die relative Reihenfolge beibehalten werden, wie sie in der ursprünglichen Liste erscheint.\n\nHier ist eine mögliche Implementierung in PHP:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen werden positiv genommen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit den Zahlen und ihren Ziffernsummen\n    $numsWithSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dann dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index'];\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Werte\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n\n?>\n```\n\n### Erklärung:\n1. **digitSum-Funktion**: Diese Funktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs($num)`, um negative Zahlen positiv zu machen, da die Ziffernsumme unabhängig von Vorzeichen ist.\n\n2. **numsWithSums-Array**: Wir erstellen ein Array, das jedes Element mit seiner Ziffernsumme und seinem ursprünglichen Index versehen hat. Dies hilft uns bei der Sortierung beizubehalten, dass die relative Reihenfolge von Elementen mit gleicher Ziffernsumme erhalten bleibt.\n\n3. **usort-Funktion**: Wir verwenden `usort`, um das Array nach der Ziffernsumme zu sortieren. Wenn zwei Elemente dieselbe Ziffernsumme haben, wird nach dem ursprünglichen Index sortiert, um die relative Reihenfolge beizubehalten.\n\n4. **Extrahieren der Werte**: Schließlich extrahieren wir die sortierten Werte aus dem Array und geben sie zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_4":"Um die gegebene Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn mehrere Zahlen dieselbe Ziffernsumme haben, sollen sie in der Reihenfolge ihres Auftretens in der ursprünglichen Liste bleiben.\n\nHier ist eine mögliche Implementierung dieser Funktion in PHP:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion zum Berechnen der Summe der Ziffern einer Zahl\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen positiv machen, um die Betrachtung zu vereinfachen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Die letzte Ziffer addieren\n            $num = (int)($num / 10); // Die letzte Ziffer entfernen\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit den Zahlen und ihren Ziffernsummen\n    $numsWithDigitSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dem Index\n    usort($numsWithDigitSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index']; // Stabile Sortierung basierend auf dem Index\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Zahlen\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithDigitSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // Ausgabe: [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // Ausgabe: []\n\n?>\n```\n\n### Erklärung:\n1. **digitSum-Funktion**: Diese Funktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs($num)`, um negative Zahlen positiv zu machen, da die Vorzeichen für die Ziffernsumme irrelevant sind.\n\n2. **numsWithDigitSums-Array**: Wir erstellen ein Array von Arrays, das jede Zahl mit ihrer Ziffernsumme und ihrem ursprünglichen Index verknüpft.\n\n3. **usort-Funktion**: Diese Funktion sortiert das `numsWithDigitSums`-Array. Zuerst wird nach der Ziffernsumme sortiert. Wenn zwei Elemente dieselbe Ziffernsumme haben, wird nach dem ursprünglichen Index sortiert, um eine stabile Sortierung zu gewährleisten.\n\n4. **Extrahieren der sortierten Zahlen**: Schließlich extrahieren wir die sortierten Zahlen aus dem `numsWithDigitSums`-Array und geben sie zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_5":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die die Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollten sie in der gleichen Reihenfolge wie im Originalarray bleiben (stabil). Hier ist eine mögliche Implementierung:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion zum Berechnen der Summe der Ziffern einer Zahl\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen werden positiv, da die Vorzeichen nicht in die Summe einfließen sollen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Die letzte Ziffer wird zur Summe addiert\n            $num = (int)($num / 10); // Die letzte Ziffer wird entfernt\n        }\n        return $sum;\n    }\n\n    // Wir erstellen ein Array von Arrays, das die Zahl und ihre Ziffernsumme enthält\n    $numsWithSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Wir sortieren das Array basierend auf der Ziffernsumme und dann nach dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index']; // Stabile Sortierung basierend auf dem ursprünglichen Index\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Wir extrahieren die sortierten Werte\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n1. **digitSum-Funktion**: Diese Funktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs()` um sicherzustellen, dass negative Vorzeichen keine Rolle spielen.\n2. **numsWithSums-Array**: Wir erstellen ein Array von Arrays, das jede Zahl mit ihrer Ziffernsumme und ihrem ursprünglichen Index verknüpft.\n3. **usort-Funktion**: Mit `usort` sortieren wir das Array basierend auf der Ziffernsumme. Wenn zwei Elemente dieselbe Ziffernsumme haben, verwenden wir ihren ursprünglichen Index für eine stabile Sortierung.\n4. **Ergebnis-Array**: Schließlich extrahieren wir die sortierten Werte aus dem `numsWithSums`-Array und geben sie zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_6":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn mehrere Zahlen dieselbe Ziffernsumme haben, sollen sie in der Reihenfolge ihres Auftretens im Originalarray bleiben.\n\nHier ist die Implementierung der `orderByPoints`-Funktion:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen positiv machen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Letzte Ziffer addieren\n            $num = (int)($num / 10); // Letzte Ziffer entfernen\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit den Zahlen und ihrer Ziffernsummen\n    $numsWithSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dann dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index']; // Stabil sortieren nach Index\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Zahlen\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n\n1. **digitSum-Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer gegebenen Zahl. Wir verwenden `abs($num)`, um negative Zahlen positiv zu machen, da die Vorzeichen für die Ziffernsumme irrelevant sind.\n\n2. **numsWithSums-Array**: Wir erstellen ein neues Array, das jedes Element des Originalarrays mit seiner Ziffernsumme und seinem ursprünglichen Index versehen hat. Dies ermöglicht es uns, später stabil zu sortieren.\n\n3. **usort-Funktion**: Mit `usort` sortieren wir das Array der Objekte nach der Ziffernsumme. Wenn zwei Elemente die gleiche Ziffernsumme haben, wird nach dem ursprünglichen Index sortiert, um eine stabile Sortierung zu gewährleisten.\n\n4. **Extraktion der sortierten Werte**: Schließlich extrahieren wir die sortierten Zahlen aus dem Array von Objekten und geben es zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_7":"Um die gegebene Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn mehrere Zahlen dieselbe Ziffernsumme haben, sollen sie in der gleichen Reihenfolge wie im Originalarray bleiben.\n\nHier ist eine mögliche Implementierung dieser Funktion in PHP:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen positiv machen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Letzte Ziffer addieren\n            $num = (int)($num / 10); // Letzte Ziffer entfernen\n        }\n        return $sum;\n    }\n\n    // Erstelle ein Array von Paaren [Zahl, Index]\n    $indexedNums = array_map(function($num, $index) {\n        return [$num, $index];\n    }, $nums, array_keys($nums));\n\n    // Sortiere das Array basierend auf der Ziffernsumme und dann dem Index\n    usort($indexedNums, function($a, $b) {\n        $sumA = digitSum($a[0]);\n        $sumB = digitSum($b[0]);\n        \n        if ($sumA == $sumB) {\n            return $a[1] <=> $b[1]; // Sortiere nach Index, wenn Ziffernsummen gleich\n        }\n        \n        return $sumA <=> $sumB; // Sonst sortiere nach Ziffernsumme\n    });\n\n    // Extrahiere die sortierten Zahlen\n    return array_map(function($pair) {\n        return $pair[0];\n    }, $indexedNums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n\n1. **digitSum-Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs()` um negative Zahlen positiv zu machen, da wir nur die Beträge der Ziffern interessieren.\n\n2. **indexedNums-Array**: Wir erstellen ein Array von Paaren `[Zahl, Index]`, um den ursprünglichen Index jeder Zahl beizubehalten.\n\n3. **usort-Funktion**: Mit `usort` sortieren wir das Array der Paare. Die Sortierung erfolgt zuerst nach der Ziffernsumme und dann nach dem Index, falls die Ziffernsummen gleich sind.\n\n4. **Ergebnis-Array**: Schließlich extrahieren wir die sortierten Zahlen aus den Paaren und geben sie zurück.\n\nDiese Implementierung sollte die gewünschten Ergebnisse liefern."}
{"result_8":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollte die relative Reihenfolge beibehalten werden (stabil).\n\nHier ist die Implementierung der `orderByPoints`-Funktion in PHP:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen werden positiv genommen\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n        }\n        return $sum;\n    }\n\n    // Erstellen eines Arrays mit den Zahlen und ihren Ziffernsummen\n    $numsWithSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren des Arrays basierend auf der Ziffernsumme und dann dem Index\n    usort($numsWithSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index'];\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Werte\n    return array_column($numsWithSums, 'value');\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n\n1. **digitSum-Funktion**: Diese Hilfsfunktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs($num)`, um negative Zahlen zu positiven zu konvertieren, da die Ziffernsumme unabhängig von Vorzeichen ist.\n\n2. **numsWithSums-Array**: Wir erstellen ein Array von Arrays, wobei jedes Element das Originalwert (`value`), seine Ziffernsumme (`digitSum`) und seinen ursprünglichen Index (`index`) enthält.\n\n3. **usort-Funktion**: Mit `usort` sortieren wir das Array basierend auf der Ziffernsumme. Wenn zwei Elemente dieselbe Ziffernsumme haben, verwenden wir ihren ursprünglichen Index, um eine stabile Sortierung zu gewährleisten.\n\n4. **array_column-Funktion**: Schließlich extrahieren wir die sortierten Werte aus dem Array und geben sie zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
{"result_9":"Um die Aufgabe zu lösen, müssen wir eine Funktion erstellen, die eine Liste von Ganzzahlen nach der Summe ihrer Ziffern sortiert. Wenn zwei Zahlen dieselbe Ziffernsumme haben, sollte die relative Reihenfolge beibehalten werden (stabil). Hier ist eine mögliche Implementierung in PHP:\n\n```php\n<?php\n\nfunction orderByPoints($nums) {\n    // Eine Hilfsfunktion, um die Summe der Ziffern einer Zahl zu berechnen\n    function digitSum($num) {\n        $num = abs($num); // Negative Zahlen positiv machen, da wir nur die Beträge betrachten\n        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10; // Letzte Ziffer addieren\n            $num = (int)($num / 10); // Letzte Ziffer entfernen\n        }\n        return $sum;\n    }\n\n    // Wir erstellen ein Array von Arrays, das die Zahl und ihre Ziffernsumme enthält\n    $numsWithDigitSums = array_map(function($num, $index) {\n        return ['value' => $num, 'digitSum' => digitSum($num), 'index' => $index];\n    }, $nums, array_keys($nums));\n\n    // Sortieren basierend auf der Ziffernsumme und dann nach dem Index\n    usort($numsWithDigitSums, function($a, $b) {\n        if ($a['digitSum'] === $b['digitSum']) {\n            return $a['index'] <=> $b['index']; // Stabile Sortierung basierend auf Index\n        }\n        return $a['digitSum'] <=> $b['digitSum'];\n    });\n\n    // Extrahieren der sortierten Werte\n    return array_map(function($item) {\n        return $item['value'];\n    }, $numsWithDigitSums);\n}\n\n// Testfälle\nprint_r(orderByPoints([1, 11, -1, -11, -12])); // [-1, -11, 1, -12, 11]\nprint_r(orderByPoints([])); // []\n\n?>\n```\n\n### Erklärung:\n1. **digitSum-Funktion**: Diese Funktion berechnet die Summe der Ziffern einer Zahl. Wir verwenden `abs()` um negative Zahlen zu positiven zu konvertieren, da wir nur die Beträge betrachten.\n\n2. **numsWithDigitSums**: Wir erstellen ein Array von Arrays, das jede Zahl mit ihrer Ziffernsumme und ihrem ursprünglichen Index verknüpft. Dies hilft uns bei der stabilen Sortierung.\n\n3. **usort-Funktion**: Wir verwenden `usort` um das Array nach der Ziffernsumme zu sortieren. Wenn die Ziffernsummen gleich sind, sortieren wir nach dem ursprünglichen Index, um eine stabile Sortierung zu gewährleisten.\n\n4. **Extrahieren der Werte**: Schließlich extrahieren wir die sortierten Werte aus dem Array von Arrays und geben es zurück.\n\nDiese Implementierung sollte die Anforderungen der Aufgabe erfüllen."}
